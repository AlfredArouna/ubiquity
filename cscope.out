cscope 15 /home/zarkdav/src/jolicloud/system/ubiquity -c 0000527367
	@ubiquity/i18n.py

20 import 
	~<re


21 import 
	~<subprocess


22 import 
	~<codecs


23 import 
	~<os


24 from 
ubiquity
import 
	~<misc


26 
_supported_locales
= None 

28 def 
	$get_supported_locales
( ) : 

30 global 
_supported_locales


31 if 
_supported_locales
is None : 

32 
_supported_locales
= { } 

33 
supported
= 
	`open
( '/usr/share/i18n/SUPPORTED' ) 

34 for 
line
in 
supported
: 

35 ( 
locale
, 
charset
) = 
line
. 
	`split
( None , 1 ) 

36 
_supported_locales
[ 
locale
] = 
charset


37 
supported
. 
	`close
( ) 

38 return 
_supported_locales


41 
	}


41 
_strip_context_re
= None 

43 def 
	$strip_context
( 
question
, 
string
) : 

45 global 
_strip_context_re


46 if 
_strip_context_re
is None : 

47 
_strip_context_re
= 
re
. 
	`compile
( r'\[\s[^\[\]]*\]$' ) 

48 
string
= 
_strip_context_re
. 
	`sub
( '' , 
string
) 

50 return 
string


53 
	}


53 
_translations
= None 

55 def 
	$get_translations
( 
languages
= None , 
core_names
= [ ] ) : 

65 global 
_translations


66 if 
_translations
is None or 
languages
is not None or 
	`len
( 
core_names
) > 0 : 

67 if 
languages
is None : 

68 
use_langs
= None 

70 
use_langs
= 
	`set
( 'c' ) 

71 for 
lang
in 
languages
: 

72 
ll_cc
= 
lang
. 
	`lower
( ) . 
	`split
( '.' ) [ 0 ] 

73 
ll
= 
ll_cc
. 
	`split
( '_' ) [ 0 ] 

74 
use_langs
. 
	`add
( 
ll_cc
) 

75 
use_langs
. 
	`add
( 
ll
) 

77 
_translations
= { } 

78 
devnull
= 
	`open
( '/dev/null' , 'w' ) 

80 def 
	$subprocess_setup
( ) : 

81 
misc
. 
	`regain_privileges
( ) 

82 
	}


82 
db
= 
subprocess
. 
	`Popen
( 

87 
stdout
= 
subprocess
. 
PIPE
, 
stderr
= 
devnull
, 
preexec_fn
= 
subprocess_setup
) 

88 
question
= None 

89 
descriptions
= { } 

90 
fieldsplitter
= 
re
. 
	`compile
( r':\s*' ) 

92 for 
line
in 
db
. 
stdout
: 

93 
line
= 
line
. 
	`rstrip
( '\n' ) 

94 if ':' not in 
line
: 

95 if 
question
is not None : 

96 
_translations
[ 
question
] = 
descriptions


97 
descriptions
= { } 

98 
question
= None 

101 ( 
name
, 
value
) = 
fieldsplitter
. 
	`split
( 
line
, 1 ) 

102 if 
value
== '' : 

104 
name
= 
name
. 
	`lower
( ) 

105 if 
name
== 'name' : 

106 
question
= 
value


107 elif 
name
. 
	`startswith
( 'description' ) : 

108 
namebits
= 
name
. 
	`split
( '-' , 1 ) 

109 if 
	`len
( 
namebits
) == 1 : 

110 
lang
= 'c' 

112 
lang
= 
namebits
[ 1 ] . 
	`lower
( ) 

114 
lang
= 
lang
. 
	`split
( '.' ) [ 0 ] 

115 if ( 
use_langs
is None or 
lang
in 
use_langs
or 

116 
question
in 
core_names
) : 

117 
value
= 
	`strip_context
( 
question
, 
value
) 

118 
descriptions
[ 
lang
] = 
value
. 
	`replace
( '\\n' , '\n' ) 

119 elif 
name
. 
	`startswith
( 'extended_description' ) : 

120 
namebits
= 
name
. 
	`split
( '-' , 1 ) 

121 if 
	`len
( 
namebits
) == 1 : 

122 
lang
= 'c' 

124 
lang
= 
namebits
[ 1 ] . 
	`lower
( ) 

126 
lang
= 
lang
. 
	`split
( '.' ) [ 0 ] 

127 if ( 
use_langs
is None or 
lang
in 
use_langs
or 

128 
question
in 
core_names
) : 

129 
value
= 
	`strip_context
( 
question
, 
value
) 

130 if 
lang
not in 
descriptions
: 

131 
descriptions
[ 
lang
] = 
value
. 
	`replace
( '\\n' , '\n' ) 

134 if 
question
in ( 'grub-installer/bootdev' , 

136 
descriptions
[ "extended:%s" % 
lang
] = 

137 
value
. 
	`replace
( '\\n' , '\n' ) 

139 
db
. 
	`wait
( ) 

140 
devnull
. 
	`close
( ) 

142 return 
_translations


144 
string_questions
= { 

169 
string_extended
= 
	`set
( 'grub_device_label' ) 

171 def 
	$map_widget_name
( 
name
) : 

173 if '/' in 
name
: 

174 
question
= 
name


175 elif 
name
in 
string_questions
: 

176 
question
= 
string_questions
[ 
name
] 

178 
question
= 'ubiquity/text/%s' % 
name


179 return 
question


181 
	}


181 def 
	$get_string
( 
name
, 
lang
) : 

183 
question
= 
	`map_widget_name
( 
name
) 

184 
translations
= 
	`get_translations
( ) 

185 if 
question
not in 
translations
: 

188 if 
lang
is None : 

189 
lang
= 'c' 

191 
lang
= 
lang
. 
	`lower
( ) 

192 if 
name
in 
string_extended
: 

193 
lang
= 'extended:%s' % 
lang


195 if 
lang
in 
translations
[ 
question
] : 

196 
text
= 
translations
[ 
question
] [ 
lang
] 

198 
ll_cc
= 
lang
. 
	`split
( '.' ) [ 0 ] 

199 
ll
= 
ll_cc
. 
	`split
( '_' ) [ 0 ] 

200 if 
ll_cc
in 
translations
[ 
question
] : 

201 
text
= 
translations
[ 
question
] [ 
ll_cc
] 

202 elif 
ll
in 
translations
[ 
question
] : 

203 
text
= 
translations
[ 
question
] [ 
ll
] 

204 elif 
lang
. 
	`startswith
( 'extended:' ) : 

205 
text
= 
translations
[ 
question
] [ 'extended:c' ] 

207 
text
= 
translations
[ 
question
] [ 'c' ] 

209 return 
	`unicode
( 
text
, 'utf-8' , 'replace' ) 

214 
	}


214 def 
	$ascii_transliterate
( 
exc
) : 

215 if not 
	`isinstance
( 
exc
, 
UnicodeEncodeError
) : 

216 raise 
	`TypeError
( "don't know how to handle %r" % 
exc
) 

217 import 
	~<unicodedata


218 
s
= 
unicodedata
. 
	`normalize
( 'NFD' , 
exc
. object [ 
exc
. 
start
] ) [ : 1 ] 

219 if 
	`ord
( 
s
) in 
	`range
( 128 ) : 

220 return 
s
, 
exc
. 
start
+ 1 

222 return u'' , 
exc
. 
start
+ 1 

224 
	}


224 
codecs
. 
	`register_error
( 'ascii_transliterate' , 
ascii_transliterate
) 

226 

	@ubiquity/progressposition.py

20 class 
	cProgressPosition
( object ) : 

32 def 
	$__init__
( 
self
) : 

36 
self
. 
positions
= [ ] 

37 
self
. 
inner_position
= 0.0 

39 
	}


39 def 
	$start
( 
self
, 
start
, 
end
, 
title
) : 

40 
self
. 
positions
. 
	`insert
( 0 , [ 
start
, 
end
, 
start
, 
end
, 
title
] ) 

42 
	}


42 def 
	$stop
( 
self
) : 

43 
self
. 
positions
. 
	`pop
( 0 ) 

45 
	}


45 def 
	$set_region
( 
self
, 
region_start
, 
region_end
) : 

46 
self
. 
positions
[ 0 ] [ 2 ] = 
region_start


47 
self
. 
positions
[ 0 ] [ 3 ] = 
region_end


49 
	}


49 def 
	$get_region
( 
self
) : 

54 return ( 
self
. 
positions
[ 0 ] [ 2 ] , 
self
. 
positions
[ 0 ] [ 3 ] ) 

56 
	}


56 def 
	$set
( 
self
, 
value
) : 

57 
self
. 
inner_position
= 
	`float
( 
value
) 

59 
	}


59 def 
	$step
( 
self
, 
increment
) : 

60 
self
. 
inner_position
+= 
increment


62 
	}


62 def 
	$depth
( 
self
) : 

63 return 
	`len
( 
self
. 
positions
) 

65 
	}


65 def 
	$fraction
( 
self
) : 

66 if not 
self
. 
positions
: 

69 if 
self
. 
positions
[ 0 ] [ 0 ] == 
self
. 
positions
[ 0 ] [ 1 ] : 

72 
fraction
= ( ( 
self
. 
inner_position
- 
self
. 
positions
[ 0 ] [ 0 ] ) / 

73 ( 
self
. 
positions
[ 0 ] [ 1 ] - 
self
. 
positions
[ 0 ] [ 0 ] ) ) 

74 for 
bar
in 
	`range
( 1 , 
	`len
( 
self
. 
positions
) ) : 

75 
position
= ( 
self
. 
positions
[ 
bar
] [ 2 ] + 

76 
fraction
* ( 
self
. 
positions
[ 
bar
] [ 3 ] - 

77 
self
. 
positions
[ 
bar
] [ 2 ] ) ) 

78 
fraction
= ( ( 
position
- 
self
. 
positions
[ 
bar
] [ 0 ] ) / 

79 ( 
self
. 
positions
[ 
bar
] [ 1 ] - 
self
. 
positions
[ 
bar
] [ 0 ] ) ) 

80 return 
fraction


82 
	}


82 def 
	$title
( 
self
) : 

83 if not 
self
. 
positions
: 

86 return 
self
. 
positions
[ 0 ] [ 4 ] 

86 
	}


	@ubiquity/misc.py

4 import 
	~<os


5 import 
	~<pwd


6 import 
	~<re


7 import 
	~<subprocess


8 import 
	~<syslog


10 def 
	$is_swap
( 
device
) : 

11 
swap
= False 

13 
fp
= 
	`open
( '/proc/swaps' ) 

14 for 
line
in 
fp
: 

15 if 
line
. 
	`startswith
( 
device
+ ' ' ) : 

16 
swap
= True 

18 
swap
= False 

20 if 
fp
: 

21 
fp
. 
	`close
( ) 

22 return 
swap


24 
	}


24 def 
	$find_in_os_prober
( 
device
) : 

27 
	`regain_privileges
( ) 

29 if not 
find_in_os_prober
. 
called
: 

30 
find_in_os_prober
. 
called
= True 

31 
subp
= 
subprocess
. 
	`Popen
( [ 'os-prober' ] , 
stdout
= 
subprocess
. 
PIPE
, 

32 
stderr
= 
subprocess
. 
PIPE
) 

33 
result
= 
subp
. 
	`communicate
( ) [ 0 ] . 
	`splitlines
( ) 

34 for 
res
in 
result
: 

35 
res
= 
res
. 
	`split
( ':' ) 

36 
find_in_os_prober
. 
oslist
[ 
res
[ 0 ] ] = 
res
[ 1 ] 

37 if 
device
in 
find_in_os_prober
. 
oslist
: 

38 
ret
= 
find_in_os_prober
. 
oslist
[ 
device
] 

39 elif 
	`is_swap
( 
device
) : 

40 
ret
= 'swap' 

42 
syslog
. 
	`syslog
( 'Device %s not found in os-prober output' % 
	`str
( 
device
) ) 

43 
ret
= '' 

44 return 
	`unicode
( 
ret
, 'utf-8' , 'replace' ) 

45 except ( 
KeyboardInterrupt
, 
SystemExit
) : 

48 import 
	~<traceback


49 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, "Error in find_in_os_prober:" ) 

50 for 
line
in 
traceback
. 
	`format_exc
( ) . 
	`split
( '\n' ) : 

51 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 
line
) 

53 
	`drop_privileges
( ) 

55 
	}


55 
find_in_os_prober
. 
oslist
= { } 

56 
find_in_os_prober
. 
called
= False 

58 def 
	$get_release_name
( ) : 

59 if not 
get_release_name
. 
release_name
: 

60 
fp
= None 

62 
fp
= 
	`open
( '/cdrom/.disk/info' ) 

63 
line
= 
fp
. 
	`readline
( ) 

64 if 
line
: 

65 
get_release_name
. 
release_name
= ' ' . 
	`join
( 
line
. 
	`split
( ) [ : 2 ] ) 

67 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 

70 if 
fp
: 

71 
fp
. 
	`close
( ) 

72 if not 
get_release_name
. 
release_name
: 

73 
release_name
= 'Ubuntu' 

74 return 
get_release_name
. 
release_name


75 
	}


75 
get_release_name
. 
release_name
= '' 

77 def 
	$execute
( * 
args
) : 

80 
log_args
= [ 'log-output' , '-t' , 'ubiquity' ] 

81 
log_args
. 
	`extend
( 
args
) 

84 
status
= 
subprocess
. 
	`call
( 
log_args
) 

85 except 
IOError
, 
e
: 

86 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, ' ' . 
	`join
( 
log_args
) ) 

87 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 

88 "OS error(%s): %s" % ( 
e
. 
errno
, 
e
. 
strerror
) ) 

91 if 
status
!= 0 : 

92 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, ' ' . 
	`join
( 
log_args
) ) 

94 
syslog
. 
	`syslog
( ' ' . 
	`join
( 
log_args
) ) 

97 
	}


97 def 
	$execute_root
( * 
args
) : 

98 
	`regain_privileges
( ) 

99 
	`execute
( * 
args
) 

100 
	`drop_privileges
( ) 

102 
	}


102 def 
	$format_size
( 
size
) : 

104 if 
size
< 1024 : 

105 
unit
= 'B' 

106 
factor
= 1 

107 elif 
size
< 1024 * 1024 : 

108 
unit
= 'kB' 

109 
factor
= 1024 

110 elif 
size
< 1024 * 1024 * 1024 : 

111 
unit
= 'MB' 

112 
factor
= 1024 * 1024 

113 elif 
size
< 1024 * 1024 * 1024 * 1024 : 

114 
unit
= 'GB' 

115 
factor
= 1024 * 1024 * 1024 

117 
unit
= 'TB' 

118 
factor
= 1024 * 1024 * 1024 * 1024 

119 return '%.1f %s' % ( 
	`float
( 
size
) / 
factor
, 
unit
) 

121 
	}


121 def 
	$drop_all_privileges
( ) : 

123 if 'SUDO_GID' in 
os
. 
environ
: 

124 
gid
= 
	`int
( 
os
. 
environ
[ 'SUDO_GID' ] ) 

125 
os
. 
	`setregid
( 
gid
, 
gid
) 

126 if 'SUDO_UID' in 
os
. 
environ
: 

127 
uid
= 
	`int
( 
os
. 
environ
[ 'SUDO_UID' ] ) 

128 
os
. 
	`setreuid
( 
uid
, 
uid
) 

129 
os
. 
environ
[ 'HOME' ] = 
pwd
. 
	`getpwuid
( 
uid
) . 
pw_dir


131 
	}


131 def 
	$drop_privileges
( ) : 

132 if 'SUDO_GID' in 
os
. 
environ
: 

133 
gid
= 
	`int
( 
os
. 
environ
[ 'SUDO_GID' ] ) 

134 
os
. 
	`setegid
( 
gid
) 

135 if 'SUDO_UID' in 
os
. 
environ
: 

136 
uid
= 
	`int
( 
os
. 
environ
[ 'SUDO_UID' ] ) 

137 
os
. 
	`seteuid
( 
uid
) 

139 
	}


139 def 
	$regain_privileges
( ) : 

140 
os
. 
	`seteuid
( 0 ) 

141 
os
. 
	`setegid
( 0 ) 

143 
	}


143 def 
	$debconf_escape
( 
text
) : 

144 
escaped
= 
text
. 
	`replace
( '\\' , '\\\\' ) . 
	`replace
( '\n' , '\\n' ) 

145 return 
re
. 
	`sub
( r'(\s)' , r'\\\1' , 
escaped
) 

147 
	}


147 def 
	$create_bool
( 
text
) : 

148 if 
text
== 'true' : 

150 elif 
text
== 'false' : 

153 return 
text


155 
	}


155 

	@ubiquity/debconfcommunicator.py

20 from 
subprocess
import * 

21 import 
	~<fcntl


22 import 
	~<os


24 import 
	~<debconf


25 from 
ubiquity
import 
	~<misc


27 class 
	cDebconfCommunicator
( 
debconf
. 
Debconf
, object ) : 

28 def 
	$__init__
( 
self
, 
owner
, 
title
= None , 
cloexec
= False ) : 

29 def 
	$subprocess_setup
( ) : 

30 
misc
. 
	`regain_privileges
( ) 

31 
	}


31 
self
. 
dccomm
= 
	`Popen
( [ 'debconf-communicate' , '-fnoninteractive' , 
owner
] , 

32 
stdin
= 
PIPE
, 
stdout
= 
PIPE
, 
close_fds
= True , 
preexec_fn
= 
subprocess_setup
) 

33 
	`super
( 
DebconfCommunicator
, 
self
) . 
	`__init__
( 
title
= 
title
, 

34 
read
= 
self
. 
dccomm
. 
stdout
, 

35 
write
= 
self
. 
dccomm
. 
stdin
) 

36 if 
cloexec
: 

37 
fcntl
. 
	`fcntl
( 
self
. 
read
. 
	`fileno
( ) , 
fcntl
. 
F_SETFD
, 
fcntl
. 
FD_CLOEXEC
) 

38 
fcntl
. 
	`fcntl
( 
self
. 
write
. 
	`fileno
( ) , 
fcntl
. 
F_SETFD
, 
fcntl
. 
FD_CLOEXEC
) 

40 def 
	$shutdown
( 
self
) : 

41 if 
self
. 
dccomm
is not None : 

42 
self
. 
dccomm
. 
stdout
. 
	`close
( ) 

43 
self
. 
dccomm
. 
stdin
. 
	`close
( ) 

44 
self
. 
dccomm
. 
	`wait
( ) 

45 
self
. 
dccomm
= None 

47 
	}


47 def 
	$__del__
( 
self
) : 

48 
self
. 
	`shutdown
( ) 

48 
	}


	@ubiquity/components/console_setup_apply.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


22 class 
	cConsoleSetupApply
( 
FilteredCommand
) : 

23 def 
	$prepare
( 
self
) : 

24 return ( [ '/usr/share/ubiquity/console-setup-apply' ] , [ ] ) 

24 
	}


	@ubiquity/components/clock_setup.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


22 class 
	cClockSetup
( 
FilteredCommand
) : 

23 def 
	$prepare
( 
self
) : 

24 return ( [ '/usr/share/ubiquity/clock-setup' ] , [ ] ) 

24 
	}


	@ubiquity/components/partman.py

20 import 
	~<os


21 import 
	~<re


22 import 
	~<shutil


23 import 
	~<signal


25 import 
	~<debconf


27 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


28 from 
ubiquity
import 
	~<parted_server


29 from 
ubiquity
. 
misc
import * 

31 
PARTITION_TYPE_PRIMARY
= 0 

32 
PARTITION_TYPE_LOGICAL
= 1 

34 
PARTITION_PLACE_BEGINNING
= 0 

35 
PARTITION_PLACE_END
= 1 

37 class 
	cPartmanOptionError
( 
LookupError
) : 

40 class 
	cPartman
( 
FilteredCommand
) : 

41 def 
	$__init__
( 
self
, 
frontend
= None ) : 

42 
FilteredCommand
. 
	`__init__
( 
self
, 
frontend
) 

43 
self
. 
some_device_desc
= '' 

44 
self
. 
resize_desc
= '' 

45 
self
. 
manual_desc
= '' 

47 
	}


47 def 
	$prepare
( 
self
) : 

49 
	`regain_privileges
( ) 

50 if 
os
. 
path
. 
	`exists
( '/var/run/parted_server.pid' ) : 

52 
pidline
= 
	`open
( '/var/run/parted_server.pid' ) . 
	`readline
( ) . 
	`strip
( ) 

53 
pid
= 
	`int
( 
pidline
) 

54 
os
. 
	`kill
( 
pid
, 
signal
. 
SIGTERM
) 

55 except 
Exception
: 

58 
os
. 
	`unlink
( '/var/run/parted_server.pid' ) 

59 except 
OSError
: 

63 
shutil
. 
	`rmtree
( '/var/lib/partman' , 
ignore_errors
= True ) 

64 
	`drop_privileges
( ) 

66 
self
. 
autopartition_question
= None 

67 
self
. 
auto_state
= None 

68 
self
. 
extra_options
= { } 

69 
self
. 
extra_choice
= None 

71 
self
. 
update_partitions
= None 

72 
self
. 
building_cache
= True 

73 
self
. 
__state
= [ [ '' , None , None ] ] 

74 
self
. 
disk_cache
= { } 

75 
self
. 
partition_cache
= { } 

76 
self
. 
cache_order
= [ ] 

77 
self
. 
creating_label
= None 

78 
self
. 
creating_partition
= None 

79 
self
. 
editing_partition
= None 

80 
self
. 
deleting_partition
= None 

81 
self
. 
undoing
= False 

82 
self
. 
finish_partitioning
= False 

83 
self
. 
bad_auto_size
= False 

85 
questions
= [ '^partman-auto/.*automatically_partition$' , 

104 return ( '/bin/partman' , 
questions
, 

107 
	}


107 def 
	$snoop
( 
self
) : 

114 
snoop
= 
	`open
( '/var/lib/partman/snoop' ) 

115 
options
= [ ] 

116 for 
line
in 
snoop
: 

117 
line
= 
	`unicode
( 
line
. 
	`rstrip
( '\n' ) , 'utf-8' , 'replace' ) 

118 
fields
= 
line
. 
	`split
( '\t' , 1 ) 

119 if 
	`len
( 
fields
) == 2 : 

120 ( 
key
, 
option
) = 
fields


121 
options
. 
	`append
( ( 
key
, 
option
) ) 

123 
snoop
. 
	`close
( ) 

124 return 
options


125 except 
IOError
: 

128 
	}


128 def 
	$snoop_menu
( 
self
, 
options
) : 

132 
menu_options
= [ ] 

133 for ( 
key
, 
option
) in 
options
: 

134 
keybits
= 
key
. 
	`split
( '__________' , 1 ) 

135 if 
	`len
( 
keybits
) == 2 : 

136 ( 
script
, 
arg
) = 
keybits


137 
menu_options
. 
	`append
( ( 
script
, 
arg
, 
option
) ) 

138 return 
menu_options


140 
	}


140 def 
	$find_script
( 
self
, 
menu_options
, 
want_script
, 
want_arg
= None ) : 

141 
scripts
= [ ] 

142 for ( 
script
, 
arg
, 
option
) in 
menu_options
: 

143 if ( ( 
want_script
is None or 
script
[ 2 : ] == 
want_script
) and 

144 ( 
want_arg
is None or 
arg
== 
want_arg
) ) : 

145 
scripts
. 
	`append
( ( 
script
, 
arg
, 
option
) ) 

146 return 
scripts


148 
	}


148 def 
	$must_find_one_script
( 
self
, 
question
, 
menu_options
, 

149 
want_script
, 
want_arg
= None ) : 

150 for ( 
script
, 
arg
, 
option
) in 
menu_options
: 

151 if ( ( 
want_script
is None or 
script
[ 2 : ] == 
want_script
) and 

152 ( 
want_arg
is None or 
arg
== 
want_arg
) ) : 

153 return ( 
script
, 
arg
, 
option
) 

155 raise 
PartmanOptionError
, ( "%s should have %s (%s) option" % 

156 ( 
question
, 
want_script
, 
want_arg
) ) 

158 
	}


158 def 
	$preseed_script
( 
self
, 
question
, 
menu_options
, 

159 
want_script
, 
want_arg
= None ) : 

160 ( 
script
, 
arg
, 
option
) = 
self
. 
	`must_find_one_script
( 

161 
question
, 
menu_options
, 
want_script
, 
want_arg
) 

162 
self
. 
	`preseed
( 
question
, '%s__________%s' % ( 
script
, 
arg
) , 
seen
= False ) 

164 
	}


164 def 
	$split_devpart
( 
self
, 
devpart
) : 

165 
dev
, 
part_id
= 
devpart
. 
	`split
( '//' , 1 ) 

166 if 
dev
. 
	`startswith
( 
parted_server
. 
devices
+ '/' ) : 

167 
dev
= 
dev
[ 
	`len
( 
parted_server
. 
devices
) + 1 : ] 

168 return 
dev
, 
part_id


172 
	}


172 def 
	$subdirectories
( 
self
, 
directory
) : 

173 for 
name
in 
	`sorted
( 
os
. 
	`listdir
( 
directory
) ) : 

174 if 
os
. 
path
. 
	`isdir
( 
os
. 
path
. 
	`join
( 
directory
, 
name
) ) : 

175 yield 
name
[ 2 : ] 

177 
	}


177 def 
	$scripts
( 
self
, 
directory
) : 

178 for 
name
in 
	`sorted
( 
os
. 
	`listdir
( 
directory
) ) : 

179 if 
os
. 
	`access
( 
os
. 
path
. 
	`join
( 
directory
, 
name
) , 
os
. 
X_OK
) : 

180 yield 
name
[ 2 : ] 

182 
	}


182 def 
	$method_description
( 
self
, 
method
) : 

184 
question
= None 

185 if 
method
== 'swap' : 

186 
question
= 'partman/method_long/swap' 

187 elif 
method
== 'efi' : 

188 
question
= 'partman-efi/text/efi' 

189 elif 
method
== 'newworld' : 

190 
question
= 'partman/method_long/newworld' 

191 if 
question
is not None : 

192 return 
self
. 
	`description
( 
question
) 

193 except 
debconf
. 
DebconfError
: 

195 return 
method


197 
	}


197 def 
	$filesystem_description
( 
self
, 
filesystem
) : 

199 return 
self
. 
	`description
( 'partman/filesystem_long/%s' % 
filesystem
) 

200 except 
debconf
. 
DebconfError
: 

201 return 
filesystem


203 
	}


203 def 
	$create_use_as
( 
self
) : 

210 for 
method
in 
self
. 
	`subdirectories
( '/lib/partman/choose_method' ) : 

211 if 
method
== 'filesystem' : 

212 for 
fs
in 
self
. 
	`scripts
( '/lib/partman/valid_filesystems' ) : 

213 if 
fs
== 'ntfs' : 

215 elif 
fs
== 'fat' : 

216 yield ( 
method
, 'fat16' , 

217 
self
. 
	`filesystem_description
( 'fat16' ) ) 

218 yield ( 
method
, 'fat32' , 

219 
self
. 
	`filesystem_description
( 'fat32' ) ) 

221 yield ( 
method
, 
fs
, 
self
. 
	`filesystem_description
( 
fs
) ) 

222 elif 
method
== 'dont_use' : 

223 
question
= 'partman-basicmethods/text/dont_use' 

224 yield ( 
method
, 'dontuse' , 
self
. 
	`description
( 
question
) ) 

225 elif 
method
== 'efi' : 

226 if 
os
. 
path
. 
	`exists
( '/var/lib/partman/efi' ) : 

227 yield ( 
method
, 
method
, 
self
. 
	`method_description
( 
method
) ) 

229 yield ( 
method
, 
method
, 
self
. 
	`method_description
( 
method
) ) 

231 
	}


231 def 
	$default_mountpoint_choices
( 
self
, 
fs
= 'ext3' ) : 

239 if 
fs
in ( 'fat16' , 'fat32' , 'ntfs' ) : 

240 
question
= 'partman-basicfilesystems/fat_mountpoint' 

242 
question
= 'partman-basicfilesystems/mountpoint' 

243 
choices_c
= 
self
. 
	`choices_untranslated
( 
question
) 

244 
choices
= 
self
. 
	`choices
( 
question
) 

245 assert 
	`len
( 
choices_c
) == 
	`len
( 
choices
) 

246 for 
i
in 
	`range
( 
	`len
( 
choices_c
) ) : 

247 if 
choices_c
[ 
i
] . 
	`startswith
( '/' ) : 

248 yield ( 
choices_c
[ 
i
] . 
	`split
( ' ' ) [ 0 ] , 
choices_c
[ 
i
] , 
choices
[ 
i
] ) 

250 
	}


250 def 
	$get_current_method
( 
self
, 
partition
) : 

251 if 'method' in 
partition
: 

252 if 
partition
[ 'method' ] in ( 'format' , 'keep' ) : 

253 if 'filesystem' in 
partition
: 

254 return 
partition
[ 'filesystem' ] 

258 return 
partition
[ 'method' ] 

262 
	}


262 def 
	$get_current_mountpoint
( 
self
, 
partition
) : 

263 if ( 'method' in 
partition
and 'acting_filesystem' in 
partition
and 

264 'mountpoint' in 
partition
) : 

265 return 
partition
[ 'mountpoint' ] 

269 
	}


269 def 
	$get_actions
( 
self
, 
devpart
, 
partition
) : 

270 if 
devpart
is None and 
partition
is None : 

272 if 'id' not in 
partition
: 

274 if 'can_new' in 
partition
and 
partition
[ 'can_new' ] : 

276 if 'id' in 
partition
and 
partition
[ 'parted' ] [ 'fs' ] != 'free' : 

281 
	}


281 def 
	$set
( 
self
, 
question
, 
value
) : 

282 if 
question
== 'ubiquity/partman-rebuild-cache' : 

283 if not 
self
. 
building_cache
: 

284 
self
. 
	`debug
( 'Partman: Partition %s updated' , 
value
) 

285 if 
self
. 
update_partitions
is None : 

286 
self
. 
update_partitions
= [ ] 

287 if 
value
not in 
self
. 
update_partitions
: 

288 
self
. 
update_partitions
. 
	`append
( 
value
) 

289 
self
. 
	`debug
( 'Partman: update_partitions = %s' , 

290 
self
. 
update_partitions
) 

292 
	}


292 def 
	$subst
( 
self
, 
question
, 
key
, 
value
) : 

293 if 
question
== 'partman-partitioning/new_size' : 

294 if 
self
. 
building_cache
and 
self
. 
autopartition_question
is None : 

295 
state
= 
self
. 
__state
[ - 1 ] 

296 assert 
state
[ 0 ] == 'partman/active_partition' 

297 
partition
= 
self
. 
partition_cache
[ 
state
[ 1 ] ] 

298 if 
key
== 'RAWMINSIZE' : 

299 
partition
[ 'resize_min_size' ] = 
	`int
( 
value
) 

300 elif 
key
== 'RAWMAXSIZE' : 

301 
partition
[ 'resize_max_size' ] = 
	`int
( 
value
) 

302 if 
key
== 'RAWMINSIZE' : 

303 
self
. 
resize_min_size
= 
	`int
( 
value
) 

304 elif 
key
== 'RAWMAXSIZE' : 

305 
self
. 
resize_max_size
= 
	`int
( 
value
) 

306 elif 
key
== 'ORISIZE' : 

307 
self
. 
resize_orig_size
= 
	`int
( 
value
) 

308 elif 
key
== 'PATH' : 

309 
self
. 
resize_path
= 
value


311 
	}


311 def 
	$error
( 
self
, 
priority
, 
question
) : 

312 if 
question
== 'partman-partitioning/impossible_resize' : 

315 elif 
question
== 'partman-partitioning/bad_new_partition_size' : 

316 if 
self
. 
creating_partition
: 

318 
self
. 
creating_partition
[ 'bad_size' ] = True 

319 elif 
question
in ( 'partman-partitioning/bad_new_size' , 

323 if 
self
. 
editing_partition
: 

325 
self
. 
editing_partition
[ 'bad_size' ] = True 

330 
self
. 
bad_auto_size
= True 

331 elif 
question
== 'partman-basicfilesystems/bad_mountpoint' : 

333 if 
self
. 
creating_partition
: 

334 
self
. 
creating_partition
[ 'bad_mountpoint' ] = True 

335 elif 
self
. 
editing_partition
: 

336 
self
. 
editing_partition
[ 'bad_mountpoint' ] = True 

337 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

338 
self
. 
	`extended_description
( 
question
) ) 

339 return 
FilteredCommand
. 
	`error
( 
self
, 
priority
, 
question
) 

341 
	}


341 def 
	$run
( 
self
, 
priority
, 
question
) : 

342 if 
self
. 
done
: 

344 return 
self
. 
succeeded


346 
self
. 
current_question
= 
question


347 
options
= 
self
. 
	`snoop
( ) 

348 
menu_options
= 
self
. 
	`snoop_menu
( 
options
) 

349 
self
. 
	`debug
( 'Partman: state = %s' , 
self
. 
__state
) 

350 
self
. 
	`debug
( 'Partman: auto_state = %s' , 
self
. 
auto_state
) 

352 if 
question
. 
	`endswith
( 'automatically_partition' ) : 

353 
self
. 
autopartition_question
= 
question


354 
choices
= 
self
. 
	`choices
( 
question
) 

356 if 
self
. 
auto_state
is None : 

357 
self
. 
some_device_desc
= 

358 
self
. 
	`description
( 'partman-auto/text/use_device' ) 

359 
self
. 
resize_desc
= 

360 
self
. 
	`description
( 'partman-auto/text/resize_use_free' ) 

361 
self
. 
manual_desc
= 

362 
self
. 
	`description
( 'partman-auto/text/custom_partitioning' ) 

363 
self
. 
biggest_free_desc
= 

364 
self
. 
	`description
( 'partman-auto/text/use_biggest_free' ) 

365 
self
. 
extra_options
= { } 

366 if 
choices
: 

367 
self
. 
auto_state
= [ 0 , None ] 

369 
self
. 
auto_state
[ 0 ] += 1 

370 while 
self
. 
auto_state
[ 0 ] < 
	`len
( 
choices
) : 

371 
self
. 
auto_state
[ 1 ] = 
choices
[ 
self
. 
auto_state
[ 0 ] ] 

372 if ( 
self
. 
auto_state
[ 1 ] == 
self
. 
some_device_desc
or 

373 
self
. 
auto_state
[ 1 ] == 
self
. 
resize_desc
) : 

376 
self
. 
auto_state
[ 0 ] += 1 

377 if 
self
. 
auto_state
[ 0 ] < 
	`len
( 
choices
) : 

378 
self
. 
	`preseed_as_c
( 
question
, 
self
. 
auto_state
[ 1 ] , 
seen
= False ) 

379 
self
. 
succeeded
= True 

382 
self
. 
auto_state
= None 

384 if 
self
. 
resize_desc
not in 
self
. 
extra_options
: 

386 del 
choices
[ 
choices
. 
	`index
( 
self
. 
resize_desc
) ] 

387 except 
ValueError
: 

389 
	`regain_privileges
( ) 

392 
parted
= 
parted_server
. 
	`PartedServer
( ) 

393 
layout
= { } 

394 for 
disk
in 
parted
. 
	`disks
( ) : 

395 
parted
. 
	`select_disk
( 
disk
) 

396 
ret
= [ ] 

397 
total
= 0 

398 for 
partition
in 
parted
. 
	`partitions
( ) : 

399 
size
= 
	`int
( 
partition
[ 2 ] ) 

400 if 
partition
[ 4 ] == 'free' : 

401 
dev
= 'free' 

403 
dev
= 
partition
[ 5 ] 

404 
ret
. 
	`append
( ( 
dev
, 
size
, 
partition
[ 1 ] ) ) 

405 
layout
[ 
disk
] = 
ret


407 
self
. 
frontend
. 
	`set_disk_layout
( 
layout
) 

408 
	`drop_privileges
( ) 

412 
self
. 
translation_mappings
= { } 

413 def 
	$map_trans
( 
di_string
, 
ubiquity_string
) : 

414 
ubiquity_string
= 
self
. 
	`description
( 
ubiquity_string
) 

415 
self
. 
translation_mappings
[ 
ubiquity_string
] = 
di_string


417 
choices
[ 
choices
. 
	`index
( 
di_string
) ] = 
ubiquity_string


418 except 
ValueError
: 

420 if 
di_string
in 
self
. 
extra_options
: 

421 
t
= 
self
. 
extra_options
[ 
di_string
] 

422 del 
self
. 
extra_options
[ 
di_string
] 

423 
self
. 
extra_options
[ 
ubiquity_string
] = 
t


424 return 
ubiquity_string


426 
	}


426 
self
. 
some_device_desc
= 
	`map_trans
( 
self
. 
some_device_desc
, 'ubiquity/text/use_device' ) 

427 
self
. 
biggest_free_desc
= 
	`map_trans
( 
self
. 
biggest_free_desc
, 'ubiquity/text/biggest_free' ) 

428 
self
. 
resize_desc
= 
	`map_trans
( 
self
. 
resize_desc
, 'ubiquity/text/resize_use_free' ) 

429 
self
. 
manual_desc
= 
	`map_trans
( 
self
. 
manual_desc
, 'ubiquity/text/custom_partitioning' ) 

431 
biggest_free
= 
self
. 
	`find_script
( 
menu_options
, 'biggest_free' ) 

432 if 
biggest_free
: 

433 
biggest_free
= 
biggest_free
[ 0 ] [ 1 ] 

434 
biggest_free
= 
self
. 
	`split_devpart
( 
biggest_free
) [ 1 ] 

435 
self
. 
extra_options
[ 
self
. 
biggest_free_desc
] = 
biggest_free


437 
self
. 
frontend
. 
	`set_autopartition_choices
( 

438 
choices
, 
self
. 
extra_options
, 
self
. 
resize_desc
, 

439 
self
. 
manual_desc
, 
self
. 
biggest_free_desc
) 

441 elif 
question
== 'partman-auto/select_disk' : 

442 if 
self
. 
auto_state
is not None : 

443 
self
. 
extra_options
[ 
self
. 
auto_state
[ 1 ] ] = 
self
. 
	`choices
( 
question
) 

445 
self
. 
succeeded
= False 

448 assert 
self
. 
extra_choice
is not None 

449 
self
. 
	`preseed_as_c
( 
question
, 
self
. 
extra_choice
, 
seen
= False ) 

450 
self
. 
succeeded
= True 

453 elif 
question
== 'partman/choose_partition' : 

454 
self
. 
autopartition_question
= None # not autopartitioning any more 

456 if not 
self
. 
building_cache
and 
self
. 
update_partitions
: 

458 
self
. 
__state
= [ [ '' , None , None ] ] 

459 
self
. 
building_cache
= True 

460 if 'ALL' in 
self
. 
update_partitions
: 

461 
self
. 
update_partitions
= None 

463 if 
self
. 
building_cache
: 

464 
state
= 
self
. 
__state
[ - 1 ] 

465 if 
state
[ 0 ] == 
question
: 

467 
self
. 
frontend
. 
	`debconf_progress_step
( 1 ) 

468 
self
. 
frontend
. 
	`refresh
( ) 

469 
self
. 
	`debug
( 'Partman: update_partitions = %s' , 

470 
self
. 
update_partitions
) 

471 
state
[ 1 ] = None 

472 while 
self
. 
update_partitions
: 

473 
state
[ 1 ] = 
self
. 
update_partitions
[ 0 ] 

474 del 
self
. 
update_partitions
[ 0 ] 

475 if 
state
[ 1 ] not in 
self
. 
partition_cache
: 

476 
self
. 
	`debug
( 'Partman: %s not found in cache' , 

477 
partition
) 

478 
state
[ 1 ] = None 

479 
self
. 
frontend
. 
	`debconf_progress_step
( 1 ) 

480 
self
. 
frontend
. 
	`refresh
( ) 

484 if 
state
[ 1 ] is not None : 

486 
partition
= 
self
. 
partition_cache
[ 
state
[ 1 ] ] 

487 
self
. 
	`debug
( 'Partman: Building cache (%s)' , 

488 
partition
[ 'parted' ] [ 'path' ] ) 

489 
self
. 
	`preseed
( 
question
, 
partition
[ 'display' ] , 

490 
seen
= False ) 

494 
self
. 
	`debug
( 'Partman: Finished building cache' ) 

495 
self
. 
__state
. 
	`pop
( ) 

496 
self
. 
update_partitions
= None 

497 
self
. 
building_cache
= False 

498 
self
. 
frontend
. 
	`debconf_progress_stop
( ) 

499 
self
. 
frontend
. 
	`refresh
( ) 

500 
self
. 
frontend
. 
	`update_partman
( 

501 
self
. 
disk_cache
, 
self
. 
partition_cache
, 

502 
self
. 
cache_order
) 

504 
self
. 
	`debug
( 'Partman: Building cache' ) 

505 
	`regain_privileges
( ) 

506 
parted
= 
parted_server
. 
	`PartedServer
( ) 

507 
matches
= 
self
. 
	`find_script
( 
menu_options
, 'partition_tree' ) 

513 
rebuild_all
= 
self
. 
update_partitions
is None 

515 if 
rebuild_all
: 

516 
self
. 
disk_cache
= { } 

517 
self
. 
partition_cache
= { } 

518 
self
. 
cache_order
= [ ] 

522 if 
self
. 
update_partitions
is not None : 

523 for 
devpart
in 
self
. 
update_partitions
: 

524 if 
devpart
in 
self
. 
partition_cache
: 

525 del 
self
. 
partition_cache
[ 
devpart
] 

528 for 
script
, 
arg
, 
option
in 
matches
: 

529 
dev
, 
part_id
= 
self
. 
	`split_devpart
( 
arg
) 

530 if not 
dev
: 

532 
parted
. 
	`select_disk
( 
dev
) 

533 
self
. 
cache_order
. 
	`append
( 
arg
) 

534 if 
part_id
: 

535 if 
rebuild_all
or 
arg
not in 
self
. 
partition_cache
: 

536 
self
. 
partition_cache
[ 
arg
] = { 

537 'dev' : 
dev
, 

538 'id' : 
part_id
, 

539 'parent' : 
dev
. 
	`replace
( '=' , '/' ) 

542 if 
rebuild_all
or 
arg
not in 
self
. 
disk_cache
: 

543 
device
= 
parted
. 
	`readline_device_entry
( 'device' ) 

544 
self
. 
disk_cache
[ 
arg
] = { 

545 'dev' : 
dev
, 

546 'device' : 
device


549 if 
self
. 
update_partitions
is None : 

550 
self
. 
update_partitions
= 
self
. 
partition_cache
. 
	`keys
( ) 

552 
self
. 
update_partitions
= [ 
devpart


553 for 
devpart
in 
self
. 
update_partitions


554 if 
devpart
in 
self
. 
partition_cache
] 

557 for 
script
, 
arg
, 
option
in 
matches
: 

558 
dev
, 
part_id
= 
self
. 
	`split_devpart
( 
arg
) 

559 if not 
dev
: 

561 
parted
. 
	`select_disk
( 
dev
) 

562 if 
part_id
: 

563 
self
. 
partition_cache
[ 
arg
] [ 'display' ] = '%s__________%s' % ( 
script
, 
arg
) 

565 
self
. 
disk_cache
[ 
arg
] [ 'display' ] = '%s__________%s' % ( 
script
, 
arg
) 

569 for 
devpart
in 
self
. 
update_partitions
: 

570 
dev
, 
part_id
= 
self
. 
	`split_devpart
( 
devpart
) 

571 if not 
dev
: 

573 
parted
. 
	`select_disk
( 
dev
) 

574 
info
= 
parted
. 
	`partition_info
( 
part_id
) 

575 
self
. 
partition_cache
[ 
devpart
] [ 'parted' ] = { 

576 'num' : 
info
[ 0 ] , 

577 'id' : 
info
[ 1 ] , 

578 'size' : 
info
[ 2 ] , 

579 'type' : 
info
[ 3 ] , 

580 'fs' : 
info
[ 4 ] , 

581 'path' : 
info
[ 5 ] , 

582 'name' : 
info
[ 6 ] 

585 
	`drop_privileges
( ) 

586 
self
. 
frontend
. 
	`debconf_progress_start
( 

587 0 , 
	`len
( 
self
. 
update_partitions
) , 

588 
self
. 
	`description
( 'partman/progress/init/parted' ) ) 

589 
self
. 
frontend
. 
	`refresh
( ) 

590 
self
. 
	`debug
( 'Partman: update_partitions = %s' , 

591 
self
. 
update_partitions
) 

596 
devpart
= None 

597 if 
self
. 
partition_cache
: 

598 while 
self
. 
update_partitions
: 

599 
devpart
= 
self
. 
update_partitions
[ 0 ] 

600 del 
self
. 
update_partitions
[ 0 ] 

601 if 
devpart
not in 
self
. 
partition_cache
: 

602 
self
. 
	`debug
( 'Partman: %s not found in cache' , 

603 
partition
) 

604 
devpart
= None 

605 
self
. 
frontend
. 
	`debconf_progress_step
( 1 ) 

606 
self
. 
frontend
. 
	`refresh
( ) 

609 if 
devpart
is not None : 

610 
partition
= 
self
. 
partition_cache
[ 
devpart
] 

611 
self
. 
	`debug
( 'Partman: Building cache (%s)' , 

612 
partition
[ 'parted' ] [ 'path' ] ) 

613 
self
. 
__state
. 
	`append
( [ 
question
, 
devpart
, None ] ) 

614 
self
. 
	`preseed
( 
question
, 
partition
[ 'display' ] , 

615 
seen
= False ) 

618 
self
. 
	`debug
( 'Partman: Finished building cache ' 

620 
self
. 
update_partitions
= None 

621 
self
. 
building_cache
= False 

622 
self
. 
frontend
. 
	`debconf_progress_stop
( ) 

623 
self
. 
frontend
. 
	`refresh
( ) 

624 
self
. 
frontend
. 
	`update_partman
( 

625 
self
. 
disk_cache
, 
self
. 
partition_cache
, 

626 
self
. 
cache_order
) 

627 elif 
self
. 
creating_partition
: 

628 
devpart
= 
self
. 
creating_partition
[ 'devpart' ] 

629 if 
devpart
in 
self
. 
partition_cache
: 

630 
self
. 
frontend
. 
	`update_partman
( 

631 
self
. 
disk_cache
, 
self
. 
partition_cache
, 

632 
self
. 
cache_order
) 

633 elif 
self
. 
editing_partition
: 

634 
devpart
= 
self
. 
editing_partition
[ 'devpart' ] 

635 if 
devpart
in 
self
. 
partition_cache
: 

636 
self
. 
frontend
. 
	`update_partman
( 

637 
self
. 
disk_cache
, 
self
. 
partition_cache
, 

638 
self
. 
cache_order
) 

639 elif 
self
. 
deleting_partition
: 

640 raise 
AssertionError
, "Deleting partition didn't rebuild cache?" 

642 if 
self
. 
	`debug_enabled
( ) : 

643 import 
	~<pprint


644 
self
. 
	`debug
( 'disk_cache:' ) 

645 
printer
= 
pprint
. 
	`PrettyPrinter
( ) 

646 for 
line
in 
printer
. 
	`pformat
( 
self
. 
disk_cache
) . 
	`split
( '\n' ) : 

647 
self
. 
	`debug
( '%s' , 
line
) 

648 
self
. 
	`debug
( 'disk_cache end' ) 

649 
self
. 
	`debug
( 'partition_cache:' ) 

650 
printer
= 
pprint
. 
	`PrettyPrinter
( ) 

651 for 
line
in 
printer
. 
	`pformat
( 
self
. 
partition_cache
) . 
	`split
( '\n' ) : 

652 
self
. 
	`debug
( '%s' , 
line
) 

653 
self
. 
	`debug
( 'partition_cache end' ) 

655 
self
. 
__state
= [ [ '' , None , None ] ] 

656 
self
. 
creating_label
= None 

657 
self
. 
creating_partition
= None 

658 
self
. 
editing_partition
= None 

659 
self
. 
deleting_partition
= None 

660 
self
. 
undoing
= False 

661 
self
. 
finish_partitioning
= False 

663 
FilteredCommand
. 
	`run
( 
self
, 
priority
, 
question
) 

665 if 
self
. 
finish_partitioning
or 
self
. 
done
: 

666 if 
self
. 
succeeded
: 

667 
self
. 
	`preseed_script
( 
question
, 
menu_options
, 'finish' ) 

668 return 
self
. 
succeeded


670 elif 
self
. 
creating_label
: 

671 
devpart
= 
self
. 
creating_label
[ 'devpart' ] 

672 if 
devpart
in 
self
. 
disk_cache
: 

673 
disk
= 
self
. 
disk_cache
[ 
devpart
] 

675 
self
. 
	`preseed
( 
question
, 
disk
[ 'display' ] , 
seen
= False ) 

678 elif 
self
. 
creating_partition
: 

679 
devpart
= 
self
. 
creating_partition
[ 'devpart' ] 

680 if 
devpart
in 
self
. 
partition_cache
: 

681 
partition
= 
self
. 
partition_cache
[ 
devpart
] 

682 
self
. 
__state
. 
	`append
( [ 
question
, 
devpart
, None ] ) 

683 
self
. 
	`preseed
( 
question
, 
partition
[ 'display' ] , 
seen
= False ) 

686 elif 
self
. 
editing_partition
: 

687 
devpart
= 
self
. 
editing_partition
[ 'devpart' ] 

688 if 
devpart
in 
self
. 
partition_cache
: 

689 
partition
= 
self
. 
partition_cache
[ 
devpart
] 

690 
self
. 
__state
. 
	`append
( [ 
question
, 
devpart
, None ] ) 

691 
self
. 
	`preseed
( 
question
, 
partition
[ 'display' ] , 
seen
= False ) 

694 elif 
self
. 
deleting_partition
: 

695 
devpart
= 
self
. 
deleting_partition
[ 'devpart' ] 

696 if 
devpart
in 
self
. 
partition_cache
: 

697 
partition
= 
self
. 
partition_cache
[ 
devpart
] 

699 
self
. 
	`preseed
( 
question
, 
partition
[ 'display' ] , 
seen
= False ) 

702 elif 
self
. 
undoing
: 

703 
self
. 
	`preseed_script
( 
question
, 
menu_options
, 'undo' ) 

707 raise 
AssertionError
, ( "Returned to %s with nothing to do" % 

708 
question
) 

710 elif 
question
== 'partman-partitioning/confirm_new_label' : 

711 if 
self
. 
creating_label
: 

712 
response
= 
self
. 
frontend
. 
	`question_dialog
( 

713 
self
. 
	`description
( 
question
) , 

714 
self
. 
	`extended_description
( 
question
) , 

716 if 
response
is None or 
response
== 'ubiquity/text/continue' : 

717 
self
. 
	`preseed
( 
question
, 'true' , 
seen
= False ) 

719 
self
. 
	`preseed
( 
question
, 'false' , 
seen
= False ) 

722 raise 
AssertionError
, "Arrived at %s unexpectedly" % 
question


724 elif 
question
== 'partman/free_space' : 

725 if 
self
. 
building_cache
: 

726 
state
= 
self
. 
__state
[ - 1 ] 

727 assert 
state
[ 0 ] == 'partman/choose_partition' 

728 
partition
= 
self
. 
partition_cache
[ 
state
[ 1 ] ] 

729 
can_new
= False 

730 if 
self
. 
	`find_script
( 
menu_options
, 'new' ) : 

731 
can_new
= True 

732 
partition
[ 'can_new' ] = 
can_new


735 elif 
self
. 
creating_partition
: 

736 
self
. 
	`preseed_script
( 
question
, 
menu_options
, 'new' ) 

739 raise 
AssertionError
, "Arrived at %s unexpectedly" % 
question


741 elif 
question
== 'partman-partitioning/new_partition_size' : 

742 if 
self
. 
creating_partition
: 

743 if 'bad_size' in 
self
. 
creating_partition
: 

745 
size
= 
self
. 
creating_partition
[ 'size' ] 

746 if 
re
. 
	`search
( r'^[0-9.]+$' , 
size
) : 

748 
size
+= 'M' 

749 
self
. 
	`preseed
( 
question
, 
size
, 
seen
= False ) 

752 raise 
AssertionError
, "Arrived at %s unexpectedly" % 
question


754 elif 
question
== 'partman-partitioning/new_partition_type' : 

755 if 
self
. 
creating_partition
: 

756 if 
self
. 
creating_partition
[ 'type' ] == 
PARTITION_TYPE_PRIMARY
: 

757 
self
. 
	`preseed
( 
question
, 'Primary' , 
seen
= False ) 

759 
self
. 
	`preseed
( 
question
, 'Logical' , 
seen
= False ) 

762 raise 
AssertionError
, "Arrived at %s unexpectedly" % 
question


764 elif 
question
== 'partman-partitioning/new_partition_place' : 

765 if 
self
. 
creating_partition
: 

766 if ( 
self
. 
creating_partition
[ 'place' ] == 

767 
PARTITION_PLACE_BEGINNING
) : 

768 
self
. 
	`preseed
( 
question
, 'Beginning' , 
seen
= False ) 

770 
self
. 
	`preseed
( 
question
, 'End' , 
seen
= False ) 

773 raise 
AssertionError
, "Arrived at %s unexpectedly" % 
question


775 elif 
question
== 'partman/active_partition' : 

776 if 
self
. 
building_cache
: 

777 
state
= 
self
. 
__state
[ - 1 ] 

778 
partition
= 
self
. 
partition_cache
[ 
state
[ 1 ] ] 

780 if 
state
[ 0 ] == 
question
: 

781 
state
[ 2 ] += 1 

782 if 
state
[ 2 ] < 
	`len
( 
partition
[ 'active_partition_build' ] ) : 

784 
visit
= 
partition
[ 'active_partition_build' ] 

785 
self
. 
	`preseed_as_c
( 
question
, 
visit
[ 
state
[ 2 ] ] [ 2 ] , 
seen
= False ) 

791 del 
partition
[ 'active_partition_build' ] 

792 except 
KeyError
: 

794 
self
. 
__state
. 
	`pop
( ) 

797 assert 
state
[ 0 ] == 'partman/choose_partition' 

798 
	`regain_privileges
( ) 

799 
parted
= 
parted_server
. 
	`PartedServer
( ) 

801 
parted
. 
	`select_disk
( 
partition
[ 'dev' ] ) 

802 for 
entry
in ( 'method' , 

807 if 
parted
. 
	`has_part_entry
( 
partition
[ 'id' ] , 
entry
) : 

808 
partition
[ 
entry
] = 

809 
parted
. 
	`readline_part_entry
( 
partition
[ 'id' ] , 
entry
) 

811 
	`drop_privileges
( ) 

812 
visit
= [ ] 

813 for ( 
script
, 
arg
, 
option
) in 
menu_options
: 

814 if 
arg
in ( 'method' , 'mountpoint' ) : 

815 
visit
. 
	`append
( ( 
script
, 
arg
, 
option
) ) 

816 elif 
arg
== 'format' : 

817 
partition
[ 'can_activate_format' ] = True 

818 elif 
arg
== 'resize' : 

819 
visit
. 
	`append
( ( 
script
, 
arg
, 
option
) ) 

820 
partition
[ 'can_resize' ] = True 

821 if 
visit
: 

822 
partition
[ 'active_partition_build' ] = 
visit


823 
self
. 
__state
. 
	`append
( [ 
question
, 
state
[ 1 ] , 0 ] ) 

824 
self
. 
	`preseed_as_c
( 
question
, 
visit
[ 0 ] [ 2 ] , 
seen
= False ) 

830 elif 
self
. 
creating_partition
or 
self
. 
editing_partition
: 

831 if 
self
. 
creating_partition
: 

832 
request
= 
self
. 
creating_partition


834 
request
= 
self
. 
editing_partition


836 
state
= 
self
. 
__state
[ - 1 ] 

837 
partition
= 
self
. 
partition_cache
[ 
state
[ 1 ] ] 

839 if 
state
[ 0 ] != 
question
: 

841 
visit
= [ ] 

842 for 
item
in ( 'method' , 'mountpoint' , 'format' ) : 

843 if 
item
in 
request
and 
request
[ 
item
] is not None : 

844 
visit
. 
	`append
( 
item
) 

845 if ( 
self
. 
editing_partition
and 

846 'size' in 
request
and 
request
[ 'size' ] is not None ) : 

847 
visit
. 
	`append
( 'resize' ) 

848 
partition
[ 'active_partition_edit' ] = 
visit


849 
self
. 
__state
. 
	`append
( [ 
question
, 
state
[ 1 ] , - 1 ] ) 

850 
state
= 
self
. 
__state
[ - 1 ] 

852 
state
[ 2 ] += 1 

853 while 
state
[ 2 ] < 
	`len
( 
partition
[ 'active_partition_edit' ] ) : 

855 
visit
= 
partition
[ 'active_partition_edit' ] 

856 
item
= 
visit
[ 
state
[ 2 ] ] 

857 
scripts
= 
self
. 
	`find_script
( 
menu_options
, None , 
item
) 

858 if 
scripts
: 

859 
self
. 
	`preseed_as_c
( 
question
, 
scripts
[ 0 ] [ 2 ] , 
seen
= False ) 

861 
state
[ 2 ] += 1 

866 del 
partition
[ 'active_partition_edit' ] 

867 except 
KeyError
: 

869 
self
. 
__state
. 
	`pop
( ) 

870 
self
. 
	`preseed_script
( 
question
, 
menu_options
, 'finish' ) 

873 elif 
self
. 
deleting_partition
: 

874 
self
. 
	`preseed_script
( 
question
, 
menu_options
, 'delete' ) 

875 
self
. 
deleting_partition
= None 

879 raise 
AssertionError
, "Arrived at %s unexpectedly" % 
question


881 elif 
question
== 'partman-partitioning/confirm_resize' : 

882 if 
self
. 
autopartition_question
is not None : 

883 if 
self
. 
auto_state
is not None : 

886 
self
. 
	`preseed
( 
question
, 'true' , 
seen
= False ) 

889 
response
= 
self
. 
frontend
. 
	`question_dialog
( 

890 
self
. 
	`description
( 
question
) , 

891 
self
. 
	`extended_description
( 
question
) , 

893 if ( 
response
is None or 

894 
response
== 'ubiquity/text/continue' ) : 

895 
self
. 
	`preseed
( 
question
, 'true' , 
seen
= False ) 

897 
self
. 
	`preseed
( 
question
, 'false' , 
seen
= False ) 

899 elif 
self
. 
building_cache
: 

900 
state
= 
self
. 
__state
[ - 1 ] 

901 assert 
state
[ 0 ] == 'partman/active_partition' 

904 
self
. 
	`preseed
( 
question
, 'true' , 
seen
= False ) 

906 elif 
self
. 
editing_partition
: 

907 
response
= 
self
. 
frontend
. 
	`question_dialog
( 

908 
self
. 
	`description
( 
question
) , 

909 
self
. 
	`extended_description
( 
question
) , 

911 if 
response
is None or 
response
== 'ubiquity/text/continue' : 

912 
self
. 
	`preseed
( 
question
, 'true' , 
seen
= False ) 

914 
self
. 
	`preseed
( 
question
, 'false' , 
seen
= False ) 

917 raise 
AssertionError
, "Arrived at %s unexpectedly" % 
question


919 elif 
question
== 'partman-partitioning/new_size' : 

920 if 
self
. 
autopartition_question
is not None : 

921 if 
self
. 
auto_state
is not None : 

922 
self
. 
extra_options
[ 
self
. 
auto_state
[ 1 ] ] = 

923 ( 
self
. 
resize_min_size
, 
self
. 
resize_max_size
, 

924 
self
. 
resize_orig_size
, 
self
. 
resize_path
) 

926 
self
. 
succeeded
= False 

929 assert 
self
. 
extra_choice
is not None 

930 if 
self
. 
bad_auto_size
: 

931 
self
. 
bad_auto_size
= False 

933 
self
. 
	`preseed
( 
question
, 
self
. 
extra_choice
, 
seen
= False ) 

934 
self
. 
succeeded
= True 

936 elif 
self
. 
building_cache
: 

940 elif 
self
. 
editing_partition
: 

941 if 'bad_size' in 
self
. 
editing_partition
: 

943 
size
= 
self
. 
editing_partition
[ 'size' ] 

944 if 
re
. 
	`search
( r'^[0-9.]+$' , 
size
) : 

946 
size
+= 'M' 

947 
self
. 
	`preseed
( 
question
, 
size
, 
seen
= False ) 

950 raise 
AssertionError
, "Arrived at %s unexpectedly" % 
question


952 elif 
question
== 'partman-target/choose_method' : 

953 if 
self
. 
building_cache
: 

954 
state
= 
self
. 
__state
[ - 1 ] 

955 assert 
state
[ 0 ] == 'partman/active_partition' 

956 
partition
= 
self
. 
partition_cache
[ 
state
[ 1 ] ] 

957 
partition
[ 'method_choices' ] = [ ] 

958 for ( 
script
, 
arg
, 
option
) in 
menu_options
: 

959 
partition
[ 'method_choices' ] . 
	`append
( ( 
script
, 
arg
, 
option
) ) 

962 elif 
self
. 
creating_partition
or 
self
. 
editing_partition
: 

963 if 
self
. 
creating_partition
: 

964 
request
= 
self
. 
creating_partition


966 
request
= 
self
. 
editing_partition


968 
self
. 
	`preseed_script
( 
question
, 
menu_options
, 

969 None , 
request
[ 'method' ] ) 

972 raise 
AssertionError
, "Arrived at %s unexpectedly" % 
question


974 elif 
question
in ( 'partman-basicfilesystems/mountpoint' , 

976 if 
self
. 
building_cache
: 

977 
state
= 
self
. 
__state
[ - 1 ] 

978 assert 
state
[ 0 ] == 'partman/active_partition' 

979 
partition
= 
self
. 
partition_cache
[ 
state
[ 1 ] ] 

980 
partition
[ 'mountpoint_choices' ] = [ ] 

981 
choices_c
= 
self
. 
	`choices_untranslated
( 
question
) 

982 
choices
= 
self
. 
	`choices
( 
question
) 

983 assert 
	`len
( 
choices_c
) == 
	`len
( 
choices
) 

984 for 
i
in 
	`range
( 
	`len
( 
choices_c
) ) : 

985 if 
choices_c
[ 
i
] . 
	`startswith
( '/' ) : 

986 
partition
[ 'mountpoint_choices' ] . 
	`append
( ( 

987 
choices_c
[ 
i
] . 
	`split
( ' ' ) [ 0 ] , 

988 
choices_c
[ 
i
] , 
choices
[ 
i
] ) ) 

991 elif 
self
. 
creating_partition
or 
self
. 
editing_partition
: 

992 if 
self
. 
creating_partition
: 

993 
request
= 
self
. 
creating_partition


995 
request
= 
self
. 
editing_partition


996 if 'bad_mountpoint' in 
request
: 

998 
mountpoint
= 
request
[ 'mountpoint' ] 

1000 if 
mountpoint
== '' or 
mountpoint
is None : 

1001 
self
. 
	`preseed
( 
question
, 'Do not mount it' , 
seen
= False ) 

1003 
self
. 
	`preseed
( 
question
, 'Enter manually' , 
seen
= False ) 

1006 raise 
AssertionError
, "Arrived at %s unexpectedly" % 
question


1008 elif 
question
== 'partman-basicfilesystems/mountpoint_manual' : 

1009 if 
self
. 
creating_partition
or 
self
. 
editing_partition
: 

1010 if 
self
. 
creating_partition
: 

1011 
request
= 
self
. 
creating_partition


1013 
request
= 
self
. 
editing_partition


1014 if 'bad_mountpoint' in 
request
: 

1017 
self
. 
	`preseed
( 
question
, 
request
[ 'mountpoint' ] , 
seen
= False ) 

1020 raise 
AssertionError
, "Arrived at %s unexpectedly" % 
question


1022 elif 
question
. 
	`startswith
( 'partman/confirm' ) : 

1023 if 
question
== 'partman/confirm' : 

1024 
self
. 
db
. 
	`set
( 'ubiquity/partman-made-changes' , 'true' ) 

1026 
self
. 
db
. 
	`set
( 'ubiquity/partman-made-changes' , 'false' ) 

1027 
self
. 
	`preseed
( 
question
, 'true' , 
seen
= False ) 

1028 
self
. 
succeeded
= True 

1029 
self
. 
done
= True 

1032 elif 
question
== 'partman/exception_handler' : 

1033 if 
priority
== 'critical' or 
priority
== 'high' : 

1034 
response
= 
self
. 
frontend
. 
	`question_dialog
( 

1035 
self
. 
	`description
( 
question
) , 

1036 
self
. 
	`extended_description
( 
question
) , 

1037 
self
. 
	`choices
( 
question
) , 
use_templates
= False ) 

1038 
self
. 
	`preseed
( 
question
, 
response
, 
seen
= False ) 

1040 
self
. 
	`preseed
( 
question
, 'unhandled' , 
seen
= False ) 

1043 elif 
question
== 'partman/exception_handler_note' : 

1044 if 
priority
== 'critical' or 
priority
== 'high' : 

1045 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

1046 
self
. 
	`extended_description
( 
question
) ) 

1047 return 
FilteredCommand
. 
	`error
( 
self
, 
priority
, 
question
) 

1051 elif 
question
== 'partman/installation_medium_mounted' : 

1052 
self
. 
frontend
. 
	`installation_medium_mounted
( 

1053 
self
. 
	`extended_description
( 
question
) ) 

1056 elif 
self
. 
	`question_type
( 
question
) == 'boolean' : 

1057 if 
question
== 'partman/unmount_active' : 

1058 
yes
= 'ubiquity/imported/yes' 

1059 
no
= 'ubiquity/imported/no' 

1061 
yes
= 'ubiquity/text/continue' 

1062 
no
= 'ubiquity/text/go_back' 

1063 
response
= 
self
. 
frontend
. 
	`question_dialog
( 

1064 
self
. 
	`description
( 
question
) , 

1065 
self
. 
	`extended_description
( 
question
) , ( 
no
, 
yes
) ) 

1067 
answer_reversed
= False 

1068 if 
question
in ( 'partman-jfs/jfs_boot' , 'partman-jfs/jfs_root' , 

1070 
answer_reversed
= True 

1071 if 
response
is None or 
response
== 
yes
: 

1072 
answer
= 
answer_reversed


1074 
answer
= not 
answer_reversed


1075 if 
answer
: 

1076 
self
. 
	`preseed
( 
question
, 'true' , 
seen
= False ) 

1078 
self
. 
	`preseed
( 
question
, 'false' , 
seen
= False ) 

1081 return 
FilteredCommand
. 
	`run
( 
self
, 
priority
, 
question
) 

1083 def 
	$ok_handler
( 
self
) : 

1084 if 
self
. 
current_question
. 
	`endswith
( 'automatically_partition' ) : 

1085 ( 
autopartition_choice
, 
self
. 
extra_choice
) = 

1086 
self
. 
frontend
. 
	`get_autopartition_choice
( ) 

1087 if 
autopartition_choice
in 
self
. 
translation_mappings
: 

1088 
autopartition_choice
= 

1089 
self
. 
translation_mappings
[ 
autopartition_choice
] 

1090 
self
. 
	`preseed_as_c
( 
self
. 
current_question
, 
autopartition_choice
, 

1091 
seen
= False ) 

1094 
self
. 
finish_partitioning
= True 

1095 
self
. 
succeeded
= True 

1096 
self
. 
	`exit_ui_loops
( ) 

1099 
	}


1099 def 
	$rebuild_cache
( 
self
) : 

1100 assert 
self
. 
current_question
== 'partman/choose_partition' 

1101 
self
. 
building_cache
= True 

1103 
	}


1103 def 
	$create_label
( 
self
, 
devpart
) : 

1104 assert 
self
. 
current_question
== 'partman/choose_partition' 

1105 
self
. 
creating_label
= { 

1106 'devpart' : 
devpart


1108 
self
. 
	`exit_ui_loops
( ) 

1110 
	}


1110 def 
	$create_partition
( 
self
, 
devpart
, 
size
, 
prilog
, 
place
, 

1111 
method
= None , 
mountpoint
= None ) : 

1112 assert 
self
. 
current_question
== 'partman/choose_partition' 

1113 
self
. 
creating_partition
= { 

1114 'devpart' : 
devpart
, 

1115 'size' : 
size
, 

1116 'type' : 
prilog
, 

1117 'place' : 
place
, 

1118 'method' : 
method
, 

1119 'mountpoint' : 
mountpoint


1121 
self
. 
	`exit_ui_loops
( ) 

1123 
	}


1123 def 
	$edit_partition
( 
self
, 
devpart
, 
size
= None , 

1124 
method
= None , 
mountpoint
= None , 
format
= None ) : 

1125 assert 
self
. 
current_question
== 'partman/choose_partition' 

1126 
self
. 
editing_partition
= { 

1127 'devpart' : 
devpart
, 

1128 'size' : 
size
, 

1129 'method' : 
method
, 

1130 'mountpoint' : 
mountpoint
, 

1131 'format' : 
format


1133 
self
. 
	`exit_ui_loops
( ) 

1135 
	}


1135 def 
	$delete_partition
( 
self
, 
devpart
) : 

1136 assert 
self
. 
current_question
== 'partman/choose_partition' 

1137 
self
. 
deleting_partition
= { 

1138 'devpart' : 
devpart


1140 
self
. 
	`exit_ui_loops
( ) 

1142 
	}


1142 def 
	$undo
( 
self
) : 

1143 assert 
self
. 
current_question
== 'partman/choose_partition' 

1144 
self
. 
undoing
= True 

1145 
self
. 
	`exit_ui_loops
( ) 

1168 
	}


1168 

	@ubiquity/components/timezone.py

20 import 
	~<os


21 import 
	~<locale


23 import 
	~<debconf


25 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


26 from 
ubiquity
import 
	~<i18n


27 import 
	~<ubiquity
. 
	~<tz


29 class 
	cTimezone
( 
FilteredCommand
) : 

30 def 
	$prepare
( 
self
) : 

31 
self
. 
tzdb
= 
ubiquity
. 
tz
. 
	`Database
( ) 

32 
self
. 
multiple
= False 

33 if not 'UBIQUITY_AUTOMATIC' in 
os
. 
environ
: 

34 
self
. 
db
. 
	`fset
( 'time/zone' , 'seen' , 'false' ) 

35 
cc
= 
self
. 
db
. 
	`get
( 'debian-installer/country' ) 

37 
self
. 
db
. 
	`get
( 'tzsetup/country/%s' % 
cc
) 

39 
self
. 
multiple
= True 

40 except 
debconf
. 
DebconfError
: 

42 
self
. 
	`preseed
( 'tzsetup/selected' , 'false' ) 

43 
questions
= [ '^time/zone$' ] 

44 return ( [ '/usr/share/ubiquity/tzsetup-wrapper' ] , 
questions
) 

46 
	}


46 def 
	$run
( 
self
, 
priority
, 
question
) : 

47 if 
question
== 'time/zone' : 

48 if 
self
. 
multiple
: 

53 
self
. 
db
. 
	`reset
( 
question
) 

54 
zone
= 
self
. 
db
. 
	`get
( 
question
) 

57 if not 
zone
: 

58 
choices_c
= 
self
. 
	`choices_untranslated
( 
question
) 

59 if 
choices_c
: 

60 
zone
= 
choices_c
[ 0 ] 

62 if 
zone
== 'Canada/Eastern' : 

63 
zone
= 'America/Toronto' 

64 elif 
zone
== 'US/Eastern' : 

65 
zone
= 'America/New_York' 

66 
self
. 
frontend
. 
	`set_timezone
( 
zone
) 

68 return 
FilteredCommand
. 
	`run
( 
self
, 
priority
, 
question
) 

70 
	}


70 def 
	$ok_handler
( 
self
) : 

71 
zone
= 
self
. 
frontend
. 
	`get_timezone
( ) 

72 if 
zone
is None : 

73 
zone
= 
self
. 
db
. 
	`get
( 'time/zone' ) 

75 
self
. 
	`preseed
( 'time/zone' , 
zone
) 

76 for 
location
in 
self
. 
tzdb
. 
locations
: 

77 if 
location
. 
zone
== 
zone
: 

78 
self
. 
	`preseed
( 'debian-installer/country' , 
location
. 
country
) 

80 
FilteredCommand
. 
	`ok_handler
( 
self
) 

82 
	}


82 def 
	$cleanup
( 
self
) : 

83 
di_locale
= 
self
. 
db
. 
	`get
( 'debian-installer/locale' ) 

84 if 
di_locale
not in 
i18n
. 
	`get_supported_locales
( ) : 

85 
di_locale
= 
self
. 
db
. 
	`get
( 'debian-installer/fallbacklocale' ) 

86 if 
di_locale
!= 
self
. 
frontend
. 
locale
: 

87 
self
. 
frontend
. 
locale
= 
di_locale


88 
os
. 
environ
[ 'LANG' ] = 
di_locale


89 
os
. 
environ
[ 'LANGUAGE' ] = 
di_locale


91 
locale
. 
	`setlocale
( 
locale
. 
LC_ALL
, '' ) 

92 except 
locale
. 
Error
, 
e
: 

93 
self
. 
	`debug
( 'locale.setlocale failed: %s (LANG=%s)' , 

94 
e
, 
di_locale
) 

94 
	}


	@ubiquity/components/mythbuntu.py

21 from 
ubiquity
. 
misc
import 
	~<create_bool


22 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


23 import 
	~<os


25 class 
	cMythbuntuInstallType
( 
FilteredCommand
) : 

28 def 
	$__init__
( 
self
, 
frontend
, 
db
= None ) : 

29 
self
. 
questions
= [ 'install_type' ] 

30 
FilteredCommand
. 
	`__init__
( 
self
, 
frontend
, 
db
) 

32 
	}


32 def 
	$prepare
( 
self
) : 

33 
questions
= [ ] 

34 for 
question
in 
self
. 
questions
: 

35 
answer
= 
self
. 
db
. 
	`get
( 'mythbuntu/' + 
question
) 

36 if 
answer
!= '' : 

37 
self
. 
frontend
. 
	`set_installtype
( 
answer
) 

38 
questions
. 
	`append
( '^mythbuntu/' + 
question
) 

39 return ( [ '/usr/share/ubiquity/ask-mythbuntu' , 'type' ] , 
questions
) 

41 
	}


41 def 
	$ok_handler
( 
self
) : 

42 
self
. 
	`preseed
( 'mythbuntu/' + 
self
. 
questions
[ 0 ] , 
self
. 
frontend
. 
	`get_installtype
( ) ) 

43 
FilteredCommand
. 
	`ok_handler
( 
self
) 

45 
	}


45 class 
	cMythbuntuServices
( 
FilteredCommand
) : 

48 def 
	$prepare
( 
self
) : 

49 
services
= 
self
. 
frontend
. 
	`get_services
( ) 

50 
questions
= [ ] 

51 for 
this_service
in 
services
: 

52 
answer
= 
self
. 
db
. 
	`get
( 'mythbuntu/' + 
this_service
) 

53 if 
answer
!= '' : 

54 
self
. 
frontend
. 
	`set_service
( 
this_service
, 
answer
) 

55 
questions
. 
	`append
( '^mythbuntu/' + 
this_service
) 

56 return ( [ '/usr/share/ubiquity/ask-mythbuntu' , 'services' ] , 
questions
) 

58 
	}


58 def 
	$ok_handler
( 
self
) : 

59 
services
= 
self
. 
frontend
. 
	`get_services
( ) 

60 for 
this_service
in 
services
: 

61 
answer
= 
services
[ 
this_service
] 

62 if 
answer
is True or 
answer
is False : 

63 
self
. 
	`preseed_bool
( 'mythbuntu/' + 
this_service
, 
answer
) 

65 
self
. 
	`preseed
( 'mythbuntu/' + 
this_service
, 
answer
) 

66 
FilteredCommand
. 
	`ok_handler
( 
self
) 

68 
	}


68 class 
	cMythbuntuPasswords
( 
FilteredCommand
) : 

70 def 
	$prepare
( 
self
) : 

72 
passwords
= 
self
. 
frontend
. 
	`get_mythtv_passwords
( ) 

73 
questions
= [ ] 

74 for 
this_password
in 
passwords
: 

75 
answer
= 
self
. 
db
. 
	`get
( 'mythtv/' + 
this_password
) 

76 if 
answer
!= '' : 

77 
self
. 
frontend
. 
	`set_password
( 
this_password
, 
answer
) 

78 
questions
. 
	`append
( '^mythtv/' + 
this_password
) 

81 if 'Master' in 
self
. 
frontend
. 
	`get_installtype
( ) and 'UBIQUITY_AUTOMATIC' not in 
os
. 
environ
: 

82 
os
. 
environ
[ 'UBIQUITY_AUTOMATIC' ] = "2" 

84 
passwords
= 
self
. 
frontend
. 
	`get_mythtv_passwords
( ) 

85 for 
this_password
in 
passwords
: 

86 
self
. 
	`preseed
( 'mythtv/' + 
this_password
, 
passwords
[ 
this_password
] ) 

88 return ( [ '/usr/share/ubiquity/ask-mythbuntu' , 'passwords' ] , 
questions
) 

90 
	}


90 def 
	$ok_handler
( 
self
) : 

92 
passwords
= 
self
. 
frontend
. 
	`get_mythtv_passwords
( ) 

93 for 
this_password
in 
passwords
: 

94 
self
. 
	`preseed
( 'mythtv/' + 
this_password
, 
passwords
[ 
this_password
] ) 

96 
FilteredCommand
. 
	`ok_handler
( 
self
) 

98 
	}


98 def 
	$cleanup
( 
self
) : 

100 if 'UBIQUITY_AUTOMATIC' in 
os
. 
environ
and 
os
. 
environ
[ 'UBIQUITY_AUTOMATIC' ] == "2" : 

101 del 
os
. 
environ
[ 'UBIQUITY_AUTOMATIC' ] 

103 
FilteredCommand
. 
	`cleanup
( 
self
) 

105 
	}


105 class 
	cMythbuntuRemote
( 
FilteredCommand
) : 

107 def 
	$__init__
( 
self
, 
frontend
, 
db
= None ) : 

108 
self
. 
top
= [ 'remote' , 'transmitter' ] 

109 
FilteredCommand
. 
	`__init__
( 
self
, 
frontend
, 
db
) 

111 
	}


111 def 
	$prepare
( 
self
) : 

112 
questions
= [ ] 

113 for 
question
in 
self
. 
top
: 

114 
answer
= 
self
. 
db
. 
	`get
( 'lirc/' + 
question
) 

115 if 
answer
!= '' : 

116 
self
. 
frontend
. 
	`set_lirc
( 
question
, 
answer
) 

117 
questions
. 
	`append
( '^lirc/' + 
question
) 

118 return ( [ '/usr/share/ubiquity/ask-mythbuntu' , 'ir' ] , 
questions
) 

120 
	}


120 def 
	$ok_handler
( 
self
) : 

121 for 
question
in 
self
. 
top
: 

122 
device
= 
self
. 
frontend
. 
	`get_lirc
( 
question
) 

123 
self
. 
	`preseed
( 'lirc/' + 
question
, 
device
[ 
question
] ) 

124 
FilteredCommand
. 
	`ok_handler
( 
self
) 

126 
	}


126 class 
	cMythbuntuDrivers
( 
FilteredCommand
) : 

127 def 
	$prepare
( 
self
) : 

129 
drivers
= 
self
. 
frontend
. 
	`get_drivers
( ) 

130 
questions
= [ ] 

131 for 
this_driver
in 
drivers
: 

132 
answer
= 
self
. 
db
. 
	`get
( 'mythbuntu/' + 
this_driver
) 

133 if 
answer
!= '' : 

134 
self
. 
frontend
. 
	`set_driver
( 
this_driver
, 
answer
) 

135 
questions
. 
	`append
( '^mythbuntu/' + 
this_driver
) 

136 return ( [ '/usr/share/ubiquity/ask-mythbuntu' , 'drivers' ] , 
questions
) 

138 
	}


138 def 
	$ok_handler
( 
self
) : 

139 
drivers
= 
self
. 
frontend
. 
	`get_drivers
( ) 

141 for 
this_driver
in 
drivers
: 

142 if 
drivers
[ 
this_driver
] is True or 
drivers
[ 
this_driver
] is False : 

143 
self
. 
	`preseed_bool
( 'mythbuntu/' + 
this_driver
, 
drivers
[ 
this_driver
] ) 

145 
self
. 
	`preseed
( 'mythbuntu/' + 
this_driver
, 
drivers
[ 
this_driver
] ) 

146 
FilteredCommand
. 
	`ok_handler
( 
self
) 

146 
	}


	@ubiquity/components/yabootinstaller.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


22 class 
	cYabootInstaller
( 
FilteredCommand
) : 

23 def 
	$prepare
( 
self
) : 

27 
	}


27 def 
	$error
( 
self
, 
priority
, 
question
) : 

28 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

29 
self
. 
	`extended_description
( 
question
) ) 

30 return 
FilteredCommand
. 
	`error
( 
self
, 
priority
, 
question
) 

30 
	}


	@ubiquity/components/grubinstaller.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


22 class 
	cGrubInstaller
( 
FilteredCommand
) : 

23 def 
	$prepare
( 
self
) : 

28 
	}


28 def 
	$error
( 
self
, 
priority
, 
question
) : 

29 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

30 
self
. 
	`extended_description
( 
question
) ) 

31 return 
FilteredCommand
. 
	`error
( 
self
, 
priority
, 
question
) 

33 
	}


33 def 
	$run
( 
self
, 
priority
, 
question
) : 

34 if 
question
== 'grub-installer/bootdev' : 

36 if 
self
. 
db
. 
	`get
( 
question
) == '' : 

37 
self
. 
	`preseed
( 
question
, '(hd0)' ) 

39 return 
FilteredCommand
. 
	`run
( 
self
, 
priority
, 
question
) 

39 
	}


	@ubiquity/components/kbootinstaller.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


22 class 
	cKbootInstaller
( 
FilteredCommand
) : 

23 def 
	$prepare
( 
self
) : 

27 
	}


27 def 
	$error
( 
self
, 
priority
, 
question
) : 

28 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

29 
self
. 
	`extended_description
( 
question
) ) 

30 return 
FilteredCommand
. 
	`error
( 
self
, 
priority
, 
question
) 

30 
	}


	@ubiquity/components/apt_setup.py

20 import 
	~<debconf


22 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


23 from 
ubiquity
import 
	~<gconftool


25 class 
	cAptSetup
( 
FilteredCommand
) : 

26 def 
	$_gconf_http_proxy
( 
self
) : 

27 if 
gconftool
. 
	`get
( '/system/http_proxy/use_http_proxy' ) != 'true' : 

30 
host
= 
gconftool
. 
	`get
( '/system/http_proxy/host' ) 

31 if 
host
== '' : 

33 
port
= 
gconftool
. 
	`get
( '/system/http_proxy/port' ) 

34 if 
port
== '' : 

35 
port
= '8080' 

37 
auth
= 
gconftool
. 
	`get
( '/system/http_proxy/use_authentication' ) 

38 if 
auth
== 'true' : 

39 
user
= 
gconftool
. 
	`get
( '/system/http_proxy/authentication_user' ) 

40 
password
= 
gconftool
. 
	`get
( 

42 return 'http://%s:%s@%s:%s/' % ( 
host
, 
port
, 
user
, 
password
) 

44 return 'http://%s:%s/' % ( 
host
, 
port
) 

46 
	}


46 def 
	$_gconf_no_proxy
( 
self
) : 

47 return ',' . 
	`join
( 
gconftool
. 
	`get_list
( '/system/http_proxy/ignore_hosts' ) ) 

49 
	}


49 def 
	$prepare
( 
self
) : 

50 
env
= { } 

53 
chosen_http_proxy
= 
self
. 
db
. 
	`get
( 'mirror/http/proxy' ) 

54 except 
debconf
. 
DebconfError
: 

55 
chosen_http_proxy
= None 

57 if not 
chosen_http_proxy
: 

58 
http_proxy
= 
self
. 
	`_gconf_http_proxy
( ) 

59 if 
http_proxy
is not None : 

60 
self
. 
	`preseed
( 'mirror/http/proxy' , 
http_proxy
) 

61 
no_proxy
= 
self
. 
	`_gconf_no_proxy
( ) 

62 if 
no_proxy
: 

63 
env
[ 'no_proxy' ] = 
no_proxy


65 return ( [ '/usr/share/ubiquity/apt-setup' ] , [ ] , 
env
) 

65 
	}


	@ubiquity/components/console_setup.py

21 import 
	~<re


22 import 
	~<os


24 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


25 from 
ubiquity
import 
	~<keyboard_names


26 from 
ubiquity
import 
	~<misc


28 class 
	cConsoleSetup
( 
FilteredCommand
) : 

29 def 
	$prepare
( 
self
) : 

30 
self
. 
	`preseed
( 'console-setup/ask_detect' , 'false' ) 

36 
misc
. 
	`regain_privileges
( ) 

38 
os
. 
	`unlink
( '/etc/default/console-setup.pre-ubiquity' ) 

39 except 
OSError
: 

42 
os
. 
	`rename
( '/etc/default/console-setup' , 

44 except 
OSError
: 

46 
os
. 
	`unlink
( '/etc/default/console-setup' ) 

47 except 
OSError
: 

49 
misc
. 
	`drop_privileges
( ) 

53 
self
. 
db
. 
	`fset
( 'console-setup/layout' , 'seen' , 'false' ) 

54 
self
. 
db
. 
	`fset
( 'console-setup/variant' , 'seen' , 'false' ) 

55 
self
. 
db
. 
	`fset
( 'console-setup/model' , 'seen' , 'false' ) 

56 
self
. 
db
. 
	`fset
( 'console-setup/codeset' , 'seen' , 'false' ) 

67 
	}


67 def 
	$run
( 
self
, 
priority
, 
question
) : 

68 if 
self
. 
done
: 

69 return 
self
. 
succeeded


71 if 
question
== 'console-setup/layout' : 

74 
self
. 
succeeded
= True 

77 
self
. 
frontend
. 
	`set_keyboard_choices
( 

78 
self
. 
	`choices_untranslated
( 
question
) ) 

79 
self
. 
frontend
. 
	`set_keyboard
( 
self
. 
db
. 
	`get
( 
question
) ) 

81 elif 
question
== 'console-setup/variant' : 

84 
self
. 
frontend
. 
	`set_keyboard_variant_choices
( 

85 
self
. 
	`choices_untranslated
( 
question
) ) 

86 
self
. 
frontend
. 
	`set_keyboard_variant
( 
self
. 
db
. 
	`get
( 
question
) ) 

91 if ( 'UBIQUITY_AUTOMATIC' in 
os
. 
environ
and 

92 
self
. 
db
. 
	`fget
( 'console-setup/layoutcode' , 'seen' ) == 'true' ) : 

95 return 
FilteredCommand
. 
	`run
( 
self
, 
priority
, 
question
) 

99 
	}


99 def 
	$change_layout
( 
self
, 
layout
) : 

100 
self
. 
	`preseed
( 'console-setup/layout' , 
layout
) 

103 
self
. 
succeeded
= False 

104 
self
. 
	`exit_ui_loops
( ) 

106 
	}


106 def 
	$ok_handler
( 
self
) : 

107 
variant
= 
self
. 
frontend
. 
	`get_keyboard_variant
( ) 

108 if 
variant
is not None : 

109 
self
. 
	`preseed
( 'console-setup/variant' , 
variant
) 

110 return 
FilteredCommand
. 
	`ok_handler
( 
self
) 

117 
	}


117 def 
	$adjust_keyboard
( 
self
, 
model
, 
layout
, 
variant
, 
options
) : 

121 if 
layout
in ( 'am' , 'ara' , 'ben' , 'bd' , 'bg' , 'bt' , 'by' , 'deva' , 'ge' , 

126 
latin
= False 

127 
real_layout
= 'us,%s' % 
layout


128 elif 
layout
== 'jp' : 

129 if 
variant
in ( '106' , 'common' , 'OADG109A' , 'nicola_f_bs' ) : 

130 
latin
= True 

131 
real_layout
= 
layout


133 
latin
= False 

134 
real_layout
= 'jp,jp' 

135 elif 
layout
== 'lt' : 

136 
latin
= False 

137 
real_layout
= 'lt,lt' 

138 elif 
layout
== 'me' : 

139 if 
variant
== 'basic' or 
variant
. 
	`startswith
( 'latin' ) : 

140 
latin
= True 

141 
real_layout
= 
layout


143 
latin
= False 

144 
real_layout
= 'me,me' 

145 elif 
layout
== 'rs' : 

146 if 
variant
== 'basic' or 
variant
. 
	`startswith
( 'latin' ) : 

147 
latin
= True 

148 
real_layout
= 
layout


150 
latin
= False 

151 
real_layout
= 'rs,rs' 

153 
latin
= True 

154 
real_layout
= 
layout


156 if 
latin
: 

157 
real_variant
= 
variant


158 elif 
real_layout
== 'jp,jp' : 

159 
real_variant
= '106,%s' % 
variant


160 elif 
real_layout
== 'lt,lt' : 

161 if 
variant
== 'us' : 

162 
real_variant
= 'us,' 

164 
real_variant
= '%s,us' % 
variant


165 elif 
real_layout
== 'me,me' : 

166 if 
variant
== 'cyrillicyz' : 

167 
real_variant
= 'latinyz,%s' % 
variant


168 elif 
variant
== 'cyrillicalternatequotes' : 

169 
real_variant
= 'latinalternatequotes,%s' % 
variant


171 
real_variant
= 'basic,%s' % 
variant


172 elif 
real_layout
== 'rs,rs' : 

173 if 
variant
== 'yz' : 

174 
real_variant
= 'latinyz,%s' % 
variant


175 elif 
variant
== 'alternatequotes' : 

176 
real_variant
= 'latinalternatequotes,%s' % 
variant


178 
real_variant
= 'latin,%s' % 
variant


180 
real_variant
= ',%s' % 
variant


182 
real_options
= [ 
opt
for 
opt
in 
options
if not 
opt
. 
	`startswith
( 'lv3:' ) ] 

183 if not 
latin
: 

184 
toggle
= 
re
. 
	`compile
( r'^grp:.*toggle$' ) 

185 
real_options
= [ 
opt
for 
opt
in 
real_options


186 if not 
toggle
. 
	`match
( 
opt
) ] 

190 
real_options
. 
	`append
( 'grp:alt_shift_toggle' ) 

191 if 
layout
!= 'us' : 

192 
real_options
. 
	`append
( 'lv3:ralt_switch' ) 

194 
real_model
= 
model


195 if 
model
== 'pc105' : 

196 if 
real_layout
== 'br' : 

197 
real_model
= 'abnt2' 

198 elif 
real_layout
== 'jp' : 

199 
real_model
= 'jp106' 

201 return ( 
real_model
, 
real_layout
, 
real_variant
, 
real_options
) 

203 
	}


203 def 
	$apply_keyboard
( 
self
, 
layout
, 
variant
) : 

204 
model
= 
self
. 
db
. 
	`get
( 'console-setup/modelcode' ) 

206 if 
layout
not in 
keyboard_names
. 
layouts
: 

207 
self
. 
	`debug
( "Unknown keyboard layout '%s'" % 
layout
) 

209 
layout
= 
keyboard_names
. 
layouts
[ 
layout
] 

211 if 
layout
not in 
keyboard_names
. 
variants
: 

212 
self
. 
	`debug
( "No known variants for layout '%s'" % 
layout
) 

213 
variant
= '' 

214 elif 
variant
in 
keyboard_names
. 
variants
[ 
layout
] : 

215 
variant
= 
keyboard_names
. 
variants
[ 
layout
] [ 
variant
] 

217 
self
. 
	`debug
( "Unknown keyboard variant '%s' for layout '%s'" % 

218 ( 
variant
, 
layout
) ) 

221 ( 
model
, 
layout
, 
variant
, 
options
) = 

222 
self
. 
	`adjust_keyboard
( 
model
, 
layout
, 
variant
, [ ] ) 

223 
self
. 
	`debug
( "Setting keyboard layout: %s %s %s %s" % 

224 ( 
model
, 
layout
, 
variant
, 
options
) ) 

225 
self
. 
	`apply_real_keyboard
( 
model
, 
layout
, 
variant
, 
options
) 

227 
	}


227 def 
	$apply_real_keyboard
( 
self
, 
model
, 
layout
, 
variant
, 
options
) : 

228 
args
= [ ] 

229 if 
model
is not None and 
model
!= '' : 

230 
args
. 
	`extend
( ( "-model" , 
model
) ) 

231 
args
. 
	`extend
( ( "-layout" , 
layout
) ) 

232 if 
variant
!= '' : 

233 
args
. 
	`extend
( ( "-variant" , 
variant
) ) 

234 
args
. 
	`extend
( ( "-option" , "" ) ) 

235 for 
option
in 
options
: 

236 
args
. 
	`extend
( ( "-option" , 
option
) ) 

237 
misc
. 
	`execute
( "setxkbmap" , * 
args
) 

239 
	}


239 def 
	$cleanup
( 
self
) : 

246 
model
= 
self
. 
db
. 
	`get
( 'console-setup/modelcode' ) 

247 
layout
= 
self
. 
db
. 
	`get
( 'console-setup/layoutcode' ) 

248 
variant
= 
self
. 
db
. 
	`get
( 'console-setup/variantcode' ) 

249 
options
= 
self
. 
db
. 
	`get
( 'console-setup/optionscode' ) 

250 
self
. 
	`apply_real_keyboard
( 
model
, 
layout
, 
variant
, 
options
. 
	`split
( ',' ) ) 

252 if 
layout
== '' : 

255 
misc
. 
	`regain_privileges
( ) 

256 
oldconfigfile
= '/etc/X11/xorg.conf' 

257 
newconfigfile
= '/etc/X11/xorg.conf.new' 

259 
oldconfig
= 
	`open
( 
oldconfigfile
) 

260 except 
IOError
: 

264 
newconfig
= 
	`open
( 
newconfigfile
, 'w' ) 

266 
re_section_inputdevice
= 
re
. 
	`compile
( r'\s*Section\s+"InputDevice"\s*$' ) 

267 
re_driver_kbd
= 
re
. 
	`compile
( r'\s*Driver\s+"kbd"\s*$' ) 

268 
re_endsection
= 
re
. 
	`compile
( r'\s*EndSection\s*$' ) 

269 
re_option_xkbmodel
= 
re
. 
	`compile
( r'(\s*Option\s*"XkbModel"\s*).*' ) 

270 
re_option_xkblayout
= 
re
. 
	`compile
( r'(\s*Option\s*"XkbLayout"\s*).*' ) 

271 
re_option_xkbvariant
= 
re
. 
	`compile
( r'(\s*Option\s*"XkbVariant"\s*).*' ) 

272 
re_option_xkboptions
= 
re
. 
	`compile
( r'(\s*Option\s*"XkbOptions"\s*).*' ) 

273 
in_inputdevice
= False 

274 
in_inputdevice_kbd
= False 

275 
done
= { 'model' : 
model
== '' , 'layout' : False , 

276 'variant' : 
variant
== '' , 'options' : 
options
== '' } 

278 for 
line
in 
oldconfig
: 

279 
line
= 
line
. 
	`rstrip
( '\n' ) 

280 if 
re_section_inputdevice
. 
	`match
( 
line
) is not None : 

281 
in_inputdevice
= True 

282 elif 
in_inputdevice
and 
re_driver_kbd
. 
	`match
( 
line
) is not None : 

283 
in_inputdevice_kbd
= True 

284 elif 
re_endsection
. 
	`match
( 
line
) is not None : 

285 if 
in_inputdevice_kbd
: 

286 if not 
done
[ 'model' ] : 

287 print >> 
newconfig
, ( '\tOption\t\t"XkbModel"\t"%s"' % 

288 
model
) 

289 if not 
done
[ 'layout' ] : 

290 print >> 
newconfig
, ( '\tOption\t\t"XkbLayout"\t"%s"' % 

291 
layout
) 

292 if not 
done
[ 'variant' ] : 

293 print >> 
newconfig
, ( '\tOption\t\t"XkbVariant"\t"%s"' % 

294 
variant
) 

295 if not 
done
[ 'options' ] : 

296 print >> 
newconfig
, ( '\tOption\t\t"XkbOptions"\t"%s"' % 

297 
options
) 

298 
in_inputdevice
= False 

299 
in_inputdevice_kbd
= False 

300 
done
= { 'model' : 
model
== '' , 'layout' : False , 

301 'variant' : 
variant
== '' , 'options' : 
options
== '' } 

302 elif 
in_inputdevice_kbd
: 

303 
match
= 
re_option_xkbmodel
. 
	`match
( 
line
) 

304 if 
match
is not None : 

305 if 
model
== '' : 

308 
line
= 
match
. 
	`group
( 1 ) + '"pc105"' 

310 
line
= 
match
. 
	`group
( 1 ) + '"%s"' % 
model


311 
done
[ 'model' ] = True 

313 
match
= 
re_option_xkblayout
. 
	`match
( 
line
) 

314 if 
match
is not None : 

315 
line
= 
match
. 
	`group
( 1 ) + '"%s"' % 
layout


316 
done
[ 'layout' ] = True 

318 
match
= 
re_option_xkbvariant
. 
	`match
( 
line
) 

319 if 
match
is not None : 

320 if 
variant
== '' : 

323 
line
= 
match
. 
	`group
( 1 ) + '"%s"' % 
variant


324 
done
[ 'variant' ] = True 

326 
match
= 
re_option_xkboptions
. 
	`match
( 
line
) 

327 if 
match
is not None : 

328 if 
options
== '' : 

331 
line
= 
match
. 
	`group
( 1 ) + '"%s"' % 
options


332 
done
[ 'options' ] = True 

333 print >> 
newconfig
, 
line


335 
newconfig
. 
	`close
( ) 

336 
oldconfig
. 
	`close
( ) 

337 
os
. 
	`rename
( 
newconfigfile
, 
oldconfigfile
) 

338 
misc
. 
	`drop_privileges
( ) 

338 
	}


	@ubiquity/components/install.py

22 import 
	~<os


24 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


26 class 
	cInstall
( 
FilteredCommand
) : 

27 def 
	$prepare
( 
self
) : 

28 
automatic_mode
= 'UBIQUITY_AUTOMATIC' in 
os
. 
environ


30 if 
os
. 
	`access
( '/usr/share/grub-installer/grub-installer' , 
os
. 
X_OK
) : 

31 
bootdevice
= 
self
. 
db
. 
	`get
( 'grub-installer/bootdev' ) 

32 
with_other_os
= 
self
. 
db
. 
	`get
( 'grub-installer/with_other_os' ) 

33 
only_debian
= 
self
. 
db
. 
	`get
( 'grub-installer/only_debian' ) 

37 if not ( 
automatic_mode
and 
bootdevice
!= '' ) : 

38 
bootdev
= 
self
. 
frontend
. 
	`get_summary_device
( ) 

39 if 
bootdev
is None or 
bootdev
== '' : 

40 
bootdev
= '(hd0)' 

41 
self
. 
	`preseed
( 'grub-installer/bootdev' , 
bootdev
) 

42 if not ( 
automatic_mode
and 
with_other_os
!= '' ) : 

43 
self
. 
	`preseed
( 'grub-installer/with_other_os' , 'false' ) 

44 if not ( 
automatic_mode
and 
only_debian
!= '' ) : 

45 
self
. 
	`preseed
( 'grub-installer/only_debian' , 'false' ) 

47 
install_bootloader_seen
= 
self
. 
db
. 
	`fget
( 'ubiquity/install_bootloader' , 

49 if not ( 
automatic_mode
and 
install_bootloader_seen
) : 

50 if 
self
. 
frontend
. 
	`get_grub
( ) is not None : 

51 
self
. 
	`preseed_bool
( 'ubiquity/install_bootloader' , 
self
. 
frontend
. 
	`get_grub
( ) ) 

53 
self
. 
	`preseed_bool
( 'ubiquity/install_bootloader' , True ) 

55 
popcon
= 
self
. 
frontend
. 
	`get_popcon
( ) 

56 if 
popcon
is not None : 

57 if 
popcon
: 

58 
self
. 
	`preseed
( 'popularity-contest/participate' , 'true' ) 

60 
self
. 
	`preseed
( 'popularity-contest/participate' , 'false' ) 

62 
http_proxy
= 
self
. 
frontend
. 
	`get_proxy
( ) 

63 if 
http_proxy
: 

64 
self
. 
	`preseed
( 'mirror/http/proxy' , 
http_proxy
) 

66 
reboot
= 
self
. 
db
. 
	`get
( 'ubiquity/reboot' ) 

67 if 
reboot
== 'true' : 

68 
self
. 
frontend
. 
	`set_reboot
( True ) 

70 
self
. 
frontend
. 
	`set_reboot
( False ) 

72 if 
self
. 
frontend
. 
oem_config
: 

73 
self
. 
	`preseed
( 'oem-config/enable' , 'true' ) 

74 
self
. 
	`preseed
( 'oem-config/id' , 
self
. 
frontend
. 
	`get_oem_id
( ) ) 

77 
self
. 
	`preseed
( 'netcfg/dhcp_ntp_servers' , '' , 
seen
= False ) 

79 
questions
= [ '^.*/apt-install-failed$' , 

85 return ( [ '/usr/share/ubiquity/install.py' ] , 
questions
) 

87 
	}


87 def 
	$capb
( 
self
, 
capabilities
) : 

88 
self
. 
frontend
. 
	`debconf_progress_cancellable
( 

89 'progresscancel' in 
capabilities
) 

91 
	}


91 def 
	$error
( 
self
, 
priority
, 
question
) : 

92 if 
question
== 'hw-detect/modprobe_error' : 

95 elif 
question
== 'apt-setup/security-updates-failed' : 

96 
fatal
= False 

98 
fatal
= True 

99 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

100 
self
. 
	`extended_description
( 
question
) , 
fatal
) 

101 if 
fatal
: 

102 return 
FilteredCommand
. 
	`error
( 
self
, 
priority
, 
question
) 

106 
	}


106 def 
	$run
( 
self
, 
priority
, 
question
) : 

107 if 
question
. 
	`endswith
( '/apt-install-failed' ) : 

108 return 
self
. 
	`error
( 
priority
, 
question
) 

110 elif 
question
== 'migration-assistant/failed-unmount' : 

111 
response
= 
self
. 
frontend
. 
	`question_dialog
( 

112 
self
. 
	`description
( 
question
) , 

113 
self
. 
	`extended_description
( 
question
) , 

115 if 
response
is None or 
response
== 'ubiquity/text/continue' : 

116 
self
. 
	`preseed
( 
question
, 'true' ) 

118 
self
. 
	`preseed
( 
question
, 'false' ) 

120 elif 
question
== 'ubiquity/install/copying_error/md5' : 

121 
response
= 
self
. 
frontend
. 
	`question_dialog
( 

122 
self
. 
	`description
( 
question
) , 

124 
self
. 
	`extended_description
( 
question
) , 

126 
use_templates
= False ) 

127 if 
response
is None or 
response
== 'Abort' : 

128 
self
. 
	`preseed
( 
question
, 'abort' ) 

129 elif 
response
== 'Retry' : 

130 
self
. 
	`preseed
( 
question
, 'retry' ) 

131 elif 
response
== 'Skip' : 

132 
self
. 
	`preseed
( 
question
, 'skip' ) 

135 return 
FilteredCommand
. 
	`run
( 
self
, 
priority
, 
question
) 

135 
	}


	@ubiquity/components/hw_detect.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


22 class 
	cHwDetect
( 
FilteredCommand
) : 

23 def 
	$prepare
( 
self
) : 

24 
self
. 
	`preseed
( 'hw-detect/start_pcmcia' , 'false' ) 

27 
	}


27 def 
	$error
( 
self
, 
priority
, 
question
) : 

28 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

29 
self
. 
	`extended_description
( 
question
) ) 

30 return 
FilteredCommand
. 
	`error
( 
self
, 
priority
, 
question
) 

32 
	}


32 def 
	$progress_info
( 
self
, 
progress_title
, 
progress_info
) : 

34 if 
progress_info
== 'hw-detect/load_progress_step' : 

37 return 
FilteredCommand
. 
	`progress_info
( 
self
, 

38 
progress_title
, 
progress_info
) 

38 
	}


	@ubiquity/components/check_kernels.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


22 class 
	cCheckKernels
( 
FilteredCommand
) : 

23 def 
	$prepare
( 
self
) : 

24 return ( [ '/usr/share/ubiquity/check-kernels' ] , [ ] ) 

24 
	}


	@ubiquity/components/flash_kernel.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


22 class 
	cFlashKernel
( 
FilteredCommand
) : 

23 def 
	$prepare
( 
self
) : 

25 [ 'PROGRESS' ] ) 

25 
	}


	@ubiquity/components/usersetup.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


21 import 
	~<debconf


23 class 
	cUserSetup
( 
FilteredCommand
) : 

24 def 
	$prepare
( 
self
) : 

25 if 
self
. 
frontend
. 
	`get_hostname
( ) == '' : 

27 
hostname
= 
self
. 
db
. 
	`get
( 'netcfg/get_hostname' ) 

28 
domain
= 
self
. 
db
. 
	`get
( 'netcfg/get_domain' ) 

29 if 
hostname
and 
domain
: 

30 
hostname
= '%s.%s' % ( 
hostname
, 
domain
) 

31 if 
hostname
!= '' : 

32 
self
. 
frontend
. 
	`set_hostname
( 
hostname
) 

33 except 
debconf
. 
DebconfError
: 

35 if 
self
. 
frontend
. 
	`get_fullname
( ) == '' : 

37 
fullname
= 
self
. 
db
. 
	`get
( 'passwd/user-fullname' ) 

38 if 
fullname
!= '' : 

39 
self
. 
frontend
. 
	`set_fullname
( 
fullname
) 

40 except 
debconf
. 
DebconfError
: 

42 if 
self
. 
frontend
. 
	`get_username
( ) == '' : 

44 
username
= 
self
. 
db
. 
	`get
( 'passwd/username' ) 

45 if 
username
!= '' : 

46 
self
. 
frontend
. 
	`set_username
( 
username
) 

47 except 
debconf
. 
DebconfError
: 

50 
auto_login
= 
self
. 
db
. 
	`get
( 'passwd/auto-login' ) 

51 
self
. 
frontend
. 
	`set_auto_login
( 
auto_login
== 'true' ) 

52 except 
debconf
. 
DebconfError
: 

55 
encrypt_home
= 
self
. 
db
. 
	`get
( 'user-setup/encrypt-home' ) 

56 
self
. 
frontend
. 
	`set_encrypt_home
( 
encrypt_home
== 'true' ) 

57 except 
debconf
. 
DebconfError
: 

63 
questions
= [ '^passwd/user-fullname$' , '^passwd/username$' , 

68 
questions
) 

70 
	}


70 def 
	$set
( 
self
, 
question
, 
value
) : 

71 if 
question
== 'passwd/username' : 

72 if 
self
. 
frontend
. 
	`get_username
( ) != '' : 

73 
self
. 
frontend
. 
	`set_username
( 
value
) 

75 
	}


75 def 
	$run
( 
self
, 
priority
, 
question
) : 

76 if 
question
. 
	`startswith
( 'user-setup/password-weak' ) : 

81 
response
= 
self
. 
frontend
. 
	`question_dialog
( 

82 
self
. 
	`description
( 
question
) , 

83 
self
. 
	`extended_description
( 
question
) , 

86 if 
response
is None or 
response
== 'ubiquity/text/continue' : 

87 
self
. 
	`preseed
( 
question
, 'true' ) 

89 
self
. 
	`preseed
( 
question
, 'false' ) 

90 
self
. 
succeeded
= False 

91 
self
. 
done
= False 

92 
self
. 
frontend
. 
	`select_password
( ) 

95 return 
FilteredCommand
. 
	`run
( 
self
, 
priority
, 
question
) 

97 
	}


97 def 
	$ok_handler
( 
self
) : 

98 
fullname
= 
self
. 
frontend
. 
	`get_fullname
( ) 

99 
username
= 
self
. 
frontend
. 
	`get_username
( ) 

100 
password
= 
self
. 
frontend
. 
	`get_password
( ) 

101 
password_confirm
= 
self
. 
frontend
. 
	`get_verified_password
( ) 

102 
auto_login
= 
self
. 
frontend
. 
	`get_auto_login
( ) 

103 
encrypt_home
= 
self
. 
frontend
. 
	`get_encrypt_home
( ) 

105 
self
. 
	`preseed
( 'passwd/user-fullname' , 
fullname
) 

106 
self
. 
	`preseed
( 'passwd/username' , 
username
) 

108 
self
. 
	`preseed
( 'passwd/user-password' , 
password
) 

109 
self
. 
	`preseed
( 'passwd/user-password-again' , 
password_confirm
) 

110 if 
self
. 
frontend
. 
oem_config
: 

111 
self
. 
	`preseed
( 'passwd/user-uid' , '29999' ) 

113 
self
. 
	`preseed
( 'passwd/user-uid' , '' ) 

114 
self
. 
	`preseed_bool
( 'passwd/auto-login' , 
auto_login
) 

115 
self
. 
	`preseed_bool
( 'user-setup/encrypt-home' , 
encrypt_home
) 

117 
hostname
= 
self
. 
frontend
. 
	`get_hostname
( ) 

118 if 
hostname
is not None and 
hostname
!= '' : 

119 
hd
= 
hostname
. 
	`split
( '.' , 1 ) 

120 
self
. 
	`preseed
( 'netcfg/get_hostname' , 
hd
[ 0 ] ) 

121 if 
	`len
( 
hd
) > 1 : 

122 
self
. 
	`preseed
( 'netcfg/get_domain' , 
hd
[ 1 ] ) 

124 
self
. 
	`preseed
( 'netcfg/get_domain' , '' ) 

126 
FilteredCommand
. 
	`ok_handler
( 
self
) 

128 
	}


128 def 
	$error
( 
self
, 
priority
, 
question
) : 

129 if 
question
. 
	`startswith
( 'passwd/username-' ) : 

130 
self
. 
frontend
. 
	`username_error
( 
self
. 
	`extended_description
( 
question
) ) 

131 elif 
question
. 
	`startswith
( 'user-setup/password-' ) : 

132 
self
. 
frontend
. 
	`password_error
( 
self
. 
	`extended_description
( 
question
) ) 

134 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

135 
self
. 
	`extended_description
( 
question
) ) 

136 return 
FilteredCommand
. 
	`error
( 
self
, 
priority
, 
question
) 

136 
	}



	@ubiquity/components/language.py

20 import 
	~<os


21 import 
	~<re


22 import 
	~<locale


24 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


25 from 
ubiquity
import 
	~<i18n


26 from 
ubiquity
import 
	~<misc


28 class 
	cLanguage
( 
FilteredCommand
) : 

29 def 
	$prepare
( 
self
) : 

30 
self
. 
language_question
= None 

31 
self
. 
db
. 
	`fset
( 'localechooser/languagelist' , 'seen' , 'false' ) 

33 
os
. 
	`unlink
( '/var/lib/localechooser/preseeded' ) 

34 
os
. 
	`unlink
( '/var/lib/localechooser/langlevel' ) 

35 except 
OSError
: 

37 
questions
= [ 'localechooser/languagelist' ] 

38 return ( [ '/usr/lib/ubiquity/localechooser/localechooser' ] , 
questions
, 

39 { 'PATH' : '/usr/lib/ubiquity/localechooser:' + 
os
. 
environ
[ 'PATH' ] , 

42 
	}


42 def 
	$run
( 
self
, 
priority
, 
question
) : 

43 if 
question
== 'localechooser/languagelist' : 

44 
self
. 
language_question
= 
question


45 
current_language_index
= 
self
. 
	`value_index
( 
question
) 

46 
current_language
= "English" 

48 import 
	~<gzip


49 
languagelist
= 
gzip
. 
	`open
( '/usr/lib/ubiquity/localechooser/languagelist.data.gz' ) 

50 
language_display_map
= { } 

51 
i
= 0 

52 for 
line
in 
languagelist
: 

53 
line
= 
	`unicode
( 
line
, 'utf-8' ) 

54 if 
line
== '' or 
line
== '\n' : 

56 
code
, 
name
, 
trans
= 
line
. 
	`strip
( u'\n' ) . 
	`split
( u':' ) [ 1 : ] 

57 if 
code
in ( 'dz' , 'km' ) : 

58 
i
+= 1 

60 
language_display_map
[ 
trans
] = ( 
name
, 
code
) 

61 if 
i
== 
current_language_index
: 

62 
current_language
= 
trans


63 
i
+= 1 

64 
languagelist
. 
	`close
( ) 

66 def 
	$compare_choice
( 
x
, 
y
) : 

67 
result
= 
	`cmp
( 
language_display_map
[ 
x
] [ 1 ] , 

68 
language_display_map
[ 
y
] [ 1 ] ) 

69 if 
result
!= 0 : 

70 return 
result


71 return 
	`cmp
( 
x
, 
y
) 

73 
	}


73 
sorted_choices
= 
	`sorted
( 
language_display_map
, 
compare_choice
) 

74 
self
. 
frontend
. 
	`set_language_choices
( 
sorted_choices
, 

75 
language_display_map
) 

76 
self
. 
frontend
. 
	`set_language
( 
current_language
) 

78 return 
FilteredCommand
. 
	`run
( 
self
, 
priority
, 
question
) 

80 def 
	$ok_handler
( 
self
) : 

81 if 
self
. 
language_question
is not None : 

82 
self
. 
	`preseed
( 
self
. 
language_question
, 
self
. 
frontend
. 
	`get_language
( ) ) 

83 
FilteredCommand
. 
	`ok_handler
( 
self
) 

85 
	}


85 def 
	$cleanup
( 
self
) : 

86 
di_locale
= 
self
. 
db
. 
	`get
( 'debian-installer/locale' ) 

87 if 
di_locale
not in 
i18n
. 
	`get_supported_locales
( ) : 

88 
di_locale
= 
self
. 
db
. 
	`get
( 'debian-installer/fallbacklocale' ) 

89 if 
di_locale
!= 
self
. 
frontend
. 
locale
: 

90 
self
. 
frontend
. 
locale
= 
di_locale


91 
os
. 
environ
[ 'LANG' ] = 
di_locale


92 
os
. 
environ
[ 'LANGUAGE' ] = 
di_locale


94 
locale
. 
	`setlocale
( 
locale
. 
LC_ALL
, '' ) 

95 except 
locale
. 
Error
, 
e
: 

96 
self
. 
	`debug
( 'locale.setlocale failed: %s (LANG=%s)' , 

97 
e
, 
di_locale
) 

98 
misc
. 
	`execute_root
( 'fontconfig-voodoo' , 

99 '--auto' , '--force' , '--quiet' ) 

99 
	}


	@ubiquity/components/siloinstaller.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


22 class 
	cSiloInstaller
( 
FilteredCommand
) : 

23 def 
	$prepare
( 
self
) : 

25 { 'PATH' : '/usr/lib/ubiquity/silo-installer:' + 
os
. 
environ
[ 'PATH' ] } ) 

27 
	}


27 def 
	$error
( 
self
, 
priority
, 
question
) : 

28 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

29 
self
. 
	`extended_description
( 
question
) ) 

30 return 
FilteredCommand
. 
	`error
( 
self
, 
priority
, 
question
) 

30 
	}


	@ubiquity/components/summary.py

20 import 
	~<os


21 import 
	~<textwrap


22 import 
	~<subprocess


24 import 
	~<debconf


26 from 
ubiquity
. 
parted_server
import 
	~<PartedServer


27 from 
ubiquity
. 
misc
import * 

29 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


31 def 
	$installing_from_disk
( ) : 

32 
cdromfs
= '' 

34 
fp
= 
	`open
( '/proc/mounts' ) 

35 for 
line
in 
fp
: 

36 
line
= 
line
. 
	`split
( ) 

37 if 
line
[ 1 ] == '/cdrom' : 

38 
cdromfs
= 
line
[ 2 ] 

41 if 
fp
: 

42 
fp
. 
	`close
( ) 

43 if 
cdromfs
== 'iso9660' or not 
cdromfs
: 

48 
	}


48 def 
	$find_grub_target
( ) : 

53 
boot
= '' 

54 
root
= '' 

55 
	`regain_privileges
( ) 

56 
p
= 
	`PartedServer
( ) 

57 for 
disk
in 
p
. 
	`disks
( ) : 

58 
p
. 
	`select_disk
( 
disk
) 

59 for 
part
in 
p
. 
	`partitions
( ) : 

60 
part
= 
part
[ 1 ] 

61 if 
p
. 
	`has_part_entry
( 
part
, 'mountpoint' ) : 

62 
mp
= 
p
. 
	`readline_part_entry
( 
part
, 'mountpoint' ) 

63 if 
mp
== '/boot' : 

64 
boot
= 
disk
. 
	`replace
( '=' , '/' ) 

65 elif 
mp
== '/' : 

66 
root
= 
disk
. 
	`replace
( '=' , '/' ) 

67 
	`drop_privileges
( ) 

68 if 
boot
: 

69 return 
boot


70 elif 
root
: 

71 return 
root


73 except 
Exception
, 
e
: 

74 
	`drop_privileges
( ) 

75 import 
	~<syslog


76 
syslog
. 
	`syslog
( 'Exception in find_grub_target: ' + 
	`str
( 
e
) ) 

79 
	}


79 def 
	$grub_options
( ) : 

82 
	`regain_privileges
( ) 

83 
l
= [ ] 

84 
oslist
= { } 

85 
subp
= 
subprocess
. 
	`Popen
( [ 'os-prober' ] , 
stdout
= 
subprocess
. 
PIPE
, 

86 
stderr
= 
subprocess
. 
PIPE
) 

87 
result
= 
subp
. 
	`communicate
( ) [ 0 ] . 
	`splitlines
( ) 

88 for 
res
in 
result
: 

89 
res
= 
res
. 
	`split
( ':' ) 

90 
oslist
[ 
res
[ 0 ] ] = 
res
[ 1 ] 

91 
p
= 
	`PartedServer
( ) 

92 for 
disk
in 
p
. 
	`disks
( ) : 

93 
p
. 
	`select_disk
( 
disk
) 

94 
dev
= '' 

95 
mod
= '' 

96 
size
= '' 

98 
fp
= 
	`open
( 
p
. 
	`device_entry
( 'model' ) ) 

99 
mod
= 
fp
. 
	`readline
( ) 

100 
fp
. 
	`close
( ) 

101 
fp
= 
	`open
( 
p
. 
	`device_entry
( 'device' ) ) 

102 
dev
= 
fp
. 
	`readline
( ) 

103 
fp
= 
	`open
( 
p
. 
	`device_entry
( 'size' ) ) 

104 
size
= 
fp
. 
	`readline
( ) 

106 
fp
. 
	`close
( ) 

107 if 
dev
and 
mod
: 

108 if 
size
. 
	`isdigit
( ) : 

109 
size
= 
	`format_size
( 
	`int
( 
size
) ) 

110 
l
. 
	`append
( [ 
dev
, '%s (%s)' % ( 
mod
, 
size
) ] ) 

112 
l
. 
	`append
( [ 
dev
, 
mod
] ) 

113 for 
part
in 
p
. 
	`partitions
( ) : 

114 
ostype
= '' 

115 if 
part
[ 4 ] == 'linux-swap' : 

117 if 
os
. 
path
. 
	`exists
( 
p
. 
	`part_entry
( 
part
[ 1 ] , 'format' ) ) : 

119 elif 
part
[ 5 ] in 
oslist
. 
	`keys
( ) : 

120 
ostype
= 
oslist
[ 
part
[ 5 ] ] 

121 
l
. 
	`append
( [ 
part
[ 5 ] , 
ostype
] ) 

122 
	`drop_privileges
( ) 

123 return 
l


125 
	}


125 def 
	$will_be_installed
( 
pkg
) : 

127 
manifest
= 
	`open
( '/cdrom/casper/filesystem.manifest-desktop' ) 

129 for 
line
in 
manifest
: 

130 if 
line
. 
	`strip
( ) == '' or 
line
. 
	`startswith
( '#' ) : 

132 if 
line
. 
	`split
( ) [ 0 ] == 
pkg
: 

135 
manifest
. 
	`close
( ) 

136 except 
IOError
: 

139 
	}


139 class 
	cSummary
( 
FilteredCommand
) : 

140 def 
	$__init__
( 
self
, 
frontend
) : 

141 
FilteredCommand
. 
	`__init__
( 
self
, 
frontend
) 

143 
	}


143 def 
	$prepare
( 
self
) : 

146 
	}


146 def 
	$run
( 
self
, 
priority
, 
question
) : 

147 if 
question
. 
	`endswith
( '/summary' ) : 

148 
text
= '' 

149 
wrapper
= 
textwrap
. 
	`TextWrapper
( 
width
= 76 ) 

150 for 
line
in 
self
. 
	`extended_description
( 
question
) . 
	`split
( "\n" ) : 

151 
text
+= 
wrapper
. 
	`fill
( 
line
) + "\n" 

153 
self
. 
frontend
. 
	`set_summary_text
( 
text
) 

156 
install_bootloader
= 
self
. 
db
. 
	`get
( 'ubiquity/install_bootloader' ) 

157 
self
. 
frontend
. 
	`set_grub
( 
install_bootloader
== 'true' ) 

158 except 
debconf
. 
DebconfError
: 

159 
self
. 
frontend
. 
	`set_grub
( None ) 

161 if 
os
. 
	`access
( '/usr/share/grub-installer/grub-installer' , 
os
. 
X_OK
) : 

164 if 
	`installing_from_disk
( ) : 

165 
self
. 
frontend
. 
	`set_summary_device
( 
	`find_grub_target
( ) ) 

167 
self
. 
frontend
. 
	`set_summary_device
( '(hd0)' ) 

169 
self
. 
frontend
. 
	`set_summary_device
( None ) 

171 
self
. 
frontend
. 
	`set_grub_combo
( 
	`grub_options
( ) ) 

173 if 
	`will_be_installed
( 'popularity-contest' ) : 

175 
participate
= 
self
. 
db
. 
	`get
( 'popularity-contest/participate' ) 

176 
self
. 
frontend
. 
	`set_popcon
( 
participate
== 'true' ) 

177 except 
debconf
. 
DebconfError
: 

178 
self
. 
frontend
. 
	`set_popcon
( None ) 

180 
self
. 
frontend
. 
	`set_popcon
( None ) 

185 return 
FilteredCommand
. 
	`run
( 
self
, 
priority
, 
question
) 

185 
	}


	@ubiquity/components/usersetup_apply.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


22 class 
	cUserSetupApply
( 
FilteredCommand
) : 

23 def 
	$prepare
( 
self
) : 

27 
	}


27 def 
	$error
( 
self
, 
priority
, 
question
) : 

28 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

29 
self
. 
	`extended_description
( 
question
) ) 

30 return 
FilteredCommand
. 
	`error
( 
self
, 
priority
, 
question
) 

30 
	}


	@ubiquity/components/migrationassistant.py

19 import 
	~<syslog


20 import 
	~<sys


21 import 
	~<os


22 import 
	~<debconf


24 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


25 from 
ubiquity
. 
misc
import * 

27 class 
	cMigrationAssistant
( 
FilteredCommand
) : 

28 def 
	$prepare
( 
self
) : 

29 
self
. 
got_a_question
= False 

30 
questions
= [ '^migration-assistant/partitions' , 

38 return ( [ '/usr/share/ubiquity/migration-assistant' ] , 
questions
) 

41 
	}


41 def 
	$run
( 
self
, 
priority
, 
question
) : 

42 if 
question
. 
	`endswith
( 'items' ) : 

43 
self
. 
got_a_question
= True 

44 if 
question
== 'migration-assistant/failed-unmount' : 

45 
response
= 
self
. 
frontend
. 
	`question_dialog
( 

46 
self
. 
	`description
( 
question
) , 

47 
self
. 
	`extended_description
( 
question
) , 

49 if 
response
is None or 
response
== 'ubiquity/text/continue' : 

50 
self
. 
	`preseed
( 
question
, 'true' ) 

52 
self
. 
	`preseed
( 
question
, 'false' ) 

57 if 
question
== 'migration-assistant/partitions' : 

58 
self
. 
	`filter_parts
( ) 

60 elif 
question
== 'ubiquity/run-ma-again' : 

61 
self
. 
db
. 
	`set
( 'ubiquity/run-ma-again' , 'false' ) 

62 
self
. 
	`set_choices
( ) 

66 if not 
self
. 
got_a_question
: 

67 return 
self
. 
succeeded


69 return 
FilteredCommand
. 
	`run
( 
self
, 
priority
, 
question
) 

71 elif 
question
. 
	`endswith
( 'user' ) : 

72 
username
= 
self
. 
db
. 
	`get
( 'passwd/username' ) 

73 
self
. 
	`preseed
( 
question
, 
username
) 

74 elif 
question
. 
	`endswith
( 'password' ) : 

78 
password
= 
self
. 
db
. 
	`get
( 'passwd/user-password' ) 

79 
self
. 
	`preseed
( 
question
, 
password
) 

80 
self
. 
	`preseed
( 
question
+ '-again' , 
password
) 

82 
self
. 
	`preseed
( 
question
, ", " . 
	`join
( 
self
. 
	`choices
( 
question
) ) ) 

86 
	}


86 def 
	$error
( 
self
, 
priority
, 
question
) : 

87 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

88 
self
. 
	`extended_description
( 
question
) ) 

89 return 
FilteredCommand
. 
	`error
( 
self
, 
priority
, 
question
) 

91 
	}


91 def 
	$ok_handler
( 
self
) : 

92 
choices
= 
self
. 
frontend
. 
	`ma_get_choices
( ) 

93 
username
= 
self
. 
db
. 
	`get
( 'passwd/username' ) 

94 
users
= { } 

96 for 
c
in 
choices
: 

97 if 
c
[ 'selected' ] : 

98 
question
= 'migration-assistant/%s/%s/' % 

99 ( 
c
[ 'part' ] , 
c
[ 'user' ] . 
	`replace
( ' ' , '+' ) ) 

100 
self
. 
db
. 
	`register
( 'migration-assistant/items' , 
question
+ 'items' ) 

101 
self
. 
	`preseed
( 
question
+ 'items' , ', ' . 
	`join
( 
c
[ 'items' ] ) ) 

102 
self
. 
db
. 
	`register
( 'migration-assistant/user' , 
question
+ 'user' ) 

103 
self
. 
	`preseed
( 
question
+ 'user' , 
username
) 

105 
users
[ 
c
[ 'part' ] ] . 
	`append
( 
c
[ 'user' ] ) 

106 except 
KeyError
: 

107 
users
[ 
c
[ 'part' ] ] = [ 
c
[ 'user' ] ] 

109 for 
p
in 
users
. 
	`iterkeys
( ) : 

110 
question
= 'migration-assistant/%s/users' % 
p


111 
self
. 
db
. 
	`register
( 'migration-assistant/users' , 
question
) 

112 
self
. 
	`preseed
( 
question
, ', ' . 
	`join
( 
users
[ 
p
] ) ) 

114 
FilteredCommand
. 
	`ok_handler
( 
self
) 

116 
	}


116 def 
	$filter_parts
( 
self
) : 

117 
question
= 'migration-assistant/partitions' 

118 from 
ubiquity
. 
parted_server
import 
	~<PartedServer


119 
	`regain_privileges
( ) 

120 
parted
= 
	`PartedServer
( ) 

122 
parts
= [ ] 

123 for 
disk
in 
parted
. 
	`disks
( ) : 

124 
parted
. 
	`select_disk
( 
disk
) 

125 for 
partition
in 
parted
. 
	`partitions
( ) : 

129 
filename
= '/var/lib/partman/devices/%s/%s/format' % 

130 ( 
disk
, 
partition
[ 1 ] ) 

131 if 
os
. 
path
. 
	`exists
( 
filename
) : 

132 
syslog
. 
	`syslog
( 'filtering out %s as it is to be formatted.' % 
partition
[ 5 ] ) 

134 
parts
. 
	`append
( 
partition
[ 5 ] ) 

136 
	`drop_privileges
( ) 

137 
ret
= [ ] 

138 for 
choice
in 
self
. 
	`choices
( 
question
) : 

139 if 
choice
[ 
choice
. 
	`rfind
( '(' ) + 1 : 
choice
. 
	`rfind
( ')' ) ] in 
parts
: 

140 
ret
. 
	`append
( 
choice
) 

142 
self
. 
	`preseed
( 
question
, ", " . 
	`join
( 
ret
) ) 

144 
	}


144 def 
	$set_choices
( 
self
) : 

145 
tree
= [ ] 

146 
systems
= 
self
. 
db
. 
	`get
( 'migration-assistant/partitions' ) 

147 if 
systems
: 

148 
systems
= 
systems
. 
	`split
( ', ' ) 

150 
ret
= [ ] 

151 for 
oper
in 
systems
: 

152 
osref
= 
oper


153 
part
= 
oper
[ 
oper
. 
	`rfind
( '/' ) + 1 : - 1 ] # hda1 

154 
oper
= 
oper
[ : 
oper
. 
	`rfind
( '(' ) - 1 ] 

156 
users
= 
self
. 
db
. 
	`get
( 'migration-assistant/' + 
part
+ '/users' ) 

157 if not 
users
: 

158 
syslog
. 
	`syslog
( 'migration-assistant: filtering out %s' 

159 ' as it has no users' % 
osref
) 

162 
ret
. 
	`append
( 
osref
) 

164 
users
= 
users
. 
	`split
( ', ' ) 

165 for 
user
in 
users
: 

166 
items
= 
self
. 
db
. 
	`get
( 'migration-assistant/' + 
part
+ '/' + 

167 
user
. 
	`replace
( ' ' , '+' ) + '/items' ) 

171 if 
items
: 

172 
items
= 
items
. 
	`split
( ', ' ) 

173 
tree
. 
	`append
( { 'user' : 
user
, 

174 'part' : 
part
, 

175 'os' : 
oper
, 

176 'items' : 
items
, 

180 
self
. 
db
. 
	`set
( 'migration-assistant/%s/users' % 
part
, '' ) 

182 
self
. 
db
. 
	`set
( 'migration-assistant/partitions' , ", " . 
	`join
( 
ret
) ) 

183 except 
debconf
. 
DebconfError
, 
e
: 

184 for 
line
in 
	`str
( 
e
) . 
	`split
( '\n' ) : 

185 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 
line
) 

186 
self
. 
db
. 
	`set
( 'migration-assistant/partitions' , '' ) 

187 
tree
= [ ] 

189 
self
. 
frontend
. 
	`ma_set_choices
( 
tree
) 

191 
	}


191 

	@ubiquity/components/language_apply.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


22 class 
	cLanguageApply
( 
FilteredCommand
) : 

23 def 
	$prepare
( 
self
) : 

26 '&& /usr/lib/ubiquity/localechooser/finish-install' ] , [ ] ) 

26 
	}


	@ubiquity/components/timezone_apply.py

20 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


22 class 
	cTimezoneApply
( 
FilteredCommand
) : 

23 def 
	$prepare
( 
self
) : 

24 return ( [ '/usr/lib/ubiquity/tzsetup/post-base-installer' ] , [ ] ) 

24 
	}


	@ubiquity/components/mythbuntu_install.py

21 import 
	~<ubiquity
. 
	~<components
. 
	~<summary


22 class 
	cSummary
( 
ubiquity
. 
components
. 
summary
. 
Summary
) : 

25 def 
	$prepare
( 
self
) : 

28 
	}


28 import 
	~<ubiquity
. 
	~<components
. 
	~<install


29 class 
	cInstall
( 
ubiquity
. 
components
. 
install
. 
Install
) : 

32 def 
	$prepare
( 
self
) : 

33 
prep
= 
	`list
( 
ubiquity
. 
components
. 
install
. 
Install
. 
	`prepare
( 
self
) ) 

34 
prep
[ 0 ] = [ '/usr/share/ubiquity/mythbuntu_install.py' ] 

35 return 
prep


35 
	}


	@ubiquity/components/partman_commit.py

20 import 
	~<debconf


22 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


23 from 
ubiquity
. 
parted_server
import 
	~<PartedServer


25 class 
	cPartmanCommit
( 
FilteredCommand
) : 

26 def 
	$__init__
( 
self
, 
frontend
= None ) : 

27 
FilteredCommand
. 
	`__init__
( 
self
, 
frontend
) 

29 
	}


29 def 
	$prepare
( 
self
) : 

30 
questions
= [ '^partman/confirm.*' , 

36 return ( '/bin/partman-commit' , 
questions
, 

39 
	}


39 def 
	$error
( 
self
, 
priority
, 
question
) : 

40 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

41 
self
. 
	`extended_description
( 
question
) ) 

42 
self
. 
succeeded
= False 

44 
self
. 
done
= True 

47 
	}


47 def 
	$run
( 
self
, 
priority
, 
question
) : 

48 if 
self
. 
done
: 

49 return 
self
. 
succeeded


51 if 
question
. 
	`startswith
( 'partman/confirm' ) : 

52 if 
question
== 'partman/confirm' : 

53 
self
. 
db
. 
	`set
( 'ubiquity/partman-made-changes' , 'true' ) 

55 
self
. 
db
. 
	`set
( 'ubiquity/partman-made-changes' , 'false' ) 

56 
self
. 
	`preseed
( 
question
, 'true' ) 

59 elif 
question
== 'partman/exception_handler' : 

60 if 
priority
== 'critical' or 
priority
== 'high' : 

61 
response
= 
self
. 
frontend
. 
	`question_dialog
( 

62 
self
. 
	`description
( 
question
) , 

63 
self
. 
	`extended_description
( 
question
) , 

64 
self
. 
	`choices
( 
question
) , 
use_templates
= False ) 

65 
self
. 
	`preseed
( 
question
, 
response
, 
seen
= False ) 

67 
self
. 
	`preseed
( 
question
, 'unhandled' , 
seen
= False ) 

70 elif 
question
== 'partman/exception_handler_note' : 

71 if 
priority
== 'critical' or 
priority
== 'high' : 

72 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) , 

73 
self
. 
	`extended_description
( 
question
) ) 

74 return 
FilteredCommand
. 
	`error
( 
self
, 
priority
, 
question
) 

78 elif 
self
. 
	`question_type
( 
question
) == 'boolean' : 

79 
response
= 
self
. 
frontend
. 
	`question_dialog
( 

80 
self
. 
	`description
( 
question
) , 

81 
self
. 
	`extended_description
( 
question
) , 

84 
answer_reversed
= False 

85 if ( 
question
== 'partman-jfs/jfs_boot' or 

86 
question
== 'partman-jfs/jfs_root' ) : 

87 
answer_reversed
= True 

88 if 
response
is None or 
response
== 'ubiquity/text/continue' : 

89 
answer
= 
answer_reversed


91 
answer
= not 
answer_reversed


92 
self
. 
succeeded
= False 

93 
self
. 
done
= True 

94 
self
. 
frontend
. 
	`return_to_partitioning
( ) 

95 if 
answer
: 

96 
self
. 
	`preseed
( 
question
, 'true' ) 

98 
self
. 
	`preseed
( 
question
, 'false' ) 

102 return 
FilteredCommand
. 
	`run
( 
self
, 
priority
, 
question
) 

102 
	}


	@ubiquity/components/migrationassistant_apply.py

19 from 
ubiquity
. 
filteredcommand
import 
	~<FilteredCommand


21 class 
	cMigrationAssistantApply
( 
FilteredCommand
) : 

22 def 
	$prepare
( 
self
) : 

26 
	}


26 def 
	$error
( 
self
, 
priority
, 
question
) : 

27 
self
. 
frontend
. 
	`error_dialog
( 
self
. 
	`description
( 
question
) ) 

28 return 
	`super
( 
MigrationAssistantApply
, 
self
) . 
	`error
( 
priority
, 
question
) 

28 
	}


	@ubiquity/frontend/base.py

22 import 
	~<sys


23 import 
	~<os


24 import 
	~<syslog


25 import 
	~<subprocess


27 import 
	~<debconf


28 from 
ubiquity
. 
debconfcommunicator
import 
	~<DebconfCommunicator


29 from 
ubiquity
. 
misc
import 
	~<drop_privileges


31 from 
ubiquity
import 
	~<i18n


33 class 
	cBaseFrontend
: 

43 def 
	$__init__
( 
self
, 
distro
) : 

45 
self
. 
distro
= 
distro


46 
self
. 
locale
= None 

47 
self
. 
dbfilter
= None 

48 
self
. 
dbfilter_status
= None 

49 
self
. 
current_layout
= None 

50 
self
. 
resize_choice
= None 

51 
self
. 
manual_choice
= None 

52 
self
. 
summary_device
= None 

53 
self
. 
grub_en
= None 

54 
self
. 
popcon
= None 

55 
self
. 
http_proxy_host
= None 

56 
self
. 
http_proxy_port
= 8080 

60 
	`drop_privileges
( ) 

65 
db
= 
self
. 
	`debconf_communicator
( ) 

67 
self
. 
oem_config
= False 

69 if 
db
. 
	`get
( 'oem-config/enable' ) == 'true' : 

70 
self
. 
oem_config
= True 

75 if 'UBIQUITY_MIGRATION_ASSISTANT' in 
os
. 
environ
: 

76 del 
os
. 
environ
[ 'UBIQUITY_MIGRATION_ASSISTANT' ] 

77 except 
debconf
. 
DebconfError
: 

81 
self
. 
oem_id
= 
db
. 
	`get
( 'oem-config/id' ) 

82 except 
debconf
. 
DebconfError
: 

83 
self
. 
oem_id
= '' 

85 if 
self
. 
oem_config
: 

87 
db
. 
	`set
( 'passwd/auto-login' , 'true' ) 

88 
db
. 
	`set
( 'passwd/auto-login-backup' , 'oem' ) 

89 except 
debconf
. 
DebconfError
: 

95 
self
. 
automation_error_cmd
= None 

96 
self
. 
error_cmd
= None 

97 
self
. 
success_cmd
= None 

99 
self
. 
automation_error_cmd
= 
db
. 
	`get
( 

101 
self
. 
error_cmd
= 
db
. 
	`get
( 'ubiquity/failure_command' ) 

102 
self
. 
success_cmd
= 
db
. 
	`get
( 'ubiquity/success_command' ) 

103 except 
debconf
. 
DebconfError
: 

106 
self
. 
allow_password_empty
= False 

108 
self
. 
allow_password_empty
= 
db
. 
	`get
( 'user-setup/allow-password-empty' ) == 'true' 

109 except 
debconf
. 
DebconfError
: 

112 if 'SUDO_USER' in 
os
. 
environ
: 

113 
os
. 
environ
[ 'SCIM_USER' ] = 
os
. 
environ
[ 'SUDO_USER' ] 

114 
os
. 
environ
[ 'SCIM_HOME' ] = 
os
. 
path
. 
	`expanduser
( 

115 '~%s' % 
os
. 
environ
[ 'SUDO_USER' ] ) 

117 
db
. 
	`shutdown
( ) 

119 
	}


119 def 
	$_abstract
( 
self
, 
method
) : 

120 raise 
	`NotImplementedError
( "%s.%s does not implement %s" % 

121 ( 
self
. 
__class__
. 
__module__
, 

122 
self
. 
__class__
. 
__name__
, 
method
) ) 

124 
	}


124 def 
	$run
( 
self
) : 

126 
self
. 
	`_abstract
( 'run' ) 

128 
	}


128 def 
	$get_string
( 
self
, 
name
, 
lang
= None ) : 

130 if 
lang
is None : 

131 
lang
= 
self
. 
locale


132 return 
i18n
. 
	`get_string
( 
name
, 
lang
) 

134 
	}


134 def 
	$watch_debconf_fd
( 
self
, 
from_debconf
, 
process_input
) : 

144 
self
. 
	`_abstract
( 'watch_debconf_fd' ) 

146 
	}


146 def 
	$debconffilter_done
( 
self
, 
dbfilter
) : 

153 if 
dbfilter
is None : 

154 
name
= 'None' 

155 
self
. 
dbfilter_status
= None 

157 
name
= 
dbfilter
. 
__class__
. 
__name__


158 if 
dbfilter
. 
status
: 

159 
self
. 
dbfilter_status
= ( 
name
, 
dbfilter
. 
status
) 

161 
self
. 
dbfilter_status
= None 

162 if 
self
. 
dbfilter
is None : 

163 
currentname
= 'None' 

165 
currentname
= 
self
. 
dbfilter
. 
__class__
. 
__name__


166 
syslog
. 
	`syslog
( 
syslog
. 
LOG_DEBUG
, 

168 ( 
name
, 
currentname
) ) 

169 if 
dbfilter
== 
self
. 
dbfilter
: 

170 
self
. 
dbfilter
= None 

175 
	}


175 def 
	$refresh
( 
self
) : 

179 
	}


179 def 
	$run_main_loop
( 
self
) : 

183 
	}


183 def 
	$quit_main_loop
( 
self
) : 

187 
	}


187 def 
	$post_mortem
( 
self
, 
exctype
, 
excvalue
, 
exctb
) : 

189 
self
. 
	`run_error_cmd
( ) 

192 if 'UBIQUITY_DEBUG_PDB' not in 
os
. 
environ
: 

195 if 
	`hasattr
( 
sys
, 'ps1' ) : 

199 if not 
sys
. 
stdin
. 
	`isatty
( ) or not 
sys
. 
stdout
. 
	`isatty
( ) : 

202 if 
	`issubclass
( 
exctype
, 
SyntaxError
) : 

205 import 
	~<pdb


206 
pdb
. 
	`post_mortem
( 
exctb
) 

207 
sys
. 
	`exit
( 1 ) 

209 
	}


209 def 
	$set_page
( 
self
, 
page
) : 

212 
self
. 
	`_abstract
( 'set_page' ) 

219 
	}


219 def 
	$debconf_communicator
( 
self
) : 

220 return 
	`DebconfCommunicator
( 'ubiquity' , 
cloexec
= True ) 

222 
	}


222 def 
	$debconf_operation
( 
self
, 
command
, * 
params
) : 

223 
db
= 
self
. 
	`debconf_communicator
( ) 

225 return 
	`getattr
( 
db
, 
command
) ( * 
params
) 

227 
db
. 
	`shutdown
( ) 

231 
	}


231 def 
	$debconf_progress_start
( 
self
, 
progress_min
, 
progress_max
, 

232 
progress_title
) : 

234 
self
. 
	`_abstract
( 'debconf_progress_start' ) 

236 
	}


236 def 
	$debconf_progress_set
( 
self
, 
progress_val
) : 

238 
self
. 
	`_abstract
( 'debconf_progress_set' ) 

240 
	}


240 def 
	$debconf_progress_step
( 
self
, 
progress_inc
) : 

242 
self
. 
	`_abstract
( 'debconf_progress_step' ) 

244 
	}


244 def 
	$debconf_progress_info
( 
self
, 
progress_info
) : 

246 
self
. 
	`_abstract
( 'debconf_progress_info' ) 

248 
	}


248 def 
	$debconf_progress_stop
( 
self
) : 

250 
self
. 
	`_abstract
( 'debconf_progress_stop' ) 

252 
	}


252 def 
	$debconf_progress_region
( 
self
, 
region_start
, 
region_end
) : 

254 
self
. 
	`_abstract
( 'debconf_progress_region' ) 

256 
	}


256 def 
	$debconf_progress_cancellable
( 
self
, 
cancellable
) : 

265 
	}


265 def 
	$set_language_choices
( 
self
, 
choices
, 
choice_map
) : 

267 
self
. 
language_choice_map
= 
	`dict
( 
choice_map
) 

269 
	}


269 def 
	$set_language
( 
self
, 
language
) : 

273 
	}


273 def 
	$get_language
( 
self
) : 

275 
self
. 
	`_abstract
( 'get_language' ) 

277 
	}


277 def 
	$get_oem_id
( 
self
) : 

279 return 
self
. 
oem_id


283 
	}


283 def 
	$set_timezone
( 
self
, 
timezone
) : 

287 
	}


287 def 
	$get_timezone
( 
self
) : 

289 
self
. 
	`_abstract
( 'get_timezone' ) 

293 
	}


293 def 
	$set_keyboard_choices
( 
self
, 
choices
) : 

297 
	}


297 def 
	$set_keyboard
( 
self
, 
layout
) : 

299 
self
. 
current_layout
= 
layout


301 
	}


301 def 
	$get_keyboard
( 
self
) : 

303 
self
. 
	`_abstract
( 'get_keyboard' ) 

305 
	}


305 def 
	$set_keyboard_variant_choices
( 
self
, 
choices
) : 

309 
	}


309 def 
	$set_keyboard_variant
( 
self
, 
variant
) : 

313 
	}


313 def 
	$get_keyboard_variant
( 
self
) : 

314 
self
. 
	`_abstract
( 'get_keyboard_variant' ) 

318 
	}


318 def 
	$set_disk_layout
( 
self
, 
layout
) : 

321 
	}


321 def 
	$set_autopartition_choices
( 
self
, 
choices
, 
extra_options
, 

322 
resize_choice
, 
manual_choice
, 

323 
biggest_free_choice
) : 

325 
self
. 
resize_choice
= 
resize_choice


326 
self
. 
manual_choice
= 
manual_choice


327 
self
. 
biggest_free_choice
= 
biggest_free_choice


329 
	}


329 def 
	$get_autopartition_choice
( 
self
) : 

331 
self
. 
	`_abstract
( 'get_autopartition_choice' ) 

333 
	}


333 def 
	$installation_medium_mounted
( 
self
, 
message
) : 

340 
	}


340 def 
	$update_partman
( 
self
, 
disk_cache
, 
partition_cache
, 
cache_order
) : 

348 
	}


348 def 
	$return_to_partitioning
( 
self
) : 

350 
self
. 
	`_abstract
( 'return_to_partitioning' ) 

354 
	}


354 def 
	$ma_set_choices
( 
self
, 
choices
) : 

358 
	}


358 def 
	$ma_get_choices
( 
self
) : 

360 
self
. 
	`_abstract
( 'ma_get_choices' ) 

362 
	}


362 def 
	$ma_user_error
( 
self
, 
error
, 
user
) : 

364 
self
. 
	`_abstract
( 'ma_user_error' ) 

366 
	}


366 def 
	$ma_password_error
( 
self
, 
error
, 
user
) : 

368 
self
. 
	`_abstract
( 'ma_password_error' ) 

372 
	}


372 def 
	$set_fullname
( 
self
, 
value
) : 

376 
	}


376 def 
	$get_fullname
( 
self
) : 

378 
self
. 
	`_abstract
( 'get_fullname' ) 

380 
	}


380 def 
	$set_username
( 
self
, 
value
) : 

384 
	}


384 def 
	$get_username
( 
self
) : 

386 
self
. 
	`_abstract
( 'get_username' ) 

388 
	}


388 def 
	$get_password
( 
self
) : 

390 
self
. 
	`_abstract
( 'get_password' ) 

392 
	}


392 def 
	$get_verified_password
( 
self
) : 

394 
self
. 
	`_abstract
( 'get_password' ) 

396 
	}


396 def 
	$select_password
( 
self
) : 

398 
self
. 
	`_abstract
( 'select_password' ) 

400 
	}


400 def 
	$set_auto_login
( 
self
, 
value
) : 

402 
self
. 
	`_abstract
( 'set_auto_login' ) 

404 
	}


404 def 
	$get_auto_login
( 
self
) : 

406 
self
. 
	`_abstract
( 'get_auto_login' ) 

408 
	}


408 def 
	$set_encrypt_home
( 
self
, 
value
) : 

410 
self
. 
	`_abstract
( 'set_encrypt_home' ) 

412 
	}


412 def 
	$get_encrypt_home
( 
self
) : 

414 
self
. 
	`_abstract
( 'get_encrypt_home' ) 

416 
	}


416 def 
	$username_error
( 
self
, 
msg
) : 

418 
self
. 
	`_abstract
( 'username_error' ) 

420 
	}


420 def 
	$password_error
( 
self
, 
msg
) : 

422 
self
. 
	`_abstract
( 'password_error' ) 

426 
	}


426 def 
	$get_hostname
( 
self
) : 

428 
self
. 
	`_abstract
( 'get_hostname' ) 

432 
	}


432 def 
	$set_summary_text
( 
self
, 
text
) : 

436 
	}


436 def 
	$set_summary_device
( 
self
, 
device
) : 

438 
self
. 
summary_device
= 
device


440 
	}


440 def 
	$set_grub
( 
self
, 
enable
) : 

442 
self
. 
grub_en
= 
enable


445 
	}


445 def 
	$get_grub
( 
self
) : 

447 return 
self
. 
grub_en


450 
	}


450 def 
	$get_summary_device
( 
self
) : 

452 return 
self
. 
summary_device


454 
	}


454 def 
	$set_popcon
( 
self
, 
participate
) : 

456 
self
. 
popcon
= 
participate


458 
	}


458 def 
	$set_proxy_host
( 
self
, 
host
) : 

460 
self
. 
http_proxy_host
= 
host


462 
	}


462 def 
	$set_proxy_port
( 
self
, 
port
) : 

464 
self
. 
http_proxy_port
= 
port


467 
	}


467 def 
	$get_proxy
( 
self
) : 

469 if 
self
. 
http_proxy_host
: 

470 return 'http://%s:%s/' % ( 
self
. 
http_proxy_host
, 

471 
self
. 
http_proxy_port
) 

475 
	}


475 def 
	$set_reboot
( 
self
, 
reboot
) : 

477 
self
. 
reboot_after_install
= 
reboot


479 
	}


479 def 
	$get_reboot
( 
self
) : 

480 return 
self
. 
reboot_after_install


482 
	}


482 def 
	$get_reboot_seen
( 
self
) : 

483 
reboot_seen
= 'false' 

485 
reboot_seen
= 
self
. 
	`debconf_operation
( 'fget' , 'ubiquity/reboot' , 

487 except 
debconf
. 
DebconfError
: 

489 if 
reboot_seen
== 'false' : 

495 
	}


495 def 
	$get_popcon
( 
self
) : 

497 return 
self
. 
popcon


501 
	}


501 def 
	$error_dialog
( 
self
, 
title
, 
msg
, 
fatal
= True ) : 

503 
self
. 
	`_abstract
( 'error_dialog' ) 

505 
	}


505 def 
	$question_dialog
( 
self
, 
title
, 
msg
, 
options
, 
use_templates
= True ) : 

507 
self
. 
	`_abstract
( 'question_dialog' ) 

509 
	}


509 def 
	$run_automation_error_cmd
( 
self
) : 

510 if 
self
. 
automation_error_cmd
!= '' : 

511 
subprocess
. 
	`call
( [ 'sh' , '-c' , 
self
. 
automation_error_cmd
] ) 

513 
	}


513 def 
	$run_error_cmd
( 
self
) : 

514 if 
self
. 
error_cmd
!= '' : 

515 
subprocess
. 
	`call
( [ 'sh' , '-c' , 
self
. 
error_cmd
] ) 

517 
	}


517 def 
	$run_success_cmd
( 
self
) : 

518 if 
self
. 
success_cmd
!= '' : 

519 
subprocess
. 
	`call
( [ 'sh' , '-c' , 
self
. 
success_cmd
] ) 

519 
	}


	@ubiquity/frontend/kde_ui.py

26 import 
	~<sys


27 import 
	~<os


28 import 
	~<datetime


29 import 
	~<subprocess


30 import 
	~<math


31 import 
	~<traceback


32 import 
	~<syslog


33 import 
	~<atexit


34 import 
	~<signal


35 import 
	~<gettext


38 from 
PyQt4
. 
QtCore
import * 

39 from 
PyQt4
. 
QtGui
import * 

40 from 
PyQt4
import 
	~<uic


41 from 
PyKDE4
. 
kdeui
import * 

42 from 
PyKDE4
. 
kdecore
import * 

45 from 
ubiquity
. 
frontend
. 
kde_components
. 
Timezone
import * 

46 from 
ubiquity
. 
frontend
. 
kde_components
. 
PartitionBar
import * 

47 from 
ubiquity
. 
frontend
. 
kde_components
. 
PartitionModel
import * 

49 import 
	~<debconf


51 from 
ubiquity
import 
	~<filteredcommand
, 
	~<i18n
, 
	~<validation
, 
	~<parted_server


52 from 
ubiquity
. 
misc
import * 

53 from 
ubiquity
. 
components
import 
	~<console_setup
, 
	~<language
, 
	~<timezone
, 
	~<usersetup
, 

54 
partman
, 
partman_commit
, 
summary
, 
install


55 import 
	~<ubiquity
. 
	~<progressposition


56 from 
ubiquity
. 
frontend
. 
base
import 
	~<BaseFrontend


59 
PATH
= '/usr/share/ubiquity' 

62 
LOCALEDIR
= "/usr/share/locale" 

65 
UIDIR
= 
os
. 
path
. 
	`join
( 
PATH
, 'qt' ) 

67 
BREADCRUMB_STEPS
= { 

76 
BREADCRUMB_MAX_STEP
= 6 

78 
WIDGET_STACK_STEPS
= { 

89 class 
	cUbiquityUI
( 
QWidget
) : 

91 def 
	$__init__
( 
self
, 
parent
) : 

92 
QWidget
. 
	`__init__
( 
self
, 
parent
) 

93 
uic
. 
	`loadUi
( "%s/liveinstaller.ui" % 
UIDIR
, 
self
) 

95 
	}


95 def 
	$setWizard
( 
self
, 
wizardRef
) : 

96 
self
. 
wizard
= 
wizardRef


98 
	}


98 def 
	$closeEvent
( 
self
, 
event
) : 

99 if 
self
. 
wizard
. 
	`on_quit_clicked
( ) == False : 

100 
event
. 
	`ignore
( ) 

102 
	}


102 class 
	clinkLabel
( 
QLabel
) : 

104 def 
	$__init__
( 
self
, 
wizard
, 
parent
) : 

105 
QLabel
. 
	`__init__
( 
self
, 
parent
) 

106 
self
. 
wizard
= 
wizard


108 
	}


108 def 
	$mouseReleaseEvent
( 
self
, 
event
) : 

109 
self
. 
wizard
. 
	`openReleaseNotes
( ) 

111 
	}


111 def 
	$setText
( 
self
, 
text
) : 

112 
QLabel
. 
	`setText
( 
self
, 
text
) 

113 
self
. 
	`resize
( 
self
. 
	`sizeHint
( ) ) 

115 
	}


115 class 
	cWizard
( 
BaseFrontend
) : 

117 def 
	$__init__
( 
self
, 
distro
) : 

118 
BaseFrontend
. 
	`__init__
( 
self
, 
distro
) 

120 
self
. 
previous_excepthook
= 
sys
. 
excepthook


121 
sys
. 
excepthook
= 
self
. 
excepthook


123 
appName
= "kubuntu-ubiquity" 

124 
catalog
= "" 

125 
programName
= 
	`ki18n
( "Installer" ) 

126 
version
= "1.0" 

127 
description
= 
	`ki18n
( "Live CD Installer for Kubuntu" ) 

128 
license
= 
KAboutData
. 
License_GPL


129 
copyright
= 
	`ki18n
( "(c) 2006 Canonical Ltd" ) 

130 
text
= 
	`ki18n
( "none" ) 

131 
homePage
= "http://wiki.kubuntu.org/KubuntuUbiquity" 

132 
bugEmail
= "jriddell@ubuntu.com" 

134 
about
= 
	`KAboutData
( 
appName
, 
catalog
, 
programName
, 
version
, 
description
, 

135 
license
, 
copyright
, 
text
, 
homePage
, 
bugEmail
) 

136 
about
. 
	`addAuthor
( 
	`ki18n
( "Jonathan Riddell" ) , 
	`KLocalizedString
( ) , "jriddell@ubuntu.com" ) 

137 
KCmdLineArgs
. 
	`init
( [ "" ] , 
about
) 

140 
os
. 
	`setegid
( 0 ) 

141 
os
. 
	`seteuid
( 0 ) 

143 
self
. 
app
= 
	`KApplication
( ) 

146 
	`drop_privileges
( ) 

148 
self
. 
parentWidget
= 
	`QWidget
( ) 

149 
self
. 
userinterface
= 
	`UbiquityUI
( 
self
. 
parentWidget
) 

150 if 'UBIQUITY_ONLY' in 
os
. 
environ
: 

151 
self
. 
userinterface
. 
	`setWindowState
( 

152 
self
. 
userinterface
. 
	`windowState
( ) ^ 
Qt
. 
WindowFullScreen
) 

153 
self
. 
userinterface
. 
	`setWizard
( 
self
) 

154 
self
. 
userinterface
. 
	`setWindowFlags
( 
Qt
. 
Dialog
) 

157 
self
. 
advanceddialog
= 
	`QDialog
( 
self
. 
userinterface
) 

158 
uic
. 
	`loadUi
( "%s/advanceddialog.ui" % 
UIDIR
, 
self
. 
advanceddialog
) 

161 
self
. 
release_notes_url_template
= None 

162 
self
. 
language_questions
= ( 'live_installer' , 

168 
self
. 
current_page
= None 

169 
self
. 
first_seen_page
= None 

170 
self
. 
allowed_change_step
= True 

171 
self
. 
allowed_go_backward
= True 

172 
self
. 
allowed_go_forward
= True 

173 
self
. 
stay_on_page
= False 

174 
self
. 
mainLoopRunning
= False 

175 
self
. 
progressDialogue
= None 

176 
self
. 
progress_position
= 
ubiquity
. 
progressposition
. 
	`ProgressPosition
( ) 

177 
self
. 
progress_cancelled
= False 

178 
self
. 
resizePath
= None 

179 
self
. 
resizeSize
= None 

180 
self
. 
username_edited
= False 

181 
self
. 
hostname_edited
= False 

182 
self
. 
previous_partitioning_page
= 
WIDGET_STACK_STEPS
[ "stepPartAuto" ] 

183 
self
. 
installing
= False 

184 
self
. 
installing_no_return
= False 

185 
self
. 
returncode
= 0 

186 
self
. 
partition_bars
= [ ] 

187 
self
. 
disk_layout
= None 

189 
self
. 
laptop
= 
	`execute
( "laptop-detect" ) 

190 
self
. 
partition_tree_model
= None 

191 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
partition_list_treeview
, 
	`SIGNAL
( "customContextMenuRequested(const QPoint&)" ) , 
self
. 
partman_popup
) 

192 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
partition_list_treeview
, 
	`SIGNAL
( "activated(const QModelIndex&)" ) , 
self
. 
on_partition_list_treeview_activated
) 

195 
dbfilter
= 
language
. 
	`Language
( 
self
, 
self
. 
	`debconf_communicator
( ) ) 

196 
dbfilter
. 
	`cleanup
( ) 

197 
dbfilter
. 
db
. 
	`shutdown
( ) 

199 
self
. 
debconf_callbacks
= { } # array to keep callback functions needed by debconf file descriptors 

201 
self
. 
	`customize_installer
( ) 

203 
release_notes_layout
= 
	`QHBoxLayout
( 
self
. 
userinterface
. 
release_notes_frame
) 

204 
self
. 
release_notes_url
= 
	`linkLabel
( 
self
, 
self
. 
userinterface
. 
release_notes_frame
) 

205 
self
. 
release_notes_url
. 
	`setObjectName
( "release_notes_url" ) 

206 
self
. 
release_notes_url
. 
	`show
( ) 

208 
self
. 
	`translate_widgets
( ) 

210 
self
. 
autopartition_vbox
= 
	`QVBoxLayout
( 
self
. 
userinterface
. 
autopartition_frame
) 

211 
self
. 
autopartition_buttongroup
= 
	`QButtonGroup
( 
self
. 
userinterface
. 
autopartition_frame
) 

212 
self
. 
autopartition_buttongroup_texts
= { } 

213 
self
. 
autopartition_handlers
= { } 

214 
self
. 
autopartition_extras
= { } 

215 
self
. 
autopartition_extra_buttongroup
= { } 

216 
self
. 
autopartition_extra_buttongroup_texts
= { } 

218 
self
. 
autopartition_bar_vbox
= 
	`QVBoxLayout
( 
self
. 
userinterface
. 
autopart_bar_frame
) 

219 
self
. 
autopartition_bar_vbox
. 
	`setSpacing
( 0 ) 

220 
self
. 
autopartition_bar_vbox
. 
	`setMargin
( 0 ) 

222 
self
. 
partition_bar_vbox
= 
	`QVBoxLayout
( 
self
. 
userinterface
. 
partition_bar_frame
) 

223 
self
. 
partition_bar_vbox
. 
	`setSpacing
( 0 ) 

224 
self
. 
partition_bar_vbox
. 
	`setMargin
( 0 ) 

226 
iconLoader
= 
	`KIconLoader
( ) 

227 
warningIcon
= 
iconLoader
. 
	`loadIcon
( "dialog-warning" , 
KIconLoader
. 
Desktop
) 

228 
self
. 
userinterface
. 
part_advanced_warning_image
. 
	`setPixmap
( 
warningIcon
) 

229 
self
. 
userinterface
. 
fullname_error_image
. 
	`setPixmap
( 
warningIcon
) 

230 
self
. 
userinterface
. 
username_error_image
. 
	`setPixmap
( 
warningIcon
) 

231 
self
. 
userinterface
. 
password_error_image
. 
	`setPixmap
( 
warningIcon
) 

232 
self
. 
userinterface
. 
hostname_error_image
. 
	`setPixmap
( 
warningIcon
) 

234 
self
. 
forwardIcon
= 
	`KIcon
( "go-next" ) 

235 
self
. 
userinterface
. 
next
. 
	`setIcon
( 
self
. 
forwardIcon
) 

238 
self
. 
applyIcon
= 
	`KIcon
( "dialog-ok-apply" ) 

240 
backIcon
= 
	`KIcon
( "go-previous" ) 

241 
self
. 
userinterface
. 
back
. 
	`setIcon
( 
backIcon
) 

243 
quitIcon
= 
	`KIcon
( "dialog-close" ) 

244 
self
. 
userinterface
. 
quit
. 
	`setIcon
( 
quitIcon
) 

246 
	}


246 def 
	$excepthook
( 
self
, 
exctype
, 
excvalue
, 
exctb
) : 

249 if ( 
	`issubclass
( 
exctype
, 
KeyboardInterrupt
) or 

250 
	`issubclass
( 
exctype
, 
SystemExit
) ) : 

253 
tbtext
= '' . 
	`join
( 
traceback
. 
	`format_exception
( 
exctype
, 
excvalue
, 
exctb
) ) 

254 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 

256 for 
line
in 
tbtext
. 
	`split
( '\n' ) : 

257 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 
line
) 

258 print >> 
sys
. 
stderr
, ( "Exception in KDE frontend" 

260 print >> 
sys
. 
stderr
, 
tbtext


262 
self
. 
	`post_mortem
( 
exctype
, 
excvalue
, 
exctb
) 

264 if 
os
. 
path
. 
	`exists
( '/usr/share/apport/apport-qt' ) : 

265 
self
. 
	`previous_excepthook
( 
exctype
, 
excvalue
, 
exctb
) 

267 
dialog
= 
	`QDialog
( 
self
. 
userinterface
) 

268 
uic
. 
	`loadUi
( "%s/crashdialog.ui" % 
UIDIR
, 
dialog
) 

269 
dialog
. 
beastie_url
. 
	`setOpenExternalLinks
( True ) 

270 
dialog
. 
crash_detail
. 
	`setText
( 
tbtext
) 

271 
dialog
. 
	`exec_
( ) 

272 
sys
. 
	`exit
( 1 ) 

275 
	}


275 def 
	$disable_volume_manager
( 
self
) : 

278 
atexit
. 
	`register
( 
self
. 
enable_volume_manager
) 

280 
	}


280 def 
	$enable_volume_manager
( 
self
) : 

284 
	}


284 def 
	$openReleaseNotes
( 
self
) : 

285 
self
. 
	`openURL
( 
self
. 
release_notes_url_template
) 

287 
	}


287 def 
	$openURL
( 
self
, 
url
) : 

289 
	`execute
( 'su' , '-c' , 'xhost +localhost' , 'ubuntu' ) 

290 
	`execute
( 'su' , '-c' , 'kfmclient openURL ' + 
url
, 'ubuntu' ) 

292 
	}


292 def 
	$run
( 
self
) : 

295 if 
os
. 
	`getuid
( ) != 0 : 

296 
title
= ( 'This installer must be run with administrative ' 

298 
result
= 
QMessageBox
. 
	`critical
( 
self
. 
userinterface
, "Must be root" , 

299 
title
) 

300 
sys
. 
	`exit
( 1 ) 

302 
self
. 
	`disable_volume_manager
( ) 

308 
got_intro
= 
self
. 
	`show_intro
( ) 

309 
self
. 
	`allow_change_step
( True ) 

312 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
next
, 
	`SIGNAL
( "clicked()" ) , 
self
. 
on_next_clicked
) 

313 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
back
, 
	`SIGNAL
( "clicked()" ) , 
self
. 
on_back_clicked
) 

314 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
quit
, 
	`SIGNAL
( "clicked()" ) , 
self
. 
on_quit_clicked
) 

315 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
keyboardlayoutview
, 
	`SIGNAL
( "itemSelectionChanged()" ) , 
self
. 
on_keyboard_layout_selected
) 

316 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
keyboardvariantview
, 
	`SIGNAL
( "itemSelectionChanged()" ) , 
self
. 
on_keyboard_variant_selected
) 

318 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
fullname
, 
	`SIGNAL
( "textChanged(const QString &)" ) , 
self
. 
on_fullname_changed
) 

319 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
username
, 
	`SIGNAL
( "textChanged(const QString &)" ) , 
self
. 
on_username_changed
) 

320 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
username
, 
	`SIGNAL
( "textChanged(const QString &)" ) , 
self
. 
on_username_insert_text
) 

321 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
password
, 
	`SIGNAL
( "textChanged(const QString &)" ) , 
self
. 
on_password_changed
) 

322 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
verified_password
, 
	`SIGNAL
( "textChanged(const QString &)" ) , 
self
. 
on_verified_password_changed
) 

323 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
hostname
, 
	`SIGNAL
( "textChanged(const QString &)" ) , 
self
. 
on_hostname_changed
) 

324 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
hostname
, 
	`SIGNAL
( "textChanged(const QString &)" ) , 
self
. 
on_hostname_insert_text
) 

326 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
fullname
, 
	`SIGNAL
( "selectionChanged()" ) , 
self
. 
on_fullname_changed
) 

327 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
username
, 
	`SIGNAL
( "selectionChanged()" ) , 
self
. 
on_username_changed
) 

328 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
password
, 
	`SIGNAL
( "selectionChanged()" ) , 
self
. 
on_password_changed
) 

329 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
verified_password
, 
	`SIGNAL
( "selectionChanged()" ) , 
self
. 
on_verified_password_changed
) 

330 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
hostname
, 
	`SIGNAL
( "selectionChanged()" ) , 
self
. 
on_hostname_changed
) 

332 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
language_treeview
, 
	`SIGNAL
( "itemSelectionChanged()" ) , 
self
. 
on_language_treeview_selection_changed
) 

334 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
advanced_button
, 
	`SIGNAL
( "clicked()" ) , 
self
. 
on_advanced_button_clicked
) 

336 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
partition_button_new_label
, 
	`SIGNAL
( "clicked(bool)" ) , 
self
. 
on_partition_list_new_label_activate
) 

337 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
partition_button_new
, 
	`SIGNAL
( "clicked(bool)" ) , 
self
. 
on_partition_list_new_activate
) 

338 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
partition_button_edit
, 
	`SIGNAL
( "clicked(bool)" ) , 
self
. 
on_partition_list_edit_activate
) 

339 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
partition_button_delete
, 
	`SIGNAL
( "clicked(bool)" ) , 
self
. 
on_partition_list_delete_activate
) 

340 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
partition_button_undo
, 
	`SIGNAL
( "clicked(bool)" ) , 
self
. 
on_partition_list_undo_activate
) 

342 
self
. 
pages
= [ 
language
. 
Language
, 
timezone
. 
Timezone
, 

343 
console_setup
. 
ConsoleSetup
, 
partman
. 
Partman
, 

344 
usersetup
. 
UserSetup
, 
summary
. 
Summary
] 

346 
self
. 
pagesindex
= 0 

347 
pageslen
= 
	`len
( 
self
. 
pages
) 

349 if 'UBIQUITY_AUTOMATIC' in 
os
. 
environ
: 

350 
got_intro
= False 

351 
self
. 
	`debconf_progress_start
( 0 , 
pageslen
, 

352 
self
. 
	`get_string
( 'ubiquity/install/checking' ) ) 

353 
self
. 
	`refresh
( ) 

356 if 
got_intro
: 

357 global 
BREADCRUMB_STEPS
, 
BREADCRUMB_MAX_STEP


358 for 
step
in 
BREADCRUMB_STEPS
: 

359 
BREADCRUMB_STEPS
[ 
step
] += 1 

360 
BREADCRUMB_STEPS
[ "stepWelcome" ] = 1 

361 
BREADCRUMB_MAX_STEP
+= 1 

362 
first_step
= "stepWelcome" 

364 
first_step
= "stepLanguage" 

366 
self
. 
	`set_current_page
( 
WIDGET_STACK_STEPS
[ 
first_step
] ) 

368 if 
got_intro
: 

369 
self
. 
app
. 
	`exec_
( ) 

371 while ( 
self
. 
pagesindex
< 
pageslen
) : 

372 if 
self
. 
current_page
== None : 

375 
self
. 
backup
= False 

376 
old_dbfilter
= 
self
. 
dbfilter


377 
self
. 
dbfilter
= 
self
. 
pages
[ 
self
. 
pagesindex
] ( 
self
) 

381 if 
self
. 
dbfilter
is not None and 
self
. 
dbfilter
!= 
old_dbfilter
: 

382 
self
. 
	`allow_change_step
( False ) 

383 
self
. 
dbfilter
. 
	`start
( 
auto_process
= True ) 

384 
self
. 
app
. 
	`exec_
( ) 

386 if 
self
. 
backup
or 
self
. 
	`dbfilter_handle_status
( ) : 

387 if 
self
. 
installing
: 

388 
self
. 
	`progress_loop
( ) 

389 elif 
self
. 
current_page
is not None and not 
self
. 
backup
: 

390 
self
. 
	`process_step
( ) 

391 if not 
self
. 
stay_on_page
: 

392 
self
. 
pagesindex
= 
self
. 
pagesindex
+ 1 

393 if 'UBIQUITY_AUTOMATIC' in 
os
. 
environ
: 

395 
self
. 
	`debconf_progress_step
( 1 ) 

396 
self
. 
	`refresh
( ) 

397 if 
self
. 
backup
: 

398 if 
self
. 
pagesindex
> 0 : 

399 
step
= 
self
. 
	`step_name
( 
self
. 
	`get_current_page
( ) ) 

400 if not 
step
== "stepPartAdvanced" : #Advanced will already have pagesindex pointing at first Paritioning page 

401 
self
. 
pagesindex
= 
self
. 
pagesindex
- 1 

403 
self
. 
app
. 
	`processEvents
( ) 

408 if 
self
. 
pagesindex
== 
pageslen
: 

410 
self
. 
current_page
= None 

411 
self
. 
installing
= True 

412 
self
. 
	`progress_loop
( ) 

413 return 
self
. 
returncode


415 
	}


415 def 
	$customize_installer
( 
self
) : 

418 
self
. 
userinterface
. 
	`setWindowIcon
( 
	`KIcon
( "ubiquity" ) ) 

419 
self
. 
	`allow_go_backward
( False ) 

421 if 
self
. 
oem_config
: 

422 
self
. 
userinterface
. 
	`setWindowTitle
( 

423 
self
. 
	`get_string
( 'oem_config_title' ) ) 

425 
self
. 
userinterface
. 
oem_id_entry
. 
	`setText
( 

426 
self
. 
	`debconf_operation
( 'get' , 'oem-config/id' ) ) 

427 except 
debconf
. 
DebconfError
: 

429 
self
. 
userinterface
. 
fullname
. 
	`setText
( 

431 
self
. 
userinterface
. 
fullname
. 
	`setReadOnly
( True ) 

432 
self
. 
userinterface
. 
fullname
. 
	`setEnabled
( False ) 

433 
self
. 
userinterface
. 
username
. 
	`setText
( 'oem' ) 

434 
self
. 
userinterface
. 
username
. 
	`setReadOnly
( True ) 

435 
self
. 
userinterface
. 
username
. 
	`setEnabled
( False ) 

436 
self
. 
username_edited
= True 

437 if 
self
. 
laptop
: 

438 
self
. 
userinterface
. 
hostname
. 
	`setText
( 'oem-laptop' ) 

440 
self
. 
userinterface
. 
hostname
. 
	`setText
( 'oem-desktop' ) 

441 
self
. 
hostname_edited
= True 

442 
self
. 
userinterface
. 
login_pass
. 
	`hide
( ) 

443 
self
. 
userinterface
. 
login_auto
. 
	`hide
( ) 

445 
	`execute_root
( 'apt-install' , 'oem-config-kde' ) 

447 
self
. 
userinterface
. 
oem_id_label
. 
	`hide
( ) 

448 
self
. 
userinterface
. 
oem_id_entry
. 
	`hide
( ) 

450 if not 'UBIQUITY_AUTOMATIC' in 
os
. 
environ
: 

451 
self
. 
userinterface
. 
	`show
( ) 

452 
self
. 
parentWidget
. 
	`hide
( ) 

455 
release_notes
= 
	`open
( '/cdrom/.disk/release_notes_url' ) 

456 
self
. 
release_notes_url_template
= 
release_notes
. 
	`read
( ) . 
	`rstrip
( '\n' ) 

457 
release_notes
. 
	`close
( ) 

458 except ( 
KeyboardInterrupt
, 
SystemExit
) : 

461 
self
. 
userinterface
. 
release_notes_label
. 
	`hide
( ) 

462 
self
. 
userinterface
. 
release_notes_frame
. 
	`hide
( ) 

465 
self
. 
tzmap
= 
	`TimezoneMap
( 
self
) 

466 
map_vbox
= 
	`QVBoxLayout
( 
self
. 
userinterface
. 
map_frame
) 

467 
map_vbox
. 
	`setMargin
( 0 ) 

468 
map_vbox
. 
	`addWidget
( 
self
. 
tzmap
) 

470 
self
. 
userinterface
. 
password_debug_warning_label
. 
	`setVisible
( 

471 'UBIQUITY_DEBUG' in 
os
. 
environ
) 

473 
	}


473 def 
	$set_layout_direction
( 
self
, 
lang
= None ) : 

474 if not 
lang
: 

475 
lang
= 
self
. 
locale


479 if 
lang
. 
	`startswith
( 'ar' ) or 
lang
. 
	`startswith
( 'he' ) : 

480 
direction
= 
Qt
. 
RightToLeft


482 
direction
= 
Qt
. 
LeftToRight


483 
self
. 
app
. 
	`setLayoutDirection
( 
direction
) 

486 
	}


486 def 
	$translate_widgets
( 
self
, 
parentWidget
= None ) : 

487 if 
self
. 
locale
is None : 

488 
languages
= [ ] 

490 
languages
= [ 
self
. 
locale
] 

491 
core_names
= [ 'ubiquity/text/%s' % 
q
for 
q
in 
self
. 
language_questions
] 

492 
core_names
. 
	`append
( 'ubiquity/text/oem_config_title' ) 

493 for 
stock_item
in ( 'cancel' , 'close' , 'go-back' , 'go-forward' , 

495 
core_names
. 
	`append
( 'ubiquity/imported/%s' % 
stock_item
) 

496 
i18n
. 
	`get_translations
( 
languages
= 
languages
, 
core_names
= 
core_names
) 

498 
self
. 
	`translate_widget_children
( 
parentWidget
) 

500 
self
. 
userinterface
. 
partition_button_undo
. 
	`setText
( 

501 
self
. 
	`get_string
( 'partman/text/undo_everything' ) . 
	`replace
( '_' , '&' , 1 ) ) 

502 if 
self
. 
release_notes_url_template
is not None : 

503 
url
= 
self
. 
release_notes_url_template
. 
	`replace
( '${LANG}' , 
self
. 
locale
. 
	`split
( '.' ) [ 0 ] ) 

504 
text
= 
self
. 
	`get_string
( 'release_notes_url' ) 

505 
self
. 
release_notes_url
. 
	`setText
( '<a href="%s">%s</a>' % ( 
url
, 
text
) ) 

507 
self
. 
	`set_layout_direction
( ) 

509 
	}


509 def 
	$translate_widget_children
( 
self
, 
parentWidget
= None ) : 

510 if 
parentWidget
== None : 

511 
parentWidget
= 
self
. 
userinterface


513 
self
. 
	`translate_widget
( 
parentWidget
, 
self
. 
locale
) 

514 if 
parentWidget
. 
	`children
( ) != None : 

515 for 
widget
in 
parentWidget
. 
	`children
( ) : 

516 
self
. 
	`translate_widget_children
( 
widget
) 

518 
	}


518 def 
	$translate_widget
( 
self
, 
widget
, 
lang
) : 

520 if not 
	`isinstance
( 
widget
, 
QWidget
) : 

523 
name
= 
	`str
( 
widget
. 
	`objectName
( ) ) 

525 
text
= 
self
. 
	`get_string
( 
name
, 
lang
) 

527 if 
	`str
( 
name
) == "UbiquityUIBase" : 

528 
text
= 
self
. 
	`get_string
( "live_installer" , 
lang
) 

530 if 
text
is None : 

533 if 
	`isinstance
( 
widget
, 
QLabel
) : 

534 if 
name
== 'step_label' : 

535 global 
BREADCRUMB_STEPS
, 
BREADCRUMB_MAX_STEP


536 
curstep
= '?' 

537 if 
self
. 
current_page
is not None : 

538 
current_name
= 
self
. 
	`step_name
( 
self
. 
current_page
) 

539 if 
current_name
in 
BREADCRUMB_STEPS
: 

540 
curstep
= 
	`str
( 
BREADCRUMB_STEPS
[ 
current_name
] ) 

541 
text
= 
text
. 
	`replace
( '${INDEX}' , 
curstep
) 

542 
text
= 
text
. 
	`replace
( '${TOTAL}' , 
	`str
( 
BREADCRUMB_MAX_STEP
) ) 

544 if 'heading_label' in 
name
: 

545 
widget
. 
	`setText
( "<h2>" + 
text
+ "</h2>" ) 

546 elif 'extra_label' in 
name
: 

547 
widget
. 
	`setText
( "<small>" + 
text
+ "</small>" ) 

548 elif ( 'group_label' in 
name
or 'warning_label' in 
name
or 

549 
name
in ( 'drives_label' , 'partition_method_label' ) ) : 

550 
widget
. 
	`setText
( "<strong>" + 
text
+ "</strong>" ) 

551 elif 
name
== 'release_notes_url' : 

552 if 
self
. 
release_notes_url_template
is not None : 

553 
url
= 
self
. 
release_notes_url_template
. 
	`replace
( 

554 '${LANG}' , 
lang
. 
	`split
( '.' ) [ 0 ] ) 

555 
widget
. 
	`setText
( '<a href="%s">%s</a>' % ( 
url
, 
text
) ) 

557 
widget
. 
	`setText
( 
text
) 

559 elif 
	`isinstance
( 
widget
, 
QAbstractButton
) : 

560 
widget
. 
	`setText
( 
text
. 
	`replace
( '_' , '&' , 1 ) ) 

562 elif 
	`isinstance
( 
widget
, 
QWidget
) and 
	`str
( 
name
) == "UbiquityUIBase" : 

563 if 
self
. 
oem_config
: 

564 
text
= 
self
. 
	`get_string
( 'oem_config_title' , 
lang
) 

565 
widget
. 
	`setWindowTitle
( 
text
) 

568 print "WARNING: unknown widget: " + 
name


569 print "Type: " , 
	`type
( 
widget
) 

571 
	}


571 def 
	$allow_change_step
( 
self
, 
allowed
) : 

572 if 
allowed
: 

573 
cursor
= 
	`QCursor
( 
Qt
. 
ArrowCursor
) 

575 
cursor
= 
	`QCursor
( 
Qt
. 
WaitCursor
) 

576 
self
. 
userinterface
. 
	`setCursor
( 
cursor
) 

577 
self
. 
userinterface
. 
back
. 
	`setEnabled
( 
allowed
and 
self
. 
allowed_go_backward
) 

578 
self
. 
userinterface
. 
next
. 
	`setEnabled
( 
allowed
and 
self
. 
allowed_go_forward
) 

579 
self
. 
allowed_change_step
= 
allowed


581 
	}


581 def 
	$allow_go_backward
( 
self
, 
allowed
) : 

582 
self
. 
userinterface
. 
back
. 
	`setEnabled
( 
allowed
and 
self
. 
allowed_change_step
) 

583 
self
. 
allowed_go_backward
= 
allowed


585 
	}


585 def 
	$allow_go_forward
( 
self
, 
allowed
) : 

586 
self
. 
userinterface
. 
next
. 
	`setEnabled
( 
allowed
and 
self
. 
allowed_change_step
) 

587 
self
. 
allowed_go_forward
= 
allowed


589 
	}


589 def 
	$dbfilter_handle_status
( 
self
) : 

594 if not 
self
. 
dbfilter_status
or 
self
. 
current_page
is None : 

597 
syslog
. 
	`syslog
( 'dbfilter_handle_status: %s' % 
	`str
( 
self
. 
dbfilter_status
) ) 

600 
text
= ( '%s failed with exit code %s. Further information may be ' 

604 ( 
self
. 
dbfilter_status
[ 0 ] , 
self
. 
dbfilter_status
[ 1 ] ) ) 

607 
answer
= 
QMessageBox
. 
	`warning
( 
self
. 
userinterface
, 

608 '%s crashed' % 
self
. 
dbfilter_status
[ 0 ] , 

609 
text
, 
QMessageBox
. 
Retry
, 

610 
QMessageBox
. 
Ignore
, 
QMessageBox
. 
Close
) 

611 
self
. 
dbfilter_status
= None 

612 
syslog
. 
	`syslog
( 'dbfilter_handle_status: answer %d' % 
answer
) 

613 if 
answer
== 
QMessageBox
. 
Ignore
: 

615 elif 
answer
== 
QMessageBox
. 
Close
: 

616 
self
. 
	`quit
( ) 

618 
step
= 
self
. 
	`step_name
( 
self
. 
	`get_current_page
( ) ) 

619 if 
	`str
( 
step
) . 
	`startswith
( "stepPart" ) : 

620 
self
. 
	`set_current_page
( 
WIDGET_STACK_STEPS
[ "stepPartAuto" ] ) 

623 
	}


623 def 
	$show_intro
( 
self
) : 

626 
intro
= 
os
. 
path
. 
	`join
( 
PATH
, 'intro.txt' ) 

628 if 
os
. 
path
. 
	`isfile
( 
intro
) : 

629 
intro_file
= 
	`open
( 
intro
) 

630 
text
= "" 

631 for 
line
in 
intro_file
: 

632 
text
= 
text
+ 
line
+ "<br>" 

633 
self
. 
userinterface
. 
introLabel
. 
	`setText
( 
text
) 

634 
intro_file
. 
	`close
( ) 

639 
	}


639 def 
	$step_name
( 
self
, 
step_index
) : 

640 if 
step_index
< 0 : 

641 
step_index
= 0 

642 return 
	`str
( 
self
. 
userinterface
. 
widgetStack
. 
	`widget
( 
step_index
) . 
	`objectName
( ) ) 

644 
	}


644 def 
	$set_page
( 
self
, 
n
) : 

645 
self
. 
	`run_automation_error_cmd
( ) 

646 
self
. 
userinterface
. 
	`show
( ) 

647 if 
n
== 'Language' : 

648 
self
. 
	`set_current_page
( 
WIDGET_STACK_STEPS
[ "stepLanguage" ] ) 

649 elif 
n
== 'ConsoleSetup' : 

650 
self
. 
	`set_current_page
( 
WIDGET_STACK_STEPS
[ "stepKeyboardConf" ] ) 

651 elif 
n
== 'Timezone' : 

652 
self
. 
	`set_current_page
( 
WIDGET_STACK_STEPS
[ "stepLocation" ] ) 

653 elif 
n
== 'Partman' : 

658 elif 
n
== 'UserSetup' : 

659 
self
. 
	`set_current_page
( 
WIDGET_STACK_STEPS
[ "stepUserInfo" ] ) 

660 elif 
n
== 'Summary' : 

661 
self
. 
	`set_current_page
( 
WIDGET_STACK_STEPS
[ "stepReady" ] ) 

662 
self
. 
userinterface
. 
next
. 
	`setText
( 
self
. 
	`get_string
( 'install_button' ) . 
	`replace
( '_' , '&' , 1 ) ) 

663 
self
. 
userinterface
. 
next
. 
	`setIcon
( 
self
. 
applyIcon
) 

665 print >> 
sys
. 
stderr
, 'No page found for %s' % 
n


668 if not 
self
. 
first_seen_page
: 

669 
self
. 
first_seen_page
= 
n


670 if 
self
. 
first_seen_page
== 
self
. 
pages
[ 
self
. 
pagesindex
] . 
__name__
: 

671 
self
. 
	`allow_go_backward
( False ) 

673 
self
. 
	`allow_go_backward
( True ) 

675 
	}


675 def 
	$set_current_page
( 
self
, 
current
) : 

676 
widget
= 
self
. 
userinterface
. 
widgetStack
. 
	`widget
( 
current
) 

677 if 
self
. 
userinterface
. 
widgetStack
. 
	`currentWidget
( ) == 
widget
: 

680 
self
. 
	`on_steps_switch_page
( 
current
) 

682 
self
. 
userinterface
. 
widgetStack
. 
	`setCurrentWidget
( 
widget
) 

683 
self
. 
	`on_steps_switch_page
( 
current
) 

685 
	}


685 def 
	$progress_loop
( 
self
) : 

688 
syslog
. 
	`syslog
( 'progress_loop()' ) 

690 
self
. 
current_page
= None 

692 
self
. 
	`debconf_progress_start
( 

693 0 , 100 , 
self
. 
	`get_string
( 'ubiquity/install/title' ) ) 

694 
self
. 
	`debconf_progress_region
( 0 , 15 ) 

696 
dbfilter
= 
partman_commit
. 
	`PartmanCommit
( 
self
) 

697 if 
dbfilter
. 
	`run_command
( 
auto_process
= True ) != 0 : 

698 while 
self
. 
progress_position
. 
	`depth
( ) != 0 : 

699 
self
. 
	`debconf_progress_stop
( ) 

700 
self
. 
progressDialogue
. 
	`hide
( ) 

701 
self
. 
	`return_to_partitioning
( ) 

705 
self
. 
installing_no_return
= True 

707 
self
. 
	`debconf_progress_region
( 15 , 100 ) 

709 
dbfilter
= 
install
. 
	`Install
( 
self
) 

710 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

711 if 
ret
!= 0 : 

712 
self
. 
installing
= False 

713 if 
ret
== 3 : 

715 
sys
. 
	`exit
( 
ret
) 

716 elif ( 
os
. 
	`WIFSIGNALED
( 
ret
) and 

717 
os
. 
	`WTERMSIG
( 
ret
) in ( 
signal
. 
SIGINT
, 
signal
. 
SIGKILL
, 

718 
signal
. 
SIGTERM
) ) : 

719 
sys
. 
	`exit
( 
ret
) 

720 elif 
os
. 
path
. 
	`exists
( '/var/lib/ubiquity/install.trace' ) : 

721 
tbfile
= 
	`open
( '/var/lib/ubiquity/install.trace' ) 

722 
realtb
= 
tbfile
. 
	`read
( ) 

723 
tbfile
. 
	`close
( ) 

724 raise 
RuntimeError
, ( "Install failed with exit code %s\n%s" % 

725 ( 
ret
, 
realtb
) ) 

727 raise 
RuntimeError
, ( "Install failed with exit code %s; see " 

728 "/var/log/syslog" % 
ret
) 

730 while 
self
. 
progress_position
. 
	`depth
( ) != 0 : 

731 
self
. 
	`debconf_progress_stop
( ) 

734 
self
. 
progressDialogue
. 
	`hide
( ) 

736 
self
. 
installing
= False 

737 
quitText
= '<qt>%s</qt>' % 
self
. 
	`get_string
( "finished_label" ) 

738 
rebootButtonText
= 
self
. 
	`get_string
( "reboot_button" ) 

739 
quitButtonText
= 
self
. 
	`get_string
( "quit_button" ) 

740 
titleText
= 
self
. 
	`get_string
( "finished_dialog" ) 

744 
self
. 
	`run_success_cmd
( ) 

745 if not 
self
. 
	`get_reboot_seen
( ) : 

746 if 'UBIQUITY_ONLY' in 
os
. 
environ
: 

747 
quitText
= 
self
. 
	`get_string
( 'ubiquity/finished_restart_only' ) 

748 
messageBox
= 
	`QMessageBox
( 
QMessageBox
. 
Question
, 
titleText
, 
quitText
, 
QMessageBox
. 
NoButton
, 
self
. 
userinterface
) 

749 
messageBox
. 
	`addButton
( 
rebootButtonText
, 
QMessageBox
. 
AcceptRole
) 

750 if not 'UBIQUITY_ONLY' in 
os
. 
environ
: 

751 
messageBox
. 
	`addButton
( 
quitButtonText
, 
QMessageBox
. 
RejectRole
) 

752 
quitAnswer
= 
messageBox
. 
	`exec_
( ) 

754 if 
quitAnswer
== 0 : 

755 
self
. 
	`reboot
( ) 

756 elif 
self
. 
	`get_reboot
( ) : 

757 
self
. 
	`reboot
( ) 

759 
	}


759 def 
	$reboot
( 
self
, * 
args
) : 

762 
self
. 
returncode
= 10 

763 
self
. 
	`quit
( ) 

765 
	}


765 def 
	$do_reboot
( 
self
) : 

768 if 'DESKTOP_SESSION' in 
os
. 
environ
: 

769 
	`execute
( 'qdbus' , 'org.kde.ksmserver' , '/KSMServer' , 'org.kde.KSMServerInterface.logout' , 

774 
	`execute
( 'reboot' ) 

776 
	}


776 def 
	$quit
( 
self
) : 

780 
self
. 
current_page
= None 

781 if 
self
. 
dbfilter
is not None : 

782 
self
. 
dbfilter
. 
	`cancel_handler
( ) 

783 
self
. 
app
. 
	`exit
( ) 

785 
	}


785 def 
	$on_quit_clicked
( 
self
) : 

786 
warning_dialog_label
= 
self
. 
	`get_string
( "warning_dialog_label" ) 

787 
abortTitle
= 
self
. 
	`get_string
( "warning_dialog" ) 

788 
continueButtonText
= 
self
. 
	`get_string
( "continue" ) 

789 
response
= 
QMessageBox
. 
	`question
( 
self
. 
userinterface
, 
abortTitle
, 
warning_dialog_label
, 
abortTitle
, 
continueButtonText
) 

790 if 
response
== 0 : 

791 
self
. 
current_page
= None 

792 
self
. 
	`quit
( ) 

797 
	}


797 def 
	$info_loop
( 
self
, 
widget
) : 

800 if ( 
widget
is not None and 
widget
. 
	`objectName
( ) == 'fullname' and 

801 not 
self
. 
username_edited
) : 

802 
self
. 
userinterface
. 
username
. 
	`blockSignals
( True ) 

803 
new_username
= 
	`unicode
( 
widget
. 
	`text
( ) ) . 
	`split
( ' ' ) [ 0 ] 

804 
new_username
= 
new_username
. 
	`encode
( 'ascii' , 'ascii_transliterate' ) 

805 
new_username
= 
new_username
. 
	`lower
( ) 

806 
self
. 
userinterface
. 
username
. 
	`setText
( 
new_username
) 

807 
self
. 
userinterface
. 
username
. 
	`blockSignals
( False ) 

808 elif ( 
widget
is not None and 
widget
. 
	`objectName
( ) == 'username' and 

809 not 
self
. 
hostname_edited
) : 

810 if 
self
. 
laptop
: 

811 
hostname_suffix
= '-laptop' 

813 
hostname_suffix
= '-desktop' 

814 
self
. 
userinterface
. 
hostname
. 
	`blockSignals
( True ) 

815 
self
. 
userinterface
. 
hostname
. 
	`setText
( 
	`unicode
( 
widget
. 
	`text
( ) ) + 
hostname_suffix
) 

816 
self
. 
userinterface
. 
hostname
. 
	`blockSignals
( False ) 

818 
complete
= True 

819 for 
name
in ( 'username' , 'hostname' ) : 

820 if 
	`getattr
( 
self
. 
userinterface
, 
name
) . 
	`text
( ) == '' : 

821 
complete
= False 

822 if not 
self
. 
allow_password_empty
: 

823 for 
name
in ( 'password' , 'verified_password' ) : 

824 if 
	`getattr
( 
self
. 
userinterface
, 
name
) . 
	`text
( ) == '' : 

825 
complete
= False 

826 
self
. 
	`allow_go_forward
( 
complete
) 

828 
	}


828 def 
	$on_username_insert_text
( 
self
) : 

829 
self
. 
username_edited
= ( 
self
. 
userinterface
. 
username
. 
	`text
( ) != '' ) 

831 
	}


831 def 
	$on_hostname_insert_text
( 
self
) : 

832 
self
. 
hostname_edited
= ( 
self
. 
userinterface
. 
hostname
. 
	`text
( ) != '' ) 

834 
	}


834 def 
	$on_next_clicked
( 
self
) : 

837 if not 
self
. 
allowed_change_step
or not 
self
. 
allowed_go_forward
: 

840 
self
. 
	`allow_change_step
( False ) 

842 
step
= 
self
. 
	`step_name
( 
self
. 
	`get_current_page
( ) ) 

848 if 
step
== "stepPartAuto" : 

849 
self
. 
userinterface
. 
part_advanced_warning_message
. 
	`clear
( ) 

850 
self
. 
userinterface
. 
part_advanced_warning_hbox
. 
	`hide
( ) 

851 if 
step
in ( "stepPartAuto" , "stepPartAdvanced" ) : 

852 
self
. 
userinterface
. 
fullname_error_image
. 
	`hide
( ) 

853 
self
. 
userinterface
. 
fullname_error_reason
. 
	`hide
( ) 

854 
self
. 
userinterface
. 
username_error_image
. 
	`hide
( ) 

855 
self
. 
userinterface
. 
username_error_reason
. 
	`hide
( ) 

856 
self
. 
userinterface
. 
password_error_image
. 
	`hide
( ) 

857 
self
. 
userinterface
. 
password_error_reason
. 
	`hide
( ) 

858 
self
. 
userinterface
. 
hostname_error_image
. 
	`hide
( ) 

859 
self
. 
userinterface
. 
hostname_error_reason
. 
	`hide
( ) 

861 if 
self
. 
dbfilter
is not None : 

862 
self
. 
dbfilter
. 
	`ok_handler
( ) 

866 
self
. 
app
. 
	`exit
( ) 

868 
	}


868 def 
	$on_keyboard_layout_selected
( 
self
) : 

869 if 
	`isinstance
( 
self
. 
dbfilter
, 
console_setup
. 
ConsoleSetup
) : 

870 
layout
= 
self
. 
	`get_keyboard
( ) 

871 if 
layout
is not None : 

872 
self
. 
current_layout
= 
layout


873 
self
. 
dbfilter
. 
	`change_layout
( 
layout
) 

875 
	}


875 def 
	$on_keyboard_variant_selected
( 
self
) : 

876 if 
	`isinstance
( 
self
. 
dbfilter
, 
console_setup
. 
ConsoleSetup
) : 

877 
layout
= 
self
. 
	`get_keyboard
( ) 

878 
variant
= 
self
. 
	`get_keyboard_variant
( ) 

879 if 
layout
is not None and 
variant
is not None : 

880 
self
. 
dbfilter
. 
	`apply_keyboard
( 
layout
, 
variant
) 

882 
	}


882 def 
	$process_step
( 
self
) : 

886 
step_num
= 
self
. 
	`get_current_page
( ) 

887 
step
= 
self
. 
	`step_name
( 
step_num
) 

888 
syslog
. 
	`syslog
( 'Step_before = %s' % 
step
) 

890 if 
step
. 
	`startswith
( "stepPart" ) : 

891 
self
. 
previous_partitioning_page
= 
step_num


894 elif 
step
== "stepLanguage" : 

895 
self
. 
	`translate_widgets
( ) 

897 elif 
step
== "stepPartAuto" : 

898 
self
. 
	`process_autopartitioning
( ) 

900 elif 
step
== "stepPartAdvanced" : 

902 
self
. 
	`info_loop
( None ) 

906 elif 
step
== "stepUserInfo" : 

907 
self
. 
	`process_identification
( ) 

909 
	}


909 def 
	$process_identification
( 
self
) : 

912 
error_msg
= [ ] 

913 
error
= 0 

918 
hostname
= 
self
. 
userinterface
. 
hostname
. 
	`text
( ) 

919 for 
result
in 
validation
. 
	`check_hostname
( 
	`unicode
( 
hostname
) ) : 

920 if 
result
== 
validation
. 
HOSTNAME_LENGTH
: 

921 
error_msg
. 
	`append
( "The hostname must be between 1 and 63 characters long." ) 

922 elif 
result
== 
validation
. 
HOSTNAME_BADCHAR
: 

923 
error_msg
. 
	`append
( "The hostname may only contain letters, digits, hyphens, and dots." ) 

924 elif 
result
== 
validation
. 
HOSTNAME_BADHYPHEN
: 

925 
error_msg
. 
	`append
( "The hostname may not start or end with a hyphen." ) 

926 elif 
result
== 
validation
. 
HOSTNAME_BADDOTS
: 

927 
error_msg
. 
	`append
( 'The hostname may not start or end with a dot, or contain the sequence "..".' ) 

930 if 
	`len
( 
error_msg
) != 0 : 

931 
self
. 
userinterface
. 
hostname_error_reason
. 
	`setText
( "\n" . 
	`join
( 
error_msg
) ) 

932 
self
. 
userinterface
. 
hostname_error_reason
. 
	`show
( ) 

933 
self
. 
userinterface
. 
hostname_error_image
. 
	`show
( ) 

934 
self
. 
stay_on_page
= True 

936 
self
. 
stay_on_page
= False 

938 
	}


938 def 
	$process_autopartitioning
( 
self
) : 

941 
self
. 
app
. 
	`processEvents
( ) 

951 
	}


951 def 
	$on_back_clicked
( 
self
) : 

954 if not 
self
. 
allowed_change_step
: 

957 
self
. 
	`allow_change_step
( False ) 

959 
self
. 
backup
= True 

960 
self
. 
stay_on_page
= False 

963 
self
. 
	`allow_go_forward
( True ) 

965 
step
= 
self
. 
	`step_name
( 
self
. 
	`get_current_page
( ) ) 

966 
self
. 
userinterface
. 
	`setCursor
( 
	`QCursor
( 
Qt
. 
WaitCursor
) ) 

968 
changed_page
= False 

970 if 
	`str
( 
step
) == "stepReady" : 

971 
self
. 
userinterface
. 
next
. 
	`setText
( 
self
. 
	`get_string
( "next" ) . 
	`replace
( '_' , '&' , 1 ) ) 

972 
self
. 
userinterface
. 
next
. 
	`setIcon
( 
self
. 
forwardIcon
) 

973 
self
. 
	`translate_widget
( 
self
. 
userinterface
. 
next
, 
self
. 
locale
) 

975 if 
self
. 
dbfilter
is not None : 

976 
self
. 
dbfilter
. 
	`cancel_handler
( ) 

980 
self
. 
app
. 
	`exit
( ) 

982 
	}


982 def 
	$selected_language
( 
self
) : 

983 
selection
= 
self
. 
userinterface
. 
language_treeview
. 
	`selectedItems
( ) 

984 if 
	`len
( 
selection
) == 1 : 

985 
value
= 
	`unicode
( 
selection
[ 0 ] . 
	`text
( ) ) 

986 return 
self
. 
language_choice_map
[ 
value
] [ 1 ] 

990 
	}


990 def 
	$on_language_treeview_selection_changed
( 
self
) : 

991 
lang
= 
self
. 
	`selected_language
( ) 

992 if 
lang
: 

994 
lang
= 
lang
. 
	`split
( '.' ) [ 0 ] . 
	`lower
( ) 

995 for 
widget
in ( 
self
. 
userinterface
, 
self
. 
userinterface
. 
welcome_heading_label
, 
self
. 
userinterface
. 
welcome_text_label
, 
self
. 
userinterface
. 
oem_id_label
, 
self
. 
userinterface
. 
release_notes_label
, 
self
. 
userinterface
. 
release_notes_frame
, 
self
. 
userinterface
. 
next
, 
self
. 
userinterface
. 
back
, 
self
. 
userinterface
. 
quit
, 
self
. 
userinterface
. 
step_label
) : 

996 
self
. 
	`translate_widget
( 
widget
, 
lang
) 

997 
self
. 
	`set_layout_direction
( 
lang
) 

999 
	}


999 def 
	$on_steps_switch_page
( 
self
, 
newPageID
) : 

1000 
self
. 
current_page
= 
newPageID


1001 
self
. 
	`translate_widget
( 
self
. 
userinterface
. 
step_label
, 
self
. 
locale
) 

1002 
syslog
. 
	`syslog
( 'switched to page %s' % 
self
. 
	`step_name
( 
newPageID
) ) 

1004 
	}


1004 def 
	$watch_debconf_fd
( 
self
, 
from_debconf
, 
process_input
) : 

1005 
self
. 
debconf_fd_counter
= 0 

1006 
self
. 
socketNotifierRead
= 
	`QSocketNotifier
( 
from_debconf
, 
QSocketNotifier
. 
Read
, 
self
. 
app
) 

1007 
self
. 
app
. 
	`connect
( 
self
. 
socketNotifierRead
, 
	`SIGNAL
( "activated(int)" ) , 
self
. 
watch_debconf_fd_helper_read
) 

1009 
self
. 
socketNotifierWrite
= 
	`QSocketNotifier
( 
from_debconf
, 
QSocketNotifier
. 
Write
, 
self
. 
app
) 

1010 
self
. 
app
. 
	`connect
( 
self
. 
socketNotifierWrite
, 
	`SIGNAL
( "activated(int)" ) , 
self
. 
watch_debconf_fd_helper_write
) 

1012 
self
. 
socketNotifierException
= 
	`QSocketNotifier
( 
from_debconf
, 
QSocketNotifier
. 
Exception
, 
self
. 
app
) 

1013 
self
. 
app
. 
	`connect
( 
self
. 
socketNotifierException
, 
	`SIGNAL
( "activated(int)" ) , 
self
. 
watch_debconf_fd_helper_exception
) 

1015 
self
. 
debconf_callbacks
[ 
from_debconf
] = 
process_input


1016 
self
. 
current_debconf_fd
= 
from_debconf


1018 
	}


1018 def 
	$watch_debconf_fd_helper_read
( 
self
, 
source
) : 

1019 
self
. 
debconf_fd_counter
+= 1 

1020 
debconf_condition
= 0 

1021 
debconf_condition
|= 
filteredcommand
. 
DEBCONF_IO_IN


1022 
self
. 
debconf_callbacks
[ 
source
] ( 
source
, 
debconf_condition
) 

1024 
	}


1024 def 
	$watch_debconf_fd_helper_write
( 
self
, 
source
) : 

1025 
debconf_condition
= 0 

1026 
debconf_condition
|= 
filteredcommand
. 
DEBCONF_IO_OUT


1027 
self
. 
debconf_callbacks
[ 
source
] ( 
source
, 
debconf_condition
) 

1029 
	}


1029 def 
	$watch_debconf_fd_helper_exception
( 
self
, 
source
) : 

1030 
debconf_condition
= 0 

1031 
debconf_condition
|= 
filteredcommand
. 
DEBCONF_IO_ERR


1032 
self
. 
debconf_callbacks
[ 
source
] ( 
source
, 
debconf_condition
) 

1034 
	}


1034 def 
	$debconf_progress_start
( 
self
, 
progress_min
, 
progress_max
, 
progress_title
) : 

1035 if 
progress_title
is None : 

1036 
progress_title
= "" 

1037 
total_steps
= 
progress_max
- 
progress_min


1038 if 
self
. 
progressDialogue
is None : 

1039 
skipText
= 
self
. 
	`get_string
( "progress_cancel_button" ) 

1040 
self
. 
progressDialogue
= 
	`QProgressDialog
( '' , 
skipText
, 0 , 
total_steps
, 
self
. 
userinterface
) 

1041 
self
. 
progressDialogue
. 
	`setWindowModality
( 
Qt
. 
WindowModal
) ; 

1042 
self
. 
cancelButton
= 
	`QPushButton
( 
skipText
, 
self
. 
progressDialogue
) 

1043 
self
. 
progressDialogue
. 
	`setCancelButton
( 
self
. 
cancelButton
) 

1046 
self
. 
cancelButton
. 
	`hide
( ) 

1047 elif 
self
. 
progress_position
. 
	`depth
( ) == 0 : 

1048 
self
. 
progressDialogue
. 
	`setMaximum
( 
total_steps
) 

1050 
self
. 
progress_position
. 
	`start
( 
progress_min
, 
progress_max
, 

1051 
progress_title
) 

1052 
self
. 
progressDialogue
. 
	`setWindowTitle
( 
progress_title
) 

1053 
self
. 
	`debconf_progress_set
( 0 ) 

1054 
self
. 
progressDialogue
. 
	`setLabel
( 
	`QLabel
( '' ) ) 

1055 
self
. 
progressDialogue
. 
	`show
( ) 

1057 
	}


1057 def 
	$debconf_progress_set
( 
self
, 
progress_val
) : 

1058 
self
. 
progress_cancelled
= 
self
. 
progressDialogue
. 
	`wasCanceled
( ) 

1059 if 
self
. 
progress_cancelled
: 

1061 
self
. 
progress_position
. 
	`set
( 
progress_val
) 

1062 
fraction
= 
self
. 
progress_position
. 
	`fraction
( ) 

1063 
self
. 
progressDialogue
. 
	`setValue
( 

1064 
	`int
( 
fraction
* 
self
. 
progressDialogue
. 
	`maximum
( ) ) ) 

1067 
	}


1067 def 
	$debconf_progress_step
( 
self
, 
progress_inc
) : 

1068 
self
. 
progress_cancelled
= 
self
. 
progressDialogue
. 
	`wasCanceled
( ) 

1069 if 
self
. 
progress_cancelled
: 

1071 
self
. 
progress_position
. 
	`step
( 
progress_inc
) 

1072 
fraction
= 
self
. 
progress_position
. 
	`fraction
( ) 

1073 
self
. 
progressDialogue
. 
	`setValue
( 

1074 
	`int
( 
fraction
* 
self
. 
progressDialogue
. 
	`maximum
( ) ) ) 

1077 
	}


1077 def 
	$debconf_progress_info
( 
self
, 
progress_info
) : 

1078 
self
. 
progress_cancelled
= 
self
. 
progressDialogue
. 
	`wasCanceled
( ) 

1079 if 
self
. 
progress_cancelled
: 

1081 
self
. 
progressDialogue
. 
	`setLabel
( 
	`QLabel
( 
progress_info
) ) 

1084 
	}


1084 def 
	$debconf_progress_stop
( 
self
) : 

1085 
self
. 
progress_cancelled
= False 

1086 
self
. 
progress_position
. 
	`stop
( ) 

1087 if 
self
. 
progress_position
. 
	`depth
( ) == 0 : 

1088 
self
. 
progressDialogue
. 
	`reset
( ) # also hides dialog 

1090 
self
. 
progressDialogue
. 
	`setWindowTitle
( 
self
. 
progress_position
. 
	`title
( ) ) 

1092 
	}


1092 def 
	$debconf_progress_region
( 
self
, 
region_start
, 
region_end
) : 

1093 
self
. 
progress_position
. 
	`set_region
( 
region_start
, 
region_end
) 

1095 
	}


1095 def 
	$debconf_progress_cancellable
( 
self
, 
cancellable
) : 

1096 if 
cancellable
: 

1097 
self
. 
cancelButton
. 
	`show
( ) 

1099 
self
. 
cancelButton
. 
	`hide
( ) 

1100 
self
. 
progress_cancelled
= False 

1102 
	}


1102 def 
	$on_progress_cancel_button_clicked
( 
self
, 
button
) : 

1103 
self
. 
progress_cancelled
= True 

1105 
	}


1105 def 
	$debconffilter_done
( 
self
, 
dbfilter
) : 

1108 
self
. 
app
. 
	`disconnect
( 
self
. 
socketNotifierRead
, 
	`SIGNAL
( "activated(int)" ) , 
self
. 
watch_debconf_fd_helper_read
) 

1109 if 
BaseFrontend
. 
	`debconffilter_done
( 
self
, 
dbfilter
) : 

1110 
self
. 
app
. 
	`exit
( ) 

1115 
	}


1115 def 
	$set_language_choices
( 
self
, 
choices
, 
choice_map
) : 

1116 
BaseFrontend
. 
	`set_language_choices
( 
self
, 
choices
, 
choice_map
) 

1117 
self
. 
userinterface
. 
language_treeview
. 
	`clear
( ) 

1118 for 
choice
in 
choices
: 

1119 
	`QListWidgetItem
( 
	`QString
( 
	`unicode
( 
choice
) ) , 
self
. 
userinterface
. 
language_treeview
) 

1121 
	}


1121 def 
	$set_language
( 
self
, 
language
) : 

1122 
counter
= 0 

1123 
max
= 
self
. 
userinterface
. 
language_treeview
. 
	`count
( ) 

1124 while 
counter
< 
max
: 

1125 
selection
= 
self
. 
userinterface
. 
language_treeview
. 
	`item
( 
counter
) 

1126 if 
selection
is None : 

1127 
value
= "C" 

1129 
value
= 
	`unicode
( 
selection
. 
	`text
( ) ) 

1130 if 
value
== 
language
: 

1131 
selection
. 
	`setSelected
( True ) 

1132 
self
. 
userinterface
. 
language_treeview
. 
	`scrollToItem
( 
selection
) 

1134 
counter
+= 1 

1136 
	}


1136 def 
	$get_language
( 
self
) : 

1137 
items
= 
self
. 
userinterface
. 
language_treeview
. 
	`selectedItems
( ) 

1138 if 
	`len
( 
items
) == 1 : 

1139 
value
= 
	`unicode
( 
items
[ 0 ] . 
	`text
( ) ) 

1140 return 
self
. 
language_choice_map
[ 
value
] [ 1 ] 

1144 
	}


1144 def 
	$get_oem_id
( 
self
) : 

1145 return 
	`unicode
( 
self
. 
userinterface
. 
oem_id_entry
. 
	`text
( ) ) 

1147 
	}


1147 def 
	$set_timezone
( 
self
, 
timezone
) : 

1148 
self
. 
tzmap
. 
	`set_timezone
( 
timezone
) 

1150 
	}


1150 def 
	$get_timezone
( 
self
) : 

1151 return 
self
. 
tzmap
. 
	`get_timezone
( ) 

1153 
	}


1153 def 
	$set_keyboard_choices
( 
self
, 
choices
) : 

1154 
self
. 
userinterface
. 
keyboardlayoutview
. 
	`clear
( ) 

1155 for 
choice
in 
	`sorted
( 
choices
) : 

1156 
	`QListWidgetItem
( 
	`QString
( 
	`unicode
( 
choice
) ) , 
self
. 
userinterface
. 
keyboardlayoutview
) 

1158 if 
self
. 
current_layout
is not None : 

1159 
self
. 
	`set_keyboard
( 
self
. 
current_layout
) 

1161 
	}


1161 def 
	$set_keyboard
( 
self
, 
layout
) : 

1162 
BaseFrontend
. 
	`set_keyboard
( 
self
, 
layout
) 

1163 
counter
= 0 

1164 
max
= 
self
. 
userinterface
. 
keyboardlayoutview
. 
	`count
( ) 

1165 while 
counter
< 
max
: 

1166 
selection
= 
self
. 
userinterface
. 
keyboardlayoutview
. 
	`item
( 
counter
) 

1167 if 
	`unicode
( 
selection
. 
	`text
( ) ) == 
layout
: 

1168 
selection
. 
	`setSelected
( True ) 

1169 
self
. 
userinterface
. 
keyboardlayoutview
. 
	`scrollToItem
( 
selection
) 

1171 
counter
+= 1 

1173 
	}


1173 def 
	$get_keyboard
( 
self
) : 

1174 
items
= 
self
. 
userinterface
. 
keyboardlayoutview
. 
	`selectedItems
( ) 

1175 if 
	`len
( 
items
) == 1 : 

1176 return 
	`unicode
( 
items
[ 0 ] . 
	`text
( ) ) 

1180 
	}


1180 def 
	$set_keyboard_variant_choices
( 
self
, 
choices
) : 

1181 
self
. 
userinterface
. 
keyboardvariantview
. 
	`clear
( ) 

1182 for 
choice
in 
	`sorted
( 
choices
) : 

1183 
	`QListWidgetItem
( 
	`QString
( 
	`unicode
( 
choice
) ) , 
self
. 
userinterface
. 
keyboardvariantview
) 

1185 
	}


1185 def 
	$set_keyboard_variant
( 
self
, 
variant
) : 

1186 
counter
= 0 

1187 
max
= 
self
. 
userinterface
. 
keyboardvariantview
. 
	`count
( ) 

1188 while 
counter
< 
max
: 

1189 
selection
= 
self
. 
userinterface
. 
keyboardvariantview
. 
	`item
( 
counter
) 

1190 if 
	`unicode
( 
selection
. 
	`text
( ) ) == 
variant
: 

1191 
selection
. 
	`setSelected
( True ) 

1192 
self
. 
userinterface
. 
keyboardvariantview
. 
	`scrollToItem
( 
selection
) 

1194 
counter
+= 1 

1196 
	}


1196 def 
	$get_keyboard_variant
( 
self
) : 

1197 
items
= 
self
. 
userinterface
. 
keyboardvariantview
. 
	`selectedItems
( ) 

1198 if 
	`len
( 
items
) == 1 : 

1199 return 
	`unicode
( 
items
[ 0 ] . 
	`text
( ) ) 

1204 
	}


1204 def 
	$set_disk_layout
( 
self
, 
layout
) : 

1205 
self
. 
disk_layout
= 
layout


1207 
	}


1207 def 
	$set_autopartition_choices
( 
self
, 
choices
, 
extra_options
, 

1208 
resize_choice
, 
manual_choice
, 

1209 
biggest_free_choice
) : 

1210 
BaseFrontend
. 
	`set_autopartition_choices
( 
self
, 
choices
, 
extra_options
, 

1211 
resize_choice
, 
manual_choice
, 

1212 
biggest_free_choice
) 

1214 
children
= 
self
. 
userinterface
. 
autopartition_frame
. 
	`children
( ) 

1215 for 
child
in 
children
: 

1216 if 
	`isinstance
( 
child
, 
QVBoxLayout
) or 
	`isinstance
( 
child
, 
QButtonGroup
) : 

1219 
self
. 
autopartition_vbox
. 
	`removeWidget
( 
child
) 

1220 
child
. 
	`hide
( ) 

1222 
	`regain_privileges
( ) 

1223 
pserv
= 
parted_server
. 
	`PartedServer
( ) 

1225 
disks
= { } #dictionary dev -> list of partitions 

1226 for 
disk
in 
pserv
. 
	`disks
( ) : 

1227 
d
= 
disks
[ 
disk
] = [ ] 

1228 
pserv
. 
	`select_disk
( 
disk
) 

1229 for 
partition
in 
pserv
. 
	`partitions
( ) : 

1230 
d
. 
	`append
( 
partition
) 

1233 
	`drop_privileges
( ) 

1236 
bFrame
= 
self
. 
userinterface
. 
autopart_bar_frame


1239 def 
	$_on_extra_toggle
( 
choice
, 
wid1
, 
wid2
) : 

1240 def 
	$slot
( 
enable
) : 

1241 if 
wid1
: 

1242 
wid1
. 
	`setVisible
( 
enable
) 

1243 if 
wid2
: 

1244 
wid2
. 
	`setVisible
( 
enable
) 

1245 
	}


1245 return 
slot


1248 def 
	$_on_choice_toggle
( 
choice
, 
extra_frame
, 
bar_frame
) : 

1249 def 
	$slot
( 
enable
) : 

1250 
bar_frame
. 
	`setVisible
( 
enable
) 

1251 if 
extra_frame
: 

1252 
extra_frame
. 
	`setEnabled
( 
enable
) 

1253 
	}


1253 return 
slot


1256 def 
	$partitionResized
( 
path
, 
size
) : 

1257 print 
path
, 
size


1258 
self
. 
resizePath
= 
path


1259 
self
. 
resizeSize
= 
size


1261 
	}


1261 
firstbutton
= None 

1262 
idCounter
= 0 

1263 for 
choice
in 
choices
: 

1264 
button
= 
	`QRadioButton
( 
choice
, 
self
. 
userinterface
. 
autopartition_frame
) 

1265 
self
. 
autopartition_buttongroup
. 
	`addButton
( 
button
, 
idCounter
) 

1266 
id
= 
self
. 
autopartition_buttongroup
. 
	`id
( 
button
) 

1270 
self
. 
autopartition_buttongroup_texts
[ 
id
] = 
choice


1271 if 
firstbutton
is None : 

1272 
firstbutton
= 
button


1273 
self
. 
autopartition_vbox
. 
	`addWidget
( 
button
) 

1275 
before_frame
= None 

1276 
after_frame
= None 

1280 
bar_frame
= 
	`QFrame
( 
bFrame
) 

1281 
bFrame
. 
	`layout
( ) . 
	`addWidget
( 
bar_frame
) 

1282 
layout
= 
	`QVBoxLayout
( 
bar_frame
) 

1283 
bar_frame
. 
	`setVisible
( False ) 

1286 
frame
= None 

1289 if 
choice
in 
extra_options
: 

1291 
dev
= None 

1293 
frame
= 
	`QFrame
( 
self
. 
userinterface
. 
autopartition_frame
) 

1294 
frame
. 
	`setEnabled
( False ) 

1297 
indent_hbox
= 
	`QHBoxLayout
( ) 

1298 
self
. 
autopartition_vbox
. 
	`addLayout
( 
indent_hbox
) 

1299 
indent_hbox
. 
	`addSpacing
( 10 ) 

1300 
indent_hbox
. 
	`addWidget
( 
frame
) 

1302 
before_label
= 
self
. 
	`get_string
( 'ubiquity/text/partition_layout_before' ) 

1303 
after_label
= 
self
. 
	`get_string
( 'ubiquity/text/partition_layout_after' ) 

1304 if 
choice
== 
biggest_free_choice
: 

1305 
biggest_free_id
= 
extra_options
[ 
choice
] 

1306 
dev
= None 

1307 for 
disk
in 
disks
: 

1308 for 
p
in 
disks
[ 
disk
] : 

1309 if 
p
[ 1 ] == 
biggest_free_id
: 

1310 
dev
= 
disk


1312 if 
dev
: 

1314 if 
dev
: 

1315 
before_frame
= 
	`QGroupBox
( 
before_label
, 
bar_frame
) 

1316 
before_frame
. 
	`setLayout
( 
	`QVBoxLayout
( ) ) 

1317 
layout
. 
	`addWidget
( 
before_frame
) 

1319 
before_bar
= 
	`PartitionsBar
( 
before_frame
) 

1320 
before_frame
. 
	`layout
( ) . 
	`addWidget
( 
before_bar
) 

1322 
after_frame
= 
	`QGroupBox
( 
after_label
, 
bar_frame
) 

1323 
after_frame
. 
	`setLayout
( 
	`QVBoxLayout
( ) ) 

1324 
layout
. 
	`addWidget
( 
after_frame
) 

1326 
after_bar
= 
	`PartitionsBar
( 
after_frame
) 

1327 
after_frame
. 
	`layout
( ) . 
	`addWidget
( 
after_bar
) 

1329 for 
p
in 
disks
[ 
dev
] : 

1330 
before_bar
. 
	`addPartition
( 
p
[ 6 ] , 
	`int
( 
p
[ 2 ] ) , 
	`int
( 
p
[ 0 ] ) , 
p
[ 4 ] , 
p
[ 5 ] ) 

1331 if 
p
[ 1 ] == 
biggest_free_id
: 

1332 
after_bar
. 
	`addPartition
( '' , 
	`int
( 
p
[ 2 ] ) , 
	`int
( 
p
[ 0 ] ) , 'auto' , 
	`get_release_name
( ) ) 

1334 
after_bar
. 
	`addPartition
( 
p
[ 6 ] , 
	`int
( 
p
[ 2 ] ) , 
	`int
( 
p
[ 0 ] ) , 
p
[ 4 ] , 
p
[ 5 ] ) 

1336 
before_frame
. 
	`setVisible
( True ) 

1337 
after_frame
. 
	`setVisible
( True ) 

1338 elif 
choice
== 
resize_choice
: 

1340 
extra
= 
extra_options
[ 
choice
] 

1341 for 
d
in 
self
. 
disk_layout
: 

1342 
disk
= 
d


1343 if 
disk
. 
	`startswith
( '=dev=' ) : 

1344 
disk
= 
disk
[ 5 : ] 

1345 if "%s" % 
disk
in 
extra
[ 3 ] : 

1346 
dev
= 
d


1349 
min_size
, 
max_size
, 
orig_size
, 
resize_path
= 
extra_options
[ 
choice
] 

1352 if 
dev
: 

1354 
before_label
= "Before Resize:" 

1355 
after_label
= "After Resize:" 

1356 
before_frame
= 
	`QGroupBox
( 
before_label
, 
bar_frame
) 

1357 
before_frame
. 
	`setLayout
( 
	`QVBoxLayout
( ) ) 

1358 
layout
. 
	`addWidget
( 
before_frame
) 

1360 
before_bar
= 
	`PartitionsBar
( 
before_frame
) 

1361 
before_frame
. 
	`layout
( ) . 
	`addWidget
( 
before_bar
) 

1363 
after_frame
= 
	`QGroupBox
( 
after_label
, 
bar_frame
) 

1364 
after_frame
. 
	`setLayout
( 
	`QVBoxLayout
( ) ) 

1365 
layout
. 
	`addWidget
( 
after_frame
) 

1367 
after_bar
= 
	`PartitionsBar
( 
after_frame
) 

1368 
after_frame
. 
	`layout
( ) . 
	`addWidget
( 
after_bar
) 

1370 for 
p
in 
disks
[ 
dev
] : 

1371 
before_bar
. 
	`addPartition
( 
p
[ 6 ] , 
	`int
( 
p
[ 2 ] ) , 
	`int
( 
p
[ 0 ] ) , 
p
[ 4 ] , 
p
[ 5 ] ) 

1372 
after_bar
. 
	`addPartition
( 
p
[ 6 ] , 
	`int
( 
p
[ 2 ] ) , 
	`int
( 
p
[ 0 ] ) , 
p
[ 4 ] , 
p
[ 5 ] ) 

1374 
after_bar
. 
	`setResizePartition
( 
resize_path
, 

1375 
min_size
, 
max_size
, 
orig_size
, 
	`get_release_name
( ) ) 

1377 
before_frame
. 
	`setVisible
( True ) 

1378 
after_frame
. 
	`setVisible
( True ) 

1380 
self
. 
resizePath
= 
after_bar
. 
resize_part
. 
path


1381 
self
. 
resizeSize
= 
after_bar
. 
resize_part
. 
size


1383 
QApplication
. 
	`instance
( ) . 
	`connect
( 
after_bar
, 

1384 
	`SIGNAL
( "partitionResized(PyQt_PyObject, PyQt_PyObject)" ) , 

1385 
partitionResized
) 

1387 elif 
choice
!= 
manual_choice
: 

1389 
vbox
= 
	`QVBoxLayout
( 
frame
) 

1390 
buttongroup
= 
	`QButtonGroup
( 
frame
) 

1391 
buttongroup_texts
= { } 

1392 
extra_firstbutton
= None 

1393 
extraIdCounter
= 0 

1395 for 
extra
in 
extra_options
[ 
choice
] : 

1399 if 
extra
== '' : 

1400 
disk_vbox
. 
	`addSpacing
( 10 ) 

1403 
extra_button
= 
	`QRadioButton
( 
extra
, 
frame
) 

1404 
vbox
. 
	`addWidget
( 
extra_button
) 

1406 
dev
= None 

1407 for 
d
in 
self
. 
disk_layout
: 

1408 
disk
= 
d


1409 if 
disk
. 
	`startswith
( '=dev=' ) : 

1410 
disk
= 
disk
[ 5 : ] 

1411 if "(%s)" % 
disk
in 
extra_button
. 
	`text
( ) : 

1412 
dev
= 
d


1416 if 
dev
: 

1417 
before_frame
= 
	`QGroupBox
( 
before_label
, 
bar_frame
) 

1418 
before_frame
. 
	`setLayout
( 
	`QVBoxLayout
( ) ) 

1419 
layout
. 
	`addWidget
( 
before_frame
) 

1421 
before_bar
= 
	`PartitionsBar
( 
before_frame
) 

1422 
before_frame
. 
	`layout
( ) . 
	`addWidget
( 
before_bar
) 

1424 
after_frame
= 
	`QGroupBox
( 
after_label
, 
bar_frame
) 

1425 
after_frame
. 
	`setLayout
( 
	`QVBoxLayout
( ) ) 

1426 
layout
. 
	`addWidget
( 
after_frame
) 

1428 
after_bar
= 
	`PartitionsBar
( 
after_frame
) 

1429 
after_frame
. 
	`layout
( ) . 
	`addWidget
( 
after_bar
) 

1431 for 
p
in 
disks
[ 
dev
] : 

1432 
before_bar
. 
	`addPartition
( 
p
[ 6 ] , 
	`int
( 
p
[ 2 ] ) , 
p
[ 0 ] , 
p
[ 4 ] , 
p
[ 5 ] ) 

1434 
release_name
= 
	`get_release_name
( ) 

1435 if 
before_bar
. 
diskSize
> 0 : 

1436 
after_bar
. 
	`addPartition
( '' , 
before_bar
. 
diskSize
, '' , 'auto' , 
release_name
) 

1438 
after_bar
. 
	`addPartition
( '' , 1 , '' , 'auto' , 
release_name
) 

1440 
before_frame
. 
	`setVisible
( False ) 

1441 
after_frame
. 
	`setVisible
( False ) 

1443 
buttongroup
. 
	`addButton
( 
extra_button
, 
extraIdCounter
) 

1444 
extra_id
= 
buttongroup
. 
	`id
( 
extra_button
) 

1448 
buttongroup_texts
[ 
extra_id
] = 
extra


1449 if 
extra_firstbutton
is None : 

1450 
extra_firstbutton
= 
extra_button


1451 
extraIdCounter
+= 1 

1453 
self
. 
app
. 
	`connect
( 
extra_button
, 
	`SIGNAL
( 'toggled(bool)' ) , 

1454 
	`_on_extra_toggle
( 
choice
, 
before_frame
, 
after_frame
) ) 

1456 if 
extra_firstbutton
is not None : 

1457 
extra_firstbutton
. 
	`setChecked
( True ) 

1458 
self
. 
autopartition_extra_buttongroup
[ 
choice
] = 

1459 
buttongroup


1460 
self
. 
autopartition_extra_buttongroup_texts
[ 
choice
] = 

1461 
buttongroup_texts


1463 
self
. 
app
. 
	`connect
( 
button
, 
	`SIGNAL
( 'toggled(bool)' ) , 

1464 
	`_on_choice_toggle
( 
choice
, 
frame
, 
bar_frame
) ) 

1466 
button
. 
	`show
( ) 

1467 
idCounter
+= 1 

1469 if 
firstbutton
is not None : 

1470 
firstbutton
. 
	`setChecked
( True ) 

1473 
self
. 
	`set_current_page
( 
WIDGET_STACK_STEPS
[ "stepPartAuto" ] ) 

1475 def 
	$get_autopartition_choice
( 
self
) : 

1476 
id
= 
self
. 
autopartition_buttongroup
. 
	`checkedId
( ) 

1477 
choice
= 
	`unicode
( 
self
. 
autopartition_buttongroup_texts
[ 
id
] ) 

1479 if 
choice
== 
self
. 
resize_choice
: 

1481 assert 
self
. 
resizeSize
is not None 

1482 return 
choice
, '%d B' % 
self
. 
resizeSize


1483 elif ( 
choice
!= 
self
. 
manual_choice
and 

1484 
choice
in 
self
. 
autopartition_extra_buttongroup
) : 

1485 
disk_id
= 
self
. 
autopartition_extra_buttongroup
[ 
choice
] . 
	`checkedId
( ) 

1486 
disk_texts
= 
self
. 
autopartition_extra_buttongroup_texts
[ 
choice
] 

1487 return 
choice
, 
	`unicode
( 
disk_texts
[ 
disk_id
] ) 

1489 return 
choice
, None 

1491 
	}


1491 def 
	$installation_medium_mounted
( 
self
, 
message
) : 

1492 
self
. 
userinterface
. 
part_advanced_warning_message
. 
	`setText
( 
message
) 

1493 
self
. 
userinterface
. 
part_advanced_warning_hbox
. 
	`show
( ) 

1495 
	}


1495 def 
	$update_partman
( 
self
, 
disk_cache
, 
partition_cache
, 
cache_order
) : 

1497 
self
. 
partition_tree_model
= 
	`PartitionModel
( 
self
, 
self
. 
userinterface
. 
partition_list_treeview
) 

1499 
children
= 
self
. 
userinterface
. 
partition_bar_frame
. 
	`children
( ) 

1500 for 
child
in 
children
: 

1501 if 
	`isinstance
( 
child
, 
PartitionsBar
) : 

1502 
self
. 
partition_bar_vbox
. 
	`removeWidget
( 
child
) 

1503 
child
. 
	`hide
( ) 

1504 del 
child


1506 
self
. 
partition_bars
= [ ] 

1507 
partition_bar
= None 

1508 
indexCount
= - 1 

1509 for 
item
in 
cache_order
: 

1510 if 
item
in 
disk_cache
: 

1512 
self
. 
partition_tree_model
. 
	`append
( [ 
item
, 
disk_cache
[ 
item
] ] , 
self
) 

1513 
indexCount
+= 1 

1514 
partition_bar
= 
	`PartitionsBar
( 
self
. 
userinterface
. 
partition_bar_frame
) 

1515 
self
. 
partition_bars
. 
	`append
( 
partition_bar
) 

1516 
self
. 
partition_bar_vbox
. 
	`addWidget
( 
partition_bar
) 

1519 
partition
= 
partition_cache
[ 
item
] 

1521 
self
. 
partition_tree_model
. 
	`append
( [ 
item
, 
partition
] , 
self
) 

1522 
indexCount
+= 1 

1525 
size
= 
	`int
( 
partition
[ 'parted' ] [ 'size' ] ) 

1526 
fs
= 
partition
[ 'parted' ] [ 'fs' ] 

1527 
path
= 
partition
[ 'parted' ] [ 'path' ] . 
	`replace
( "/dev/" , "" ) 

1528 if 
fs
== "free" : 

1529 
path
= 
fs


1530 
partition_bar
. 
	`addPartition
( 'name' , 
size
, 
indexCount
, 
fs
, 
path
) 

1537 
self
. 
userinterface
. 
partition_list_treeview
. 
	`setModel
( 
self
. 
partition_tree_model
) 

1538 
self
. 
app
. 
	`disconnect
( 
self
. 
userinterface
. 
partition_list_treeview
. 
	`selectionModel
( ) , 

1539 
	`SIGNAL
( "selectionChanged(const QItemSelection&, const QItemSelection&)" ) , 

1540 
self
. 
on_partition_list_treeview_selection_changed
) 

1541 
self
. 
app
. 
	`connect
( 
self
. 
userinterface
. 
partition_list_treeview
. 
	`selectionModel
( ) , 

1542 
	`SIGNAL
( "selectionChanged(const QItemSelection&, const QItemSelection&)" ) , 

1543 
self
. 
on_partition_list_treeview_selection_changed
) 

1546 
self
. 
	`set_current_page
( 
WIDGET_STACK_STEPS
[ "stepPartAdvanced" ] ) 

1548 
	}


1548 def 
	$partitionClicked
( 
self
, 
indexCounter
) : 

1550 
index
= 
self
. 
partition_tree_model
. 
	`index
( 
indexCounter
, 2 ) 

1551 
flags
= 
self
. 
userinterface
. 
partition_list_treeview
. 
	`selectionCommand
( 
index
) 

1552 
rect
= 
self
. 
userinterface
. 
partition_list_treeview
. 
	`visualRect
( 
index
) 

1553 
self
. 
userinterface
. 
partition_list_treeview
. 
	`setSelection
( 
rect
, 
flags
) 

1555 
	}


1555 def 
	$partman_create_dialog
( 
self
, 
devpart
, 
partition
) : 

1556 if not 
self
. 
allowed_change_step
: 

1558 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1561 
self
. 
create_dialog
= 
	`QDialog
( 
self
. 
userinterface
) 

1562 
uic
. 
	`loadUi
( "%s/partition_create_dialog.ui" % 
UIDIR
, 
self
. 
create_dialog
) 

1563 
self
. 
app
. 
	`connect
( 
self
. 
create_dialog
. 
partition_create_use_combo
, 
	`SIGNAL
( "currentIndexChanged(int)" ) , 
self
. 
on_partition_create_use_combo_changed
) 

1564 
self
. 
	`translate_widget_children
( 
self
. 
create_dialog
) 

1570 if 
partition
[ 'parted' ] [ 'type' ] == 'pri/log' : 

1572 for 
child
in 
self
. 
partition_tree_model
. 
	`children
( ) : 

1573 
data
= 
child
. 
itemData


1574 
otherpart
= 
data
[ 1 ] 

1575 if ( 
otherpart
[ 'dev' ] == 
partition
[ 'dev' ] and 

1576 'id' in 
otherpart
and 

1577 
otherpart
[ 'parted' ] [ 'type' ] == 'primary' ) : 

1578 
self
. 
create_dialog
. 
partition_create_type_logical
. 
	`setChecked
( True ) 

1581 
self
. 
create_dialog
. 
partition_create_type_primary
. 
	`setChecked
( True ) 

1583 
self
. 
create_dialog
. 
partition_create_type_label
. 
	`hide
( ) 

1584 
self
. 
create_dialog
. 
partition_create_type_widget
. 
	`hide
( ) 

1587 
max_size_mb
= 
	`int
( 
partition
[ 'parted' ] [ 'size' ] ) / 1000000 

1588 
self
. 
create_dialog
. 
partition_create_size_spinbutton
. 
	`setMaximum
( 
max_size_mb
) 

1589 
self
. 
create_dialog
. 
partition_create_size_spinbutton
. 
	`setValue
( 
max_size_mb
) 

1591 
self
. 
create_dialog
. 
partition_create_place_beginning
. 
	`setChecked
( True ) 

1593 
self
. 
create_use_method_names
= { } 

1594 for 
method
, 
name
, 
description
in 
self
. 
dbfilter
. 
	`create_use_as
( ) : 

1595 
self
. 
create_use_method_names
[ 
description
] = 
name


1596 
self
. 
create_dialog
. 
partition_create_use_combo
. 
	`addItem
( 
description
) 

1597 if 
self
. 
create_dialog
. 
partition_create_use_combo
. 
	`count
( ) == 0 : 

1598 
self
. 
create_dialog
. 
partition_create_use_combo
. 
	`setEnabled
( False ) 

1600 
self
. 
create_dialog
. 
partition_create_mount_combo
. 
	`clear
( ) 

1601 for 
mp
, 
choice_c
, 
choice
in 
self
. 
dbfilter
. 
	`default_mountpoint_choices
( ) : 

1604 
self
. 
create_dialog
. 
partition_create_mount_combo
. 
	`addItem
( 
mp
) 

1605 
self
. 
create_dialog
. 
partition_create_mount_combo
. 
	`clearEditText
( ) 

1607 
response
= 
self
. 
create_dialog
. 
	`exec_
( ) 

1609 if ( 
response
== 
QDialog
. 
Accepted
and 

1610 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) ) : 

1611 if 
partition
[ 'parted' ] [ 'type' ] == 'primary' : 

1612 
prilog
= 
partman
. 
PARTITION_TYPE_PRIMARY


1613 elif 
partition
[ 'parted' ] [ 'type' ] == 'logical' : 

1614 
prilog
= 
partman
. 
PARTITION_TYPE_LOGICAL


1615 elif 
partition
[ 'parted' ] [ 'type' ] == 'pri/log' : 

1616 if 
self
. 
create_dialog
. 
partition_create_type_primary
. 
	`isChecked
( ) : 

1617 
prilog
= 
partman
. 
PARTITION_TYPE_PRIMARY


1619 
prilog
= 
partman
. 
PARTITION_TYPE_LOGICAL


1621 if 
self
. 
create_dialog
. 
partition_create_place_beginning
. 
	`isChecked
( ) : 

1622 
place
= 
partman
. 
PARTITION_PLACE_BEGINNING


1624 
place
= 
partman
. 
PARTITION_PLACE_END


1626 
method_description
= 
	`unicode
( 
self
. 
create_dialog
. 
partition_create_use_combo
. 
	`currentText
( ) ) 

1627 
method
= 
self
. 
create_use_method_names
[ 
method_description
] 

1629 
mountpoint
= 
	`unicode
( 
self
. 
create_dialog
. 
partition_create_mount_combo
. 
	`currentText
( ) ) 

1631 
self
. 
	`allow_change_step
( False ) 

1632 
self
. 
dbfilter
. 
	`create_partition
( 

1633 
devpart
, 

1634 
	`str
( 
self
. 
create_dialog
. 
partition_create_size_spinbutton
. 
	`value
( ) ) , 

1635 
prilog
, 
place
, 
method
, 
mountpoint
) 

1637 
	}


1637 def 
	$on_partition_create_use_combo_changed
( 
self
, 
combobox
) : 

1638 if not 
	`hasattr
( 
self
, 'create_use_method_names' ) : 

1640 
known_filesystems
= ( 'ext3' , 'ext4' , 'ext2' , 'reiserfs' , 'jfs' , 'xfs' , 

1642 
text
= 
	`unicode
( 
self
. 
create_dialog
. 
partition_create_use_combo
. 
	`currentText
( ) ) 

1643 if 
text
not in 
self
. 
create_use_method_names
: 

1645 
method
= 
self
. 
create_use_method_names
[ 
text
] 

1646 if 
method
not in 
known_filesystems
: 

1647 
self
. 
create_dialog
. 
partition_create_mount_combo
. 
	`clearEditText
( ) 

1648 
self
. 
create_dialog
. 
partition_create_mount_combo
. 
	`setEnabled
( False ) 

1650 
self
. 
create_dialog
. 
partition_create_mount_combo
. 
	`setEnabled
( True ) 

1651 if 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1652 
self
. 
create_dialog
. 
partition_create_mount_combo
. 
	`clear
( ) 

1653 for 
mp
, 
choice_c
, 
choice
in 

1654 
self
. 
dbfilter
. 
	`default_mountpoint_choices
( 
method
) : 

1655 
self
. 
create_dialog
. 
partition_create_mount_combo
. 
	`addItem
( 
mp
) 

1657 
	}


1657 def 
	$partman_edit_dialog
( 
self
, 
devpart
, 
partition
) : 

1658 if not 
self
. 
allowed_change_step
: 

1660 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1663 
self
. 
edit_dialog
= 
	`QDialog
( 
self
. 
userinterface
) 

1664 
uic
. 
	`loadUi
( "%s/partition_edit_dialog.ui" % 
UIDIR
, 
self
. 
edit_dialog
) 

1665 
self
. 
app
. 
	`connect
( 
self
. 
edit_dialog
. 
partition_edit_use_combo
, 
	`SIGNAL
( "currentIndexChanged(int)" ) , 
self
. 
on_partition_edit_use_combo_changed
) 

1666 
self
. 
	`translate_widget_children
( 
self
. 
edit_dialog
) 

1668 
current_size
= None 

1669 if ( 'can_resize' not in 
partition
or not 
partition
[ 'can_resize' ] or 

1670 'resize_min_size' not in 
partition
or 

1671 'resize_max_size' not in 
partition
) : 

1672 
self
. 
edit_dialog
. 
partition_edit_size_label
. 
	`hide
( ) 

1673 
self
. 
edit_dialog
. 
partition_edit_size_spinbutton
. 
	`hide
( ) 

1677 
min_size_mb
= 
	`int
( 
partition
[ 'resize_min_size' ] ) / 1000000 

1678 
cur_size_mb
= 
	`int
( 
partition
[ 'parted' ] [ 'size' ] ) / 1000000 

1679 
max_size_mb
= 
	`int
( 
partition
[ 'resize_max_size' ] ) / 1000000 

1681 
min_size_mb
= 
	`min
( 
min_size_mb
, 
cur_size_mb
) 

1682 
max_size_mb
= 
	`max
( 
cur_size_mb
, 
max_size_mb
) 

1683 
self
. 
edit_dialog
. 
partition_edit_size_spinbutton
. 
	`setMinimum
( 
min_size_mb
) 

1684 
self
. 
edit_dialog
. 
partition_edit_size_spinbutton
. 
	`setMaximum
( 
max_size_mb
) 

1685 
self
. 
edit_dialog
. 
partition_edit_size_spinbutton
. 
	`setSingleStep
( 1 ) 

1686 
self
. 
edit_dialog
. 
partition_edit_size_spinbutton
. 
	`setValue
( 
cur_size_mb
) 

1688 
current_size
= 
	`str
( 
self
. 
edit_dialog
. 
partition_edit_size_spinbutton
. 
	`value
( ) ) 

1690 
self
. 
edit_use_method_names
= { } 

1691 
method_descriptions
= { } 

1692 
self
. 
edit_dialog
. 
partition_edit_use_combo
. 
	`clear
( ) 

1693 for 
script
, 
arg
, 
option
in 
partition
[ 'method_choices' ] : 

1694 
self
. 
edit_use_method_names
[ 
option
] = 
arg


1695 
method_descriptions
[ 
arg
] = 
option


1696 
self
. 
edit_dialog
. 
partition_edit_use_combo
. 
	`addItem
( 
option
) 

1697 
current_method
= 
self
. 
dbfilter
. 
	`get_current_method
( 
partition
) 

1698 if 
current_method
and 
current_method
in 
method_descriptions
: 

1699 
current_method_description
= 
method_descriptions
[ 
current_method
] 

1700 
index
= 
self
. 
edit_dialog
. 
partition_edit_use_combo
. 
	`findText
( 
current_method_description
) 

1701 
self
. 
edit_dialog
. 
partition_edit_use_combo
. 
	`setCurrentIndex
( 
index
) 

1703 if 'id' not in 
partition
: 

1704 
self
. 
edit_dialog
. 
partition_edit_format_label
. 
	`hide
( ) 

1705 
self
. 
edit_dialog
. 
partition_edit_format_checkbutton
. 
	`hide
( ) 

1706 
current_format
= False 

1707 elif 'method' in 
partition
: 

1708 
self
. 
edit_dialog
. 
partition_edit_format_label
. 
	`show
( ) 

1709 
self
. 
edit_dialog
. 
partition_edit_format_checkbutton
. 
	`show
( ) 

1710 
self
. 
edit_dialog
. 
partition_edit_format_checkbutton
. 
	`setEnabled
( 

1711 'can_activate_format' in 
partition
) 

1712 
current_format
= ( 
partition
[ 'method' ] == 'format' ) 

1714 
self
. 
edit_dialog
. 
partition_edit_format_label
. 
	`show
( ) 

1715 
self
. 
edit_dialog
. 
partition_edit_format_checkbutton
. 
	`show
( ) 

1716 
self
. 
edit_dialog
. 
partition_edit_format_checkbutton
. 
	`setEnabled
( False ) 

1717 
current_format
= False 

1718 
self
. 
edit_dialog
. 
partition_edit_format_checkbutton
. 
	`setChecked
( 

1719 
current_format
) 

1721 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`clear
( ) 

1722 if 'mountpoint_choices' in 
partition
: 

1723 for 
mp
, 
choice_c
, 
choice
in 
partition
[ 'mountpoint_choices' ] : 

1726 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`addItem
( 
mp
) 

1727 
current_mountpoint
= 
self
. 
dbfilter
. 
	`get_current_mountpoint
( 
partition
) 

1728 if 
current_mountpoint
is not None : 

1729 
index
= 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`findText
( 
current_method
) 

1730 if 
index
!= - 1 : 

1731 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`setCurrentIndex
( 
index
) 

1733 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`addItem
( 
current_mountpoint
) 

1734 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`setCurrentIndex
( 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`count
( ) - 1 ) 

1736 
response
= 
self
. 
edit_dialog
. 
	`exec_
( ) 

1738 if ( 
response
== 
QDialog
. 
Accepted
and 

1739 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) ) : 

1740 
size
= None 

1741 if 
current_size
is not None : 

1742 
size
= 
	`str
( 
self
. 
edit_dialog
. 
partition_edit_size_spinbutton
. 
	`value
( ) ) 

1744 
method_description
= 
	`unicode
( 
self
. 
edit_dialog
. 
partition_edit_use_combo
. 
	`currentText
( ) ) 

1745 
method
= 
self
. 
edit_use_method_names
[ 
method_description
] 

1747 
format
= 
self
. 
edit_dialog
. 
partition_edit_format_checkbutton
. 
	`isChecked
( ) 

1749 
mountpoint
= 
	`unicode
( 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`currentText
( ) ) 

1751 if ( 
current_size
is not None and 
size
is not None and 

1752 
current_size
== 
size
) : 

1753 
size
= None 

1754 if 
method
== 
current_method
: 

1755 
method
= None 

1756 if 
format
== 
current_format
: 

1757 
format
= None 

1758 if 
mountpoint
== 
current_mountpoint
: 

1759 
mountpoint
= None 

1761 if ( 
size
is not None or 
method
is not None or 
format
is not None or 

1762 
mountpoint
is not None ) : 

1763 
self
. 
	`allow_change_step
( False ) 

1764 
edits
= { 'size' : 
size
, 'method' : 
method
, 

1765 'mountpoint' : 
mountpoint
} 

1766 if 
format
is not None : 

1767 
edits
[ 'format' ] = 'dummy' 

1768 
self
. 
dbfilter
. 
	`edit_partition
( 
devpart
, ** 
edits
) 

1770 
	}


1770 def 
	$on_partition_edit_use_combo_changed
( 
self
, 
combobox
) : 

1771 if not 
	`hasattr
( 
self
, 'edit_use_method_names' ) : 

1776 
known_filesystems
= ( 'ext3' , 'ext4' , 'ext2' , 'reiserfs' , 'jfs' , 'xfs' , 

1778 
text
= 
	`unicode
( 
self
. 
edit_dialog
. 
partition_edit_use_combo
. 
	`currentText
( ) ) 

1779 if 
text
not in 
self
. 
edit_use_method_names
: 

1781 
method
= 
self
. 
edit_use_method_names
[ 
text
] 

1782 if 
method
not in 
known_filesystems
: 

1783 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`clearEditText
( ) 

1784 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`setEnabled
( False ) 

1785 
self
. 
edit_dialog
. 
partition_edit_format_checkbutton
. 
	`setEnabled
( False ) 

1787 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`setEnabled
( True ) 

1788 
self
. 
edit_dialog
. 
partition_edit_format_checkbutton
. 
	`setEnabled
( True ) 

1789 if 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1790 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`clear
( ) 

1791 for 
mp
, 
choice_c
, 
choice
in 

1792 
self
. 
dbfilter
. 
	`default_mountpoint_choices
( 
method
) : 

1793 
self
. 
edit_dialog
. 
partition_edit_mount_combo
. 
	`addItem
( 
mp
) 

1795 
	}


1795 def 
	$on_partition_list_treeview_selection_changed
( 
self
, 
selected
, 
deselected
) : 

1796 
self
. 
userinterface
. 
partition_button_new_label
. 
	`setEnabled
( False ) 

1797 
self
. 
userinterface
. 
partition_button_new
. 
	`setEnabled
( False ) 

1798 
self
. 
userinterface
. 
partition_button_edit
. 
	`setEnabled
( False ) 

1799 
self
. 
userinterface
. 
partition_button_delete
. 
	`setEnabled
( False ) 

1800 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1803 
indexes
= 
self
. 
userinterface
. 
partition_list_treeview
. 
	`selectedIndexes
( ) 

1804 if 
indexes
: 

1805 
index
= 
indexes
[ 0 ] 

1806 for 
bar
in 
self
. 
partition_bars
: 

1811 
item
= 
index
. 
	`internalPointer
( ) 

1812 
devpart
= 
item
. 
itemData
[ 0 ] 

1813 
partition
= 
item
. 
itemData
[ 1 ] 

1815 
devpart
= None 

1816 
partition
= None 

1818 for 
action
in 
self
. 
dbfilter
. 
	`get_actions
( 
devpart
, 
partition
) : 

1819 if 
action
== 'new_label' : 

1820 
self
. 
userinterface
. 
partition_button_new_label
. 
	`setEnabled
( True ) 

1821 elif 
action
== 'new' : 

1822 
self
. 
userinterface
. 
partition_button_new
. 
	`setEnabled
( True ) 

1823 elif 
action
== 'edit' : 

1824 
self
. 
userinterface
. 
partition_button_edit
. 
	`setEnabled
( True ) 

1825 elif 
action
== 'delete' : 

1826 
self
. 
userinterface
. 
partition_button_delete
. 
	`setEnabled
( True ) 

1827 
self
. 
userinterface
. 
partition_button_undo
. 
	`setEnabled
( True ) 

1829 
	}


1829 def 
	$on_partition_list_treeview_activated
( 
self
, 
index
) : 

1830 if not 
self
. 
allowed_change_step
: 

1832 
item
= 
index
. 
	`internalPointer
( ) 

1833 
devpart
= 
item
. 
itemData
[ 0 ] 

1834 
partition
= 
item
. 
itemData
[ 1 ] 

1836 if 'id' not in 
partition
: 

1840 for 
child
in 
self
. 
partition_tree_model
. 
	`children
( ) : 

1841 
data
= 
child
. 
itemData


1842 
otherpart
= 
data
[ 1 ] 

1843 if 
otherpart
[ 'dev' ] == 
partition
[ 'dev' ] and 'id' in 
otherpart
: 

1846 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1848 
self
. 
	`allow_change_step
( False ) 

1849 
self
. 
dbfilter
. 
	`create_label
( 
devpart
) 

1850 elif 
partition
[ 'parted' ] [ 'fs' ] == 'free' : 

1851 if 'can_new' in 
partition
and 
partition
[ 'can_new' ] : 

1852 
self
. 
	`partman_create_dialog
( 
devpart
, 
partition
) 

1854 
self
. 
	`partman_edit_dialog
( 
devpart
, 
partition
) 

1856 
	}


1856 def 
	$on_partition_list_new_label_activate
( 
self
, 
ticked
) : 

1857 
selected
= 
self
. 
userinterface
. 
partition_list_treeview
. 
	`selectedIndexes
( ) 

1858 if not 
selected
: 

1860 
index
= 
selected
[ 0 ] 

1861 
item
= 
index
. 
	`internalPointer
( ) 

1862 
devpart
= 
item
. 
itemData
[ 0 ] 

1864 if not 
self
. 
allowed_change_step
: 

1866 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1868 
self
. 
	`allow_change_step
( False ) 

1869 
self
. 
dbfilter
. 
	`create_label
( 
devpart
) 

1871 
	}


1871 def 
	$on_partition_list_new_activate
( 
self
, 
ticked
) : 

1872 
selected
= 
self
. 
userinterface
. 
partition_list_treeview
. 
	`selectedIndexes
( ) 

1873 if not 
selected
: 

1875 
index
= 
selected
[ 0 ] 

1876 
item
= 
index
. 
	`internalPointer
( ) 

1877 
devpart
= 
item
. 
itemData
[ 0 ] 

1878 
partition
= 
item
. 
itemData
[ 1 ] 

1879 
self
. 
	`partman_create_dialog
( 
devpart
, 
partition
) 

1881 
	}


1881 def 
	$on_partition_list_edit_activate
( 
self
, 
ticked
) : 

1882 
selected
= 
self
. 
userinterface
. 
partition_list_treeview
. 
	`selectedIndexes
( ) 

1883 if not 
selected
: 

1885 
index
= 
selected
[ 0 ] 

1886 
item
= 
index
. 
	`internalPointer
( ) 

1887 
devpart
= 
item
. 
itemData
[ 0 ] 

1888 
partition
= 
item
. 
itemData
[ 1 ] 

1889 
self
. 
	`partman_edit_dialog
( 
devpart
, 
partition
) 

1891 
	}


1891 def 
	$on_partition_list_delete_activate
( 
self
, 
ticked
) : 

1892 
selected
= 
self
. 
userinterface
. 
partition_list_treeview
. 
	`selectedIndexes
( ) 

1893 if not 
selected
: 

1895 
index
= 
selected
[ 0 ] 

1896 
item
= 
index
. 
	`internalPointer
( ) 

1897 
devpart
= 
item
. 
itemData
[ 0 ] 

1899 if not 
self
. 
allowed_change_step
: 

1901 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1903 
self
. 
	`allow_change_step
( False ) 

1904 
self
. 
dbfilter
. 
	`delete_partition
( 
devpart
) 

1906 
	}


1906 def 
	$on_partition_list_undo_activate
( 
self
, 
ticked
) : 

1907 if not 
self
. 
allowed_change_step
: 

1909 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1911 
self
. 
	`allow_change_step
( False ) 

1912 
self
. 
dbfilter
. 
	`undo
( ) 

1914 
	}


1914 def 
	$partman_popup
( 
self
, 
position
) : 

1915 if not 
self
. 
allowed_change_step
: 

1917 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1920 
selected
= 
self
. 
userinterface
. 
partition_list_treeview
. 
	`selectedIndexes
( ) 

1921 if 
selected
: 

1922 
index
= 
selected
[ 0 ] 

1923 
item
= 
index
. 
	`internalPointer
( ) 

1924 
devpart
= 
item
. 
itemData
[ 0 ] 

1925 
partition
= 
item
. 
itemData
[ 1 ] 

1927 
devpart
= None 

1928 
partition
= None 

1931 
partition_list_menu
= 
	`QMenu
( 
self
. 
userinterface
) 

1932 for 
action
in 
self
. 
dbfilter
. 
	`get_actions
( 
devpart
, 
partition
) : 

1933 if 
action
== 'new_label' : 

1934 
new_label_item
= 
partition_list_menu
. 
	`addAction
( 

1935 
self
. 
	`get_string
( 'partition_button_new_label' ) ) 

1936 
self
. 
app
. 
	`connect
( 
new_label_item
, 
	`SIGNAL
( "triggered(bool)" ) , 

1937 
self
. 
on_partition_list_new_label_activate
) 

1938 elif 
action
== 'new' : 

1939 
new_item
= 
partition_list_menu
. 
	`addAction
( 

1940 
self
. 
	`get_string
( 'partition_button_new' ) ) 

1941 
self
. 
app
. 
	`connect
( 
new_item
, 
	`SIGNAL
( "triggered(bool)" ) , 

1942 
self
. 
on_partition_list_new_activate
) 

1943 elif 
action
== 'edit' : 

1944 
edit_item
= 
partition_list_menu
. 
	`addAction
( 

1945 
self
. 
	`get_string
( 'partition_button_edit' ) ) 

1946 
self
. 
app
. 
	`connect
( 
edit_item
, 
	`SIGNAL
( "triggered(bool)" ) , 

1947 
self
. 
on_partition_list_edit_activate
) 

1948 elif 
action
== 'delete' : 

1949 
delete_item
= 
partition_list_menu
. 
	`addAction
( 

1950 
self
. 
	`get_string
( 'partition_button_delete' ) ) 

1951 
self
. 
app
. 
	`connect
( 
delete_item
, 
	`SIGNAL
( "triggered(bool)" ) , 

1952 
self
. 
on_partition_list_delete_activate
) 

1953 if 
partition_list_menu
. 
	`children
( ) : 

1954 
partition_list_menu
. 
	`addSeparator
( ) 

1955 
undo_item
= 
partition_list_menu
. 
	`addAction
( 

1956 
self
. 
	`get_string
( 'partman/text/undo_everything' ) ) 

1957 
self
. 
app
. 
	`connect
( 
undo_item
, 
	`SIGNAL
( "triggered(bool)" ) , 

1958 
self
. 
on_partition_list_undo_activate
) 

1960 
partition_list_menu
. 
	`exec_
( 
QCursor
. 
	`pos
( ) ) 

1962 
	}


1962 def 
	$set_fullname
( 
self
, 
value
) : 

1963 
self
. 
userinterface
. 
fullname
. 
	`setText
( 
	`unicode
( 
value
, "UTF-8" ) ) 

1965 
	}


1965 def 
	$get_fullname
( 
self
) : 

1966 return 
	`unicode
( 
self
. 
userinterface
. 
fullname
. 
	`text
( ) ) 

1968 
	}


1968 def 
	$set_username
( 
self
, 
value
) : 

1969 
self
. 
userinterface
. 
username
. 
	`setText
( 
	`unicode
( 
value
, "UTF-8" ) ) 

1971 
	}


1971 def 
	$get_username
( 
self
) : 

1972 return 
	`unicode
( 
self
. 
userinterface
. 
username
. 
	`text
( ) ) 

1974 
	}


1974 def 
	$get_password
( 
self
) : 

1975 return 
	`unicode
( 
self
. 
userinterface
. 
password
. 
	`text
( ) ) 

1977 
	}


1977 def 
	$get_verified_password
( 
self
) : 

1978 return 
	`unicode
( 
self
. 
userinterface
. 
verified_password
. 
	`text
( ) ) 

1980 
	}


1980 def 
	$select_password
( 
self
) : 

1981 
self
. 
userinterface
. 
password
. 
	`selectAll
( ) 

1983 
	}


1983 def 
	$set_auto_login
( 
self
, 
value
) : 

1984 return 
self
. 
userinterface
. 
login_auto
. 
	`setChecked
( 
value
) 

1986 
	}


1986 def 
	$get_auto_login
( 
self
) : 

1987 return 
self
. 
userinterface
. 
login_auto
. 
	`isChecked
( ) 

1989 
	}


1989 def 
	$set_encrypt_home
( 
self
, 
value
) : 

1990 if 
value
: 

1991 
syslog
. 
	`syslog
( 
syslog
. 
LOG_WARNING
, 

1994 
	}


1994 def 
	$get_encrypt_home
( 
self
) : 

1997 
	}


1997 def 
	$username_error
( 
self
, 
msg
) : 

1998 
self
. 
userinterface
. 
username_error_reason
. 
	`setText
( 
msg
) 

1999 
self
. 
userinterface
. 
username_error_image
. 
	`show
( ) 

2000 
self
. 
userinterface
. 
username_error_reason
. 
	`show
( ) 

2002 
	}


2002 def 
	$password_error
( 
self
, 
msg
) : 

2003 
self
. 
userinterface
. 
password_error_reason
. 
	`setText
( 
msg
) 

2004 
self
. 
userinterface
. 
password_error_image
. 
	`show
( ) 

2005 
self
. 
userinterface
. 
password_error_reason
. 
	`show
( ) 

2007 
	}


2007 def 
	$get_hostname
( 
self
) : 

2008 return 
	`unicode
( 
self
. 
userinterface
. 
hostname
. 
	`text
( ) ) 

2010 
	}


2010 def 
	$set_hostname
( 
self
, 
value
) : 

2011 
self
. 
userinterface
. 
hostname
. 
	`setText
( 
value
) 

2013 
	}


2013 def 
	$set_summary_text
( 
self
, 
text
) : 

2014 
i
= 
text
. 
	`find
( "\n" ) 

2015 while 
i
!= - 1 : 

2016 
text
= 
text
[ : 
i
] + "<br>" + 
text
[ 
i
+ 1 : ] 

2017 
i
= 
text
. 
	`find
( "\n" ) 

2018 
self
. 
userinterface
. 
ready_text
. 
	`setText
( 
text
) 

2021 
	}


2021 def 
	$set_grub_combo
( 
self
, 
options
) : 

2023 
self
. 
advanceddialog
. 
grub_device_entry
. 
	`clear
( ) 

2025 for 
opt
in 
options
: 

2026 
self
. 
advanceddialog
. 
grub_device_entry
. 
	`addItem
( 
opt
[ 0 ] ) ; 

2028 
	}


2028 def 
	$on_advanced_button_clicked
( 
self
) : 

2029 
self
. 
	`translate_widget_children
( 
self
. 
advanceddialog
) 

2030 
self
. 
app
. 
	`connect
( 
self
. 
advanceddialog
. 
grub_enable
, 
	`SIGNAL
( "stateChanged(int)" ) , 
self
. 
toggle_grub
) 

2031 
self
. 
app
. 
	`connect
( 
self
. 
advanceddialog
. 
proxy_host_entry
, 
	`SIGNAL
( "textChanged(const QString &)" ) , 
self
. 
enable_proxy_spinbutton
) 

2032 
display
= False 

2033 
grub_en
= 
self
. 
	`get_grub
( ) 

2034 
summary_device
= 
self
. 
	`get_summary_device
( ) 

2035 if 
grub_en
is not None : 

2036 
self
. 
advanceddialog
. 
grub_enable
. 
	`show
( ) 

2037 
self
. 
advanceddialog
. 
grub_enable
. 
	`setChecked
( 
grub_en
) 

2039 
self
. 
advanceddialog
. 
grub_enable
. 
	`hide
( ) 

2040 
summary_device
= None 

2041 if 
summary_device
is not None : 

2042 
display
= True 

2043 
self
. 
advanceddialog
. 
bootloader_group_label
. 
	`show
( ) 

2044 
self
. 
advanceddialog
. 
grub_device_label
. 
	`show
( ) 

2045 
self
. 
advanceddialog
. 
grub_device_entry
. 
	`show
( ) 

2049 
target
= 
summary
. 
	`find_grub_target
( ) 

2050 
index
= 
self
. 
advanceddialog
. 
grub_device_entry
. 
	`findText
( 
target
) 

2051 if ( 
index
== - 1 ) : 

2052 
self
. 
advanceddialog
. 
grub_device_entry
. 
	`addItem
( 
target
) 

2053 
index
= 
self
. 
advanceddialog
. 
grub_device_entry
. 
	`count
( ) - 1 

2056 
self
. 
advanceddialog
. 
grub_device_entry
. 
	`setCurrentIndex
( 
index
) 

2058 
self
. 
advanceddialog
. 
grub_device_entry
. 
	`setEnabled
( 
grub_en
) 

2059 
self
. 
advanceddialog
. 
grub_device_label
. 
	`setEnabled
( 
grub_en
) 

2061 
self
. 
advanceddialog
. 
bootloader_group_label
. 
	`hide
( ) 

2062 
self
. 
advanceddialog
. 
grub_device_label
. 
	`hide
( ) 

2063 
self
. 
advanceddialog
. 
grub_device_entry
. 
	`hide
( ) 

2064 if 
self
. 
popcon
is not None : 

2065 
display
= True 

2066 
self
. 
advanceddialog
. 
popcon_group_label
. 
	`show
( ) 

2067 
self
. 
advanceddialog
. 
popcon_checkbutton
. 
	`show
( ) 

2068 
self
. 
advanceddialog
. 
popcon_checkbutton
. 
	`setChecked
( 
self
. 
popcon
) 

2070 
self
. 
advanceddialog
. 
popcon_group_label
. 
	`hide
( ) 

2071 
self
. 
advanceddialog
. 
popcon_checkbutton
. 
	`hide
( ) 

2073 
display
= True 

2074 if 
self
. 
http_proxy_host
: 

2075 
self
. 
advanceddialog
. 
proxy_port_spinbutton
. 
	`setEnabled
( True ) 

2076 
self
. 
advanceddialog
. 
proxy_host_entry
. 
	`setText
( 
	`unicode
( 
self
. 
http_proxy_host
) ) 

2078 
self
. 
advanceddialog
. 
proxy_port_spinbutton
. 
	`setEnabled
( False ) 

2079 
self
. 
advanceddialog
. 
proxy_port_spinbutton
. 
	`setValue
( 
self
. 
http_proxy_port
) 

2081 if not 
display
: 

2084 
response
= 
self
. 
advanceddialog
. 
	`exec_
( ) 

2085 if 
response
== 
QDialog
. 
Accepted
: 

2086 if 
summary_device
is not None : 

2087 
self
. 
	`set_summary_device
( 

2088 
	`unicode
( 
self
. 
advanceddialog
. 
grub_device_entry
. 
	`currentText
( ) ) ) 

2089 
self
. 
	`set_popcon
( 
self
. 
advanceddialog
. 
popcon_checkbutton
. 
	`isChecked
( ) ) 

2090 
self
. 
	`set_grub
( 
self
. 
advanceddialog
. 
grub_enable
. 
	`isChecked
( ) ) 

2091 
self
. 
	`set_proxy_host
( 
	`unicode
( 
self
. 
advanceddialog
. 
proxy_host_entry
. 
	`text
( ) ) ) 

2092 
self
. 
	`set_proxy_port
( 
self
. 
advanceddialog
. 
proxy_port_spinbutton
. 
	`value
( ) ) 

2094 
	}


2094 def 
	$enable_proxy_spinbutton
( 
self
) : 

2095 
self
. 
advanceddialog
. 
proxy_port_spinbutton
. 
	`setEnabled
( 
self
. 
advanceddialog
. 
proxy_host_entry
. 
	`text
( ) != '' ) 

2097 
	}


2097 def 
	$toggle_grub
( 
self
) : 

2098 
grub_en
= 
self
. 
advanceddialog
. 
grub_enable
. 
	`isChecked
( ) 

2099 
self
. 
advanceddialog
. 
grub_device_entry
. 
	`setEnabled
( 
grub_en
) 

2100 
self
. 
advanceddialog
. 
grub_device_label
. 
	`setEnabled
( 
grub_en
) 

2102 
	}


2102 def 
	$return_to_partitioning
( 
self
) : 

2106 if 
self
. 
installing
and not 
self
. 
installing_no_return
: 

2109 
self
. 
pagesindex
= 1 

2110 
self
. 
dbfilter
= 
partman
. 
	`Partman
( 
self
) 

2111 
self
. 
	`set_current_page
( 
self
. 
previous_partitioning_page
) 

2112 
self
. 
userinterface
. 
next
. 
	`setText
( 
self
. 
	`get_string
( "next" ) . 
	`replace
( '_' , '&' , 1 ) ) 

2113 
self
. 
userinterface
. 
next
. 
	`setIcon
( 
self
. 
forwardIcon
) 

2114 
self
. 
	`translate_widget
( 
self
. 
userinterface
. 
next
, 
self
. 
locale
) 

2115 
self
. 
backup
= True 

2116 
self
. 
installing
= False 

2118 
	}


2118 def 
	$error_dialog
( 
self
, 
title
, 
msg
, 
fatal
= True ) : 

2119 
self
. 
	`run_automation_error_cmd
( ) 

2123 
saved_allowed_change_step
= 
self
. 
allowed_change_step


2124 
self
. 
	`allow_change_step
( True ) 

2126 
QMessageBox
. 
	`warning
( 
self
. 
userinterface
, 
title
, 
msg
, 
QMessageBox
. 
Ok
) 

2127 
self
. 
	`allow_change_step
( 
saved_allowed_change_step
) 

2128 if 
fatal
: 

2129 
self
. 
	`return_to_partitioning
( ) 

2131 
	}


2131 def 
	$question_dialog
( 
self
, 
title
, 
msg
, 
options
, 
use_templates
= True ) : 

2132 
self
. 
	`run_automation_error_cmd
( ) 

2134 assert 
	`len
( 
options
) <= 3 , 
options


2139 
saved_allowed_change_step
= 
self
. 
allowed_change_step


2140 
self
. 
	`allow_change_step
( True ) 

2141 
buttons
= { } 

2142 
messageBox
= 
	`QMessageBox
( 
QMessageBox
. 
Question
, 
title
, 
msg
, 
QMessageBox
. 
NoButton
, 
self
. 
userinterface
) 

2143 for 
option
in 
options
: 

2144 if 
use_templates
: 

2145 
text
= 
self
. 
	`get_string
( 
option
) 

2147 
text
= 
option


2148 if 
text
is None : 

2149 
text
= 
option


2152 if 
option
== 
options
[ - 1 ] : 

2153 
button
= 
messageBox
. 
	`addButton
( 
text
, 
QMessageBox
. 
AcceptRole
) 

2155 
button
= 
messageBox
. 
	`addButton
( 
text
, 
QMessageBox
. 
RejectRole
) 

2156 
buttons
[ 
button
] = 
option


2158 
response
= 
messageBox
. 
	`exec_
( ) 

2159 
self
. 
	`allow_change_step
( 
saved_allowed_change_step
) 

2161 if 
response
< 0 : 

2164 return 
buttons
[ 
messageBox
. 
	`clickedButton
( ) ] 

2166 
	}


2166 def 
	$refresh
( 
self
) : 

2167 
self
. 
app
. 
	`processEvents
( ) 

2170 
	}


2170 def 
	$run_main_loop
( 
self
) : 

2171 
self
. 
	`allow_change_step
( True ) 

2173 
self
. 
mainLoopRunning
= True 

2174 while 
self
. 
mainLoopRunning
: # nasty, but works OK 

2175 
self
. 
app
. 
	`processEvents
( ) 

2178 
	}


2178 def 
	$quit_main_loop
( 
self
) : 

2180 
self
. 
mainLoopRunning
= False 

2183 
	}


2183 def 
	$get_current_page
( 
self
) : 

2184 return 
self
. 
userinterface
. 
widgetStack
. 
	`indexOf
( 
self
. 
userinterface
. 
widgetStack
. 
	`currentWidget
( ) ) 

2186 
	}


2186 def 
	$on_fullname_changed
( 
self
) : 

2187 
self
. 
	`info_loop
( 
self
. 
userinterface
. 
fullname
) 

2189 
	}


2189 def 
	$on_username_changed
( 
self
) : 

2190 
self
. 
	`info_loop
( 
self
. 
userinterface
. 
username
) 

2192 
	}


2192 def 
	$on_password_changed
( 
self
) : 

2193 
self
. 
	`info_loop
( 
self
. 
userinterface
. 
password
) 

2195 
	}


2195 def 
	$on_verified_password_changed
( 
self
) : 

2196 
self
. 
	`info_loop
( 
self
. 
userinterface
. 
verified_password
) 

2198 
	}


2198 def 
	$on_hostname_changed
( 
self
) : 

2199 
self
. 
	`info_loop
( 
self
. 
userinterface
. 
hostname
) 

2201 
	}


2201 def 
	$update_new_size_label
( 
self
, 
value
) : 

2202 if 
self
. 
new_size_value
is None : 

2204 if 
self
. 
resize_max_size
is not None : 

2205 
size
= 
value
* 
self
. 
resize_max_size
/ 100 

2206 
text
= '%d%% (%s)' % ( 
value
, 
	`format_size
( 
size
) ) 

2208 
text
= '%d%%' % 
value


2209 
self
. 
new_size_value
. 
	`setText
( 
text
) 

2211 
	}


2211 def 
	$quit
( 
self
) : 

2215 
self
. 
current_page
= None 

2216 if 
self
. 
dbfilter
is not None : 

2217 
self
. 
dbfilter
. 
	`cancel_handler
( ) 

2218 
self
. 
app
. 
	`exit
( ) 

2219 
	}


2219 

	@ubiquity/frontend/mythbuntu_ui.py

41 import 
	~<sys


42 import 
	~<os


43 import 
	~<re


44 import 
	~<string


45 import 
	~<subprocess


46 import 
	~<syslog


47 import 
	~<signal


49 import 
	~<gtk


52 from 
mythbuntu_common
. 
lirc
import 
	~<LircHandler


53 from 
mythbuntu_common
. 
mysql
import 
	~<MySQLHandler


54 from 
mythbuntu_common
. 
dictionaries
import * 

57 from 
ubiquity
. 
components
import 
	~<mythbuntu
, 
	~<mythbuntu_install


60 from 
ubiquity
. 
misc
import * 

61 import 
	~<ubiquity
. 
	~<frontend
. 
	~<gtk_ui
as 
	~<ParentFrontend


62 
ParentFrontend
. 
install
= 
mythbuntu_install


63 
ParentFrontend
. 
summary
= 
mythbuntu_install


65 
VIDEOPAGE
= "mythbuntu_stepDrivers" 

67 
MYTHPAGES
= [ 

71 
VIDEOPAGE
, 

76 class 
	cWizard
( 
ParentFrontend
. 
Wizard
) : 

79 def 
	$__init__
( 
self
, 
distro
) : 

81 if 'UBIQUITY_MIGRATION_ASSISTANT' in 
os
. 
environ
: 

82 del 
os
. 
environ
[ 'UBIQUITY_MIGRATION_ASSISTANT' ] 

83 
place
= 
ParentFrontend
. 
BREADCRUMB_STEPS
[ "stepReady" ] 

86 
ParentFrontend
. 
BREADCRUMB_MAX_STEP
= 
place
+ 
	`len
( 
MYTHPAGES
) 

89 
ParentFrontend
. 
BREADCRUMB_STEPS
[ "stepReady" ] = 
place
+ 
	`len
( 
MYTHPAGES
) - 1 

92 
final_page
= 
MYTHPAGES
. 
	`pop
( ) 

93 
ParentFrontend
. 
BREADCRUMB_STEPS
[ 
final_page
] = 
place
+ 
	`len
( 
MYTHPAGES
) + 1 

94 
ParentFrontend
. 
SUBPAGES
. 
	`append
( 
final_page
) 

97 for 
string
in 
MYTHPAGES
: 

98 
ParentFrontend
. 
BREADCRUMB_STEPS
[ 
string
] = 
place


99 
ParentFrontend
. 
SUBPAGES
. 
	`insert
( 
	`len
( 
ParentFrontend
. 
SUBPAGES
) - 2 , 
string
) 

100 
place
+= 1 

102 
ParentFrontend
. 
Wizard
. 
	`__init__
( 
self
, 
distro
) 

104 
	}


104 def 
	$customize_installer
( 
self
) : 

108 
self
. 
	`set_auto_login
( True ) 

109 
self
. 
login_encrypt
. 
	`set_sensitive
( False ) 

112 
self
. 
pages
. 
	`pop
( ) 

115 for 
page
in [ 
mythbuntu
. 
MythbuntuInstallType
, 
mythbuntu
. 
MythbuntuServices
, 

116 
mythbuntu
. 
MythbuntuRemote
, 
mythbuntu
. 
MythbuntuDrivers
, 

117 
mythbuntu
. 
MythbuntuPasswords
, 
mythbuntu_install
. 
Summary
] : 

118 
self
. 
pages
. 
	`append
( 
page
) 

121 
self
. 
	`populate_lirc
( ) 

122 
self
. 
	`populate_video
( ) 

123 
self
. 
	`populate_mysql
( ) 

124 
self
. 
backup
= False 

126 
ParentFrontend
. 
Wizard
. 
	`customize_installer
( 
self
) 

128 
	}


128 def 
	$run_success_cmd
( 
self
) : 

130 if not 'UBIQUITY_AUTOMATIC' in 
os
. 
environ
and 
self
. 
	`get_installtype
( ) != "Frontend" : 

131 
self
. 
live_installer
. 
	`show
( ) 

132 
self
. 
installing
= False 

133 
self
. 
steps
. 
	`next_page
( ) 

134 
self
. 
back
. 
	`hide
( ) 

135 
self
. 
quit
. 
	`hide
( ) 

136 
self
. 
next
. 
	`set_label
( "Finish" ) 

137 
gtk
. 
	`main
( ) 

138 
self
. 
live_installer
. 
	`hide
( ) 

139 
ParentFrontend
. 
Wizard
. 
	`run_success_cmd
( 
self
) 

141 
	}


141 def 
	$set_page
( 
self
, 
n
) : 

142 if 
n
== 'MythbuntuRemote' : 

143 
cur
= 
self
. 
tab_remote_control


144 elif 
n
== 'MythbuntuDrivers' : 

145 
cur
= 
self
. 
mythbuntu_stepDrivers


146 elif 
n
== 'MythbuntuInstallType' : 

147 
cur
= 
self
. 
mythbuntu_stepCustomInstallType


148 elif 
n
== 'MythbuntuPasswords' : 

149 
cur
= 
self
. 
mythbuntu_stepPasswords


150 if "Master" not in 
self
. 
	`get_installtype
( ) : 

151 
self
. 
	`allow_go_forward
( False ) 

152 elif 
n
== 'MythbuntuServices' : 

153 
cur
= 
self
. 
mythbuntu_stepServices


154 
self
. 
vnc_option_hbox
. 
	`set_sensitive
( 
	`len
( 
self
. 
	`get_password
( ) ) >= 6 ) 

156 
ParentFrontend
. 
Wizard
. 
	`set_page
( 
self
, 
n
) 

158 
self
. 
	`run_automation_error_cmd
( ) 

159 
self
. 
backup
= False 

160 
self
. 
live_installer
. 
	`show
( ) 

161 
self
. 
	`set_current_page
( 
self
. 
steps
. 
	`page_num
( 
cur
) ) 

168 
	}


168 def 
	$populate_lirc
( 
self
) : 

170 
self
. 
remote_count
= 0 

171 
self
. 
transmitter_count
= 0 

172 
self
. 
lirc
= 
	`LircHandler
( ) 

173 for 
item
in 
self
. 
lirc
. 
	`get_possible_devices
( "remote" ) : 

174 if "Custom" not in 
item
and "Blaster" not in 
item
: 

175 
self
. 
remote_list
. 
	`append_text
( 
item
) 

176 
self
. 
remote_count
= 
self
. 
remote_count
+ 1 

177 for 
item
in 
self
. 
lirc
. 
	`get_possible_devices
( "transmitter" ) : 

178 if "Custom" not in 
item
: 

179 
self
. 
transmitter_list
. 
	`append_text
( 
item
) 

180 
self
. 
transmitter_count
= 
self
. 
transmitter_count
+ 1 

181 
self
. 
remote_list
. 
	`set_active
( 0 ) 

182 
self
. 
transmitter_list
. 
	`set_active
( 0 ) 

184 
	}


184 def 
	$populate_video
( 
self
) : 

186 
dictionary
= 
	`get_graphics_dictionary
( ) 

187 if 
	`len
( 
dictionary
) > 0 : 

188 for 
driver
in 
dictionary
: 

189 
self
. 
video_driver
. 
	`append_text
( 
driver
) 

190 
self
. 
video_driver
. 
	`append_text
( "Open Source Driver" ) 

191 
self
. 
video_driver
. 
	`set_active
( 
	`len
( 
dictionary
) ) 

192 
self
. 
tvoutstandard
. 
	`set_active
( 0 ) 

193 
self
. 
tvouttype
. 
	`set_active
( 0 ) 

195 for 
step
in 
ParentFrontend
. 
BREADCRUMB_STEPS
: 

196 if ( 
ParentFrontend
. 
BREADCRUMB_STEPS
[ 
step
] > 

197 
ParentFrontend
. 
BREADCRUMB_STEPS
[ 
VIDEOPAGE
] ) : 

198 
ParentFrontend
. 
BREADCRUMB_STEPS
[ 
step
] -= 1 

199 
ParentFrontend
. 
BREADCRUMB_MAX_STEP
-= 1 

200 
self
. 
steps
. 
	`remove_page
( 
self
. 
steps
. 
	`page_num
( 
self
. 
mythbuntu_stepDrivers
) ) 

201 
self
. 
pages
. 
	`remove
( 
mythbuntu
. 
MythbuntuDrivers
) 

203 
	}


203 def 
	$populate_mysql
( 
self
) : 

206 
self
. 
mysql
= 
	`MySQLHandler
( ) 

207 
new_pass_caller
= 
subprocess
. 
	`Popen
( [ 'pwgen' , '-s' , '8' ] , 
stdout
= 
subprocess
. 
PIPE
) 

208 
self
. 
mysql_password
. 
	`set_text
( 
string
. 
	`split
( 
new_pass_caller
. 
	`communicate
( ) [ 0 ] ) [ 0 ] ) 

210 
	}


210 def 
	$do_mythtv_setup
( 
self
, 
widget
) : 

212 
self
. 
live_installer
. 
	`hide
( ) 

213 
self
. 
	`refresh
( ) 

214 
	`execute_root
( "/usr/share/ubiquity/mythbuntu-setup" ) 

215 
self
. 
live_installer
. 
	`show
( ) 

217 
	}


217 def 
	$do_connection_test
( 
self
, 
widget
) : 

219 
config
= { } 

220 
config
[ "user" ] = 
self
. 
mysql_user
. 
	`get_text
( ) 

221 
config
[ "password" ] = 
self
. 
mysql_password
. 
	`get_text
( ) 

222 
config
[ "server" ] = 
self
. 
mysql_server
. 
	`get_text
( ) 

223 
config
[ "database" ] = 
self
. 
mysql_database
. 
	`get_text
( ) 

224 
self
. 
mysql
. 
	`update_config
( 
config
) 

225 
result
= 
self
. 
mysql
. 
	`do_connection_test
( ) 

226 
self
. 
	`allow_go_forward
( True ) 

227 
self
. 
connection_results_label
. 
	`show
( ) 

228 
self
. 
connection_results
. 
	`set_text
( 
result
) 

235 
	}


235 def 
	$set_installtype
( 
self
, 
type
) : 

237 if 
type
== "Set Top Box" : 

238 
self
. 
stb
. 
	`set_active
( True ) 

239 elif 
type
== "Frontend" : 

240 
self
. 
fe
. 
	`set_active
( True ) 

241 elif 
type
== "Slave Backend" : 

242 
self
. 
slave_be
. 
	`set_active
( True ) 

243 elif 
type
== "Master Backend" : 

244 
self
. 
master_be
. 
	`set_active
( True ) 

245 elif 
type
== "Slave Backend/Frontend" : 

246 
self
. 
slave_be_fe
. 
	`set_active
( True ) 

248 
self
. 
master_be_fe
. 
	`set_active
( True ) 

250 
	}


250 def 
	$set_service
( 
self
, 
name
, 
value
) : 

252 
lists
= [ 
	`get_services_dictionary
( 
self
) ] 

253 
self
. 
	`_preseed_list
( 
lists
, 
name
, 
value
) 

255 
	}


255 def 
	$set_driver
( 
self
, 
name
, 
value
) : 

257 
lists
= [ { 'video_driver' : 
self
. 
video_driver
, 

258 'tvout' : 
self
. 
tvouttype
, 

259 'tvstandard' : 
self
. 
tvoutstandard
} ] 

260 
self
. 
	`_preseed_list
( 
lists
, 
name
, 
value
) 

262 
	}


262 def 
	$set_password
( 
self
, 
name
, 
value
) : 

264 
lists
= [ { 'mysql_mythtv_user' : 
self
. 
mysql_user
, 

265 'mysql_mythtv_password' : 
self
. 
mysql_password
, 

266 'mysql_mythtv_dbname' : 
self
. 
mysql_database
, 

267 'mysql_host' : 
self
. 
mysql_server
} ] 

268 
self
. 
	`_preseed_list
( 
lists
, 
name
, 
value
) 

270 
	}


270 def 
	$set_lirc
( 
self
, 
question
, 
answer
) : 

272 if 
question
== "remote" : 

273 for 
i
in 
	`range
( 0 , 
self
. 
remote_count
) : 

274 
self
. 
remote_list
. 
	`set_active
( 
i
) 

275 
found
= False 

276 if 
self
. 
remote_list
. 
	`get_active_text
( ) == 
answer
: 

277 
found
= True 

279 if not 
found
: 

280 
self
. 
remote_list
. 
	`set_active
( 0 ) 

281 if 
question
== "transmitter" : 

282 for 
i
in 
	`range
( 0 , 
self
. 
transmitter_count
) : 

283 
self
. 
transmitter_list
. 
	`set_active
( 
i
) 

284 
found
= False 

285 if 
self
. 
transmitter_list
. 
	`get_active_text
( ) == 
answer
: 

286 
found
= True 

288 if not 
found
: 

289 
self
. 
transmitter_list
. 
	`set_active
( 0 ) 

291 
	}


291 def 
	$_preseed_list
( 
self
, 
lists
, 
names
, 
value
) : 

293 
new_value
= 
	`create_bool
( 
value
) 

294 for 
list
in 
lists
: 

295 for 
item
in 
list
: 

296 for 
name
in 
string
. 
	`split
( 
names
) : 

297 if 
item
== 
name
: 

299 if 
	`type
( 
list
[ 
item
] ) == 
gtk
. 
CheckButton
: 

300 
list
[ 
item
] . 
	`set_active
( 
new_value
) 

301 elif 
	`type
( 
list
[ 
item
] ) == 
gtk
. 
Entry
: 

302 
list
[ 
item
] . 
	`set_text
( 
new_value
) 

303 elif 
	`type
( 
list
[ 
item
] ) == 
gtk
. 
ComboBox
: 

304 for 
iteration
in 
	`range
( 
	`len
( 
list
[ 
item
] ) , 0 ) : 

305 
list
[ 
item
] . 
	`set_active
( 
iteration
) 

306 if 
list
[ 
item
] . 
	`get_active_text
( ) == 
new_value
: 

309 
list
[ 
item
] . 
	`set_active_text
( 
new_value
) 

316 
	}


316 def 
	$get_installtype
( 
self
) : 

318 if 
self
. 
master_be_fe
. 
	`get_active
( ) : 

320 elif 
self
. 
slave_be_fe
. 
	`get_active
( ) : 

322 elif 
self
. 
master_be
. 
	`get_active
( ) : 

324 elif 
self
. 
slave_be
. 
	`get_active
( ) : 

326 elif 
self
. 
fe
. 
	`get_active
( ) : 

328 elif 
self
. 
stb
. 
	`get_active
( ) : 

331 
	}


331 def 
	$_build_static_list
( 
self
, 
lists
) : 

333 
total_list
= { } 

334 for 
list
in 
lists
: 

335 for 
item
in 
list
: 

336 if 
	`type
( 
list
[ 
item
] ) == 
str
: 

337 
total_list
[ 
item
] = 
list
[ 
item
] 

338 elif 
	`type
( 
list
[ 
item
] ) == 
gtk
. 
CheckButton
: 

339 
total_list
[ 
item
] = 
list
[ 
item
] . 
	`get_active
( ) 

340 elif 
	`type
( 
list
[ 
item
] ) == 
gtk
. 
Entry
: 

341 
total_list
[ 
item
] = 
list
[ 
item
] . 
	`get_text
( ) 

343 
total_list
[ 
item
] = 
list
[ 
item
] . 
	`get_active_text
( ) 

344 return 
total_list


346 
	}


346 def 
	$get_services
( 
self
) : 

348 return 
self
. 
	`_build_static_list
( [ 
	`get_services_dictionary
( 
self
) ] ) 

350 
	}


350 def 
	$get_drivers
( 
self
) : 

351 
video_drivers
= 
	`get_graphics_dictionary
( ) 

352 
active_video_driver
= 
self
. 
video_driver
. 
	`get_active_text
( ) 

353 for 
item
in 
video_drivers
: 

354 if ( 
active_video_driver
== 
item
) : 

355 
active_video_driver
= 
video_drivers
[ 
item
] 

357 return 
self
. 
	`_build_static_list
( [ { 'video_driver' : 
active_video_driver
, 

358 'tvout' : 
self
. 
tvouttype
, 

359 'tvstandard' : 
self
. 
tvoutstandard
} ] ) 

361 
	}


361 def 
	$get_mythtv_passwords
( 
self
) : 

362 return 
self
. 
	`_build_static_list
( [ { 'mysql_mythtv_user' : 
self
. 
mysql_user
, 

363 'mysql_mythtv_password' : 
self
. 
mysql_password
, 

364 'mysql_mythtv_dbname' : 
self
. 
mysql_database
, 

365 'mysql_host' : 
self
. 
mysql_server
} ] ) 

367 
	}


367 def 
	$get_lirc
( 
self
, 
type
) : 

368 
item
= { "modules" : "" , "device" : "" , "driver" : "" , "lircd_conf" : "" } 

369 if 
type
== "remote" : 

370 
item
[ "remote" ] = 
self
. 
remote_list
. 
	`get_active_text
( ) 

371 elif 
type
== "transmitter" : 

372 
item
[ "transmitter" ] = 
self
. 
transmitter_list
. 
	`get_active_text
( ) 

373 return 
item


380 
	}


380 def 
	$toggle_tv_out
( 
self
, 
widget
) : 

382 if ( 
self
. 
tvouttype
. 
	`get_active
( ) == 0 ) : 

383 
self
. 
tvoutstandard
. 
	`set_active
( 0 ) 

384 elif ( ( 
self
. 
tvouttype
. 
	`get_active
( ) == 1 or 
self
. 
tvouttype
. 
	`get_active
( ) == 2 ) and ( 
self
. 
tvoutstandard
. 
	`get_active
( ) == 0 or 
self
. 
tvoutstandard
. 
	`get_active
( ) >= 11 ) ) : 

385 
self
. 
tvoutstandard
. 
	`set_active
( 10 ) 

386 elif 
self
. 
tvouttype
. 
	`get_active
( ) == 3 : 

387 
self
. 
tvoutstandard
. 
	`set_active
( 11 ) 

389 
	}


389 def 
	$toggle_tv_standard
( 
self
, 
widget
) : 

391 if ( 
self
. 
tvoutstandard
. 
	`get_active
( ) >= 11 ) : 

392 
self
. 
tvouttype
. 
	`set_active
( 3 ) 

393 elif ( 
self
. 
tvoutstandard
. 
	`get_active
( ) < 11 and 
self
. 
tvoutstandard
. 
	`get_active
( ) > 0 and 
self
. 
tvouttype
. 
	`get_active
( ) == 0 ) : 

394 
self
. 
tvouttype
. 
	`set_active
( 1 ) 

395 elif ( 
self
. 
tvoutstandard
. 
	`get_active
( ) < 11 and 
self
. 
tvouttype
. 
	`get_active
( ) == 3 ) : 

396 
self
. 
tvouttype
. 
	`set_active
( 1 ) 

397 elif ( 
self
. 
tvoutstandard
. 
	`get_active
( ) == 0 ) : 

398 
self
. 
tvouttype
. 
	`set_active
( 0 ) 

400 
	}


400 def 
	$video_changed
( 
self
, 
widget
) : 

402 
drivers
= 
	`get_graphics_dictionary
( ) 

403 if ( 
widget
is not None and 
widget
. 
	`get_name
( ) == 'video_driver' ) : 

404 
type
= 
widget
. 
	`get_active
( ) 

405 if ( 
type
< 
	`len
( 
drivers
) ) : 

406 
self
. 
tvout_vbox
. 
	`set_sensitive
( True ) 

408 
self
. 
tvout_vbox
. 
	`set_sensitive
( False ) 

409 
self
. 
tvoutstandard
. 
	`set_active
( 0 ) 

410 
self
. 
tvouttype
. 
	`set_active
( 0 ) 

412 
	}


412 def 
	$toggle_customtype
( 
self
, 
widget
) : 

415 if "Master" in 
self
. 
	`get_installtype
( ) : 

416 
self
. 
mysql_option_hbox
. 
	`show
( ) 

418 
self
. 
enablemysql
. 
	`set_active
( False ) 

419 
self
. 
mysql_option_hbox
. 
	`hide
( ) 

421 if "Backend" in 
self
. 
	`get_installtype
( ) : 

422 
self
. 
samba_option_hbox
. 
	`show
( ) 

423 
self
. 
nfs_option_hbox
. 
	`show
( ) 

425 
self
. 
enablesamba
. 
	`set_active
( False ) 

426 
self
. 
enablenfs
. 
	`set_active
( False ) 

427 
self
. 
samba_option_hbox
. 
	`hide
( ) 

428 
self
. 
nfs_option_hbox
. 
	`hide
( ) 

430 
	}


430 def 
	$toggle_ir
( 
self
, 
widget
) : 

432 if 
widget
is not None : 

434 if 
widget
. 
	`get_name
( ) == 'remotecontrol' : 

435 
self
. 
remote_hbox
. 
	`set_sensitive
( 
widget
. 
	`get_active
( ) ) 

436 
self
. 
generate_lircrc_checkbox
. 
	`set_sensitive
( 
widget
. 
	`get_active
( ) ) 

437 if 
widget
. 
	`get_active
( ) and 
self
. 
remote_list
. 
	`get_active
( ) == 0 : 

438 
self
. 
remote_list
. 
	`set_active
( 1 ) 

440 
self
. 
remote_list
. 
	`set_active
( 0 ) 

442 elif 
widget
. 
	`get_name
( ) == "transmittercontrol" : 

443 
self
. 
transmitter_hbox
. 
	`set_sensitive
( 
widget
. 
	`get_active
( ) ) 

444 if 
widget
. 
	`get_active
( ) : 

445 if 
self
. 
transmitter_list
. 
	`get_active
( ) == 0 : 

446 
self
. 
transmitter_list
. 
	`set_active
( 1 ) 

448 
self
. 
transmitter_list
. 
	`set_active
( 0 ) 

450 elif 
widget
. 
	`get_name
( ) == 'remote_list' : 

451 
self
. 
generate_lircrc_checkbox
. 
	`set_active
( True ) 

452 if 
self
. 
remote_list
. 
	`get_active
( ) == 0 : 

453 
self
. 
remotecontrol
. 
	`set_active
( False ) 

454 
self
. 
generate_lircrc_checkbox
. 
	`set_active
( False ) 

456 elif 
widget
. 
	`get_name
( ) == 'transmitter_list' : 

457 if 
self
. 
transmitter_list
. 
	`get_active
( ) == 0 : 

458 
self
. 
transmittercontrol
. 
	`set_active
( False ) 

458 
	}


	@ubiquity/frontend/gtk_ui.py

34 import 
	~<sys


35 import 
	~<os


36 import 
	~<datetime


37 import 
	~<subprocess


38 import 
	~<math


39 import 
	~<traceback


40 import 
	~<syslog


41 import 
	~<atexit


42 import 
	~<signal


43 import 
	~<xml
. 
	~<sax
. 
	~<saxutils


44 import 
	~<gettext


46 import 
	~<pygtk


47 
pygtk
. 
	`require
( '2.0' ) 

48 import 
	~<pango


49 import 
	~<gobject


50 
gobject
. 
	`threads_init
( ) 

51 import 
	~<gtk
. 
	~<glade


53 import 
	~<debconf


55 from 
ubiquity
import 
	~<filteredcommand
, 
	~<gconftool
, 
	~<i18n
, 
	~<osextras
, 
	~<validation
, 

56 
timezone_map
, 
segmented_bar
, 
wrap_label


57 from 
ubiquity
. 
misc
import * 

58 from 
ubiquity
. 
components
import 
	~<console_setup
, 
	~<language
, 
	~<timezone
, 
	~<usersetup
, 

59 
partman
, 
partman_commit
, 

60 
summary
, 
install
, 
migrationassistant


61 import 
	~<ubiquity
. 
	~<emap


62 import 
	~<ubiquity
. 
	~<tz


63 import 
	~<ubiquity
. 
	~<progressposition


64 from 
ubiquity
. 
frontend
. 
base
import 
	~<BaseFrontend


67 
PATH
= '/usr/share/ubiquity' 

70 
GLADEDIR
= 
os
. 
path
. 
	`join
( 
PATH
, 'glade' ) 

73 
LOCALEDIR
= "/usr/share/locale" 

75 
BREADCRUMB_STEPS
= { 

85 
BREADCRUMB_MAX_STEP
= 7 

89 
SUBPAGES
= [ 

101 class 
	cWizard
( 
BaseFrontend
) : 

103 def 
	$__init__
( 
self
, 
distro
) : 

104 def 
	$add_subpage
( 
self
, 
steps
, 
name
) : 

107 
gladefile
= 
GLADEDIR
+ '/' + 
name
+ '.glade' 

108 
gladexml
= 
gtk
. 
glade
. 
	`XML
( 
gladefile
, 
name
) 

109 
widget
= 
gladexml
. 
	`get_widget
( 
name
) 

110 
steps
. 
	`append_page
( 
widget
) 

111 
	`add_widgets
( 
self
, 
gladexml
) 

112 
gladexml
. 
	`signal_autoconnect
( 
self
) 

114 
	}


114 def 
	$add_widgets
( 
self
, 
glade
) : 

116 for 
widget
in 
glade
. 
	`get_widget_prefix
( "" ) : 

117 
self
. 
all_widgets
. 
	`add
( 
widget
) 

118 
	`setattr
( 
self
, 
widget
. 
	`get_name
( ) , 
widget
) 

125 if 
	`isinstance
( 
widget
, 
gtk
. 
Label
) : 

126 
widget
. 
	`set_property
( 'can-focus' , False ) 

128 
	}


128 
BaseFrontend
. 
	`__init__
( 
self
, 
distro
) 

130 
self
. 
previous_excepthook
= 
sys
. 
excepthook


131 
sys
. 
excepthook
= 
self
. 
excepthook


134 
self
. 
slideshow_initialized
= False 

135 
self
. 
all_widgets
= 
	`set
( ) 

136 
self
. 
gconf_previous
= { } 

137 
self
. 
thunar_previous
= { } 

138 
self
. 
language_questions
= ( 'live_installer' , 

146 
self
. 
current_page
= None 

147 
self
. 
first_seen_page
= None 

148 
self
. 
backup
= None 

149 
self
. 
allowed_change_step
= True 

150 
self
. 
allowed_go_backward
= True 

151 
self
. 
allowed_go_forward
= True 

152 
self
. 
stay_on_page
= False 

153 
self
. 
progress_position
= 
ubiquity
. 
progressposition
. 
	`ProgressPosition
( ) 

154 
self
. 
progress_cancelled
= False 

155 
self
. 
default_keyboard_layout
= None 

156 
self
. 
default_keyboard_variant
= None 

157 
self
. 
autopartition_extras
= { } 

158 
self
. 
resize_min_size
= None 

159 
self
. 
resize_max_size
= None 

160 
self
. 
resize_orig_size
= None 

161 
self
. 
resize_path
= '' 

162 
self
. 
new_size_scale
= None 

163 
self
. 
ma_choices
= [ ] 

164 
self
. 
username_combo
= None 

165 
self
. 
username_changed_id
= None 

166 
self
. 
hostname_changed_id
= None 

167 
self
. 
username_edited
= False 

168 
self
. 
hostname_edited
= False 

169 
self
. 
installing
= False 

170 
self
. 
installing_no_return
= False 

171 
self
. 
returncode
= 0 

172 
self
. 
partition_bars
= { } 

174 
self
. 
release_color
= 'D07316' 

175 
self
. 
auto_colors
= [ '3465a4' , '73d216' , 'f57900' ] 

176 
self
. 
dev_colors
= { } 

177 
self
. 
segmented_bar_vbox
= None 

178 
self
. 
format_warnings
= { } 

179 
self
. 
format_warning
= None 

180 
self
. 
format_warning_align
= None 

182 
self
. 
laptop
= 
	`execute
( "laptop-detect" ) 

185 
dbfilter
= 
language
. 
	`Language
( 
self
, 
self
. 
	`debconf_communicator
( ) ) 

186 
dbfilter
. 
	`cleanup
( ) 

187 
dbfilter
. 
db
. 
	`shutdown
( ) 

189 
gobject
. 
	`timeout_add
( 30000 , 
self
. 
poke_screensaver
) 

192 
self
. 
watch
= 
gtk
. 
gdk
. 
	`Cursor
( 
gtk
. 
gdk
. 
WATCH
) 

195 
self
. 
	`set_locales
( ) 

197 
gtk
. 
	`window_set_default_icon_from_file
( '/usr/share/pixmaps/' 

201 
self
. 
glade
= 
gtk
. 
glade
. 
	`XML
( '%s/ubiquity.glade' % 
GLADEDIR
) 

202 
	`add_widgets
( 
self
, 
self
. 
glade
) 

204 
steps
= 
self
. 
glade
. 
	`get_widget
( "steps" ) 

205 for 
page
in 
SUBPAGES
: 

206 
	`add_subpage
( 
self
, 
steps
, 
page
) 

208 if 'UBIQUITY_MIGRATION_ASSISTANT' in 
os
. 
environ
: 

209 
self
. 
pages
= [ 
language
. 
Language
, 
timezone
. 
Timezone
, 

210 
console_setup
. 
ConsoleSetup
, 
partman
. 
Partman
, 

211 
usersetup
. 
UserSetup
, 
migrationassistant
. 
MigrationAssistant
, 

212 
summary
. 
Summary
] 

214 
self
. 
pages
= [ 
language
. 
Language
, 
timezone
. 
Timezone
, 

215 
console_setup
. 
ConsoleSetup
, 
partman
. 
Partman
, 

216 
usersetup
. 
UserSetup
, 
summary
. 
Summary
] 

218 
self
. 
	`translate_widgets
( ) 

220 
self
. 
	`customize_installer
( ) 

223 def 
	$excepthook
( 
self
, 
exctype
, 
excvalue
, 
exctb
) : 

226 if ( 
	`issubclass
( 
exctype
, 
KeyboardInterrupt
) or 

227 
	`issubclass
( 
exctype
, 
SystemExit
) ) : 

230 
tbtext
= '' . 
	`join
( 
traceback
. 
	`format_exception
( 
exctype
, 
excvalue
, 
exctb
) ) 

231 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 

233 for 
line
in 
tbtext
. 
	`split
( '\n' ) : 

234 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 
line
) 

235 print >> 
sys
. 
stderr
, ( "Exception in GTK frontend" 

237 print >> 
sys
. 
stderr
, 
tbtext


239 
self
. 
	`post_mortem
( 
exctype
, 
excvalue
, 
exctb
) 

241 if 
os
. 
path
. 
	`exists
( '/usr/share/apport/apport-gtk' ) : 

242 
self
. 
	`previous_excepthook
( 
exctype
, 
excvalue
, 
exctb
) 

244 
self
. 
crash_detail_label
. 
	`set_text
( 
tbtext
) 

245 
self
. 
crash_dialog
. 
	`run
( ) 

246 
self
. 
crash_dialog
. 
	`hide
( ) 

248 
sys
. 
	`exit
( 1 ) 

251 
	}


251 def 
	$thunar_set_volmanrc
( 
self
, 
fields
) : 

252 
previous
= { } 

253 if 'SUDO_USER' in 
os
. 
environ
: 

254 
thunar_dir
= 
os
. 
path
. 
	`expanduser
( '~%s/.config/Thunar' % 

255 
os
. 
environ
[ 'SUDO_USER' ] ) 

257 
thunar_dir
= 
os
. 
path
. 
	`expanduser
( '~/.config/Thunar' ) 

258 if 
os
. 
path
. 
	`isdir
( 
thunar_dir
) : 

259 import 
	~<ConfigParser


260 
thunar_volmanrc
= '%s/volmanrc' % 
thunar_dir


261 
parser
= 
ConfigParser
. 
	`RawConfigParser
( ) 

262 
parser
. 
optionxform
= 
str
# case-sensitive 

263 
parser
. 
	`read
( 
thunar_volmanrc
) 

264 if not 
parser
. 
	`has_section
( 'Configuration' ) : 

265 
parser
. 
	`add_section
( 'Configuration' ) 

266 for 
key
, 
value
in 
fields
. 
	`iteritems
( ) : 

267 if 
parser
. 
	`has_option
( 'Configuration' , 
key
) : 

268 
previous
[ 
key
] = 
parser
. 
	`get
( 'Configuration' , 
key
) 

270 
previous
[ 
key
] = 'TRUE' 

271 
parser
. 
	`set
( 'Configuration' , 
key
, 
value
) 

273 
thunar_volmanrc_new
= 
	`open
( '%s.new' % 
thunar_volmanrc
, 'w' ) 

274 
parser
. 
	`write
( 
thunar_volmanrc_new
) 

275 
thunar_volmanrc_new
. 
	`close
( ) 

276 
os
. 
	`rename
( '%s.new' % 
thunar_volmanrc
, 
thunar_volmanrc
) 

277 except ( 
KeyboardInterrupt
, 
SystemExit
) : 

281 return 
previous


285 
	}


285 def 
	$disable_volume_manager
( 
self
) : 

286 
gvm_root
= '/desktop/gnome/volume_manager' 

287 
gvm_automount_drives
= '%s/automount_drives' % 
gvm_root


288 
gvm_automount_media
= '%s/automount_media' % 
gvm_root


289 
volumes_visible
= '/apps/nautilus/desktop/volumes_visible' 

290 
media_automount
= '/apps/nautilus/preferences/media_automount' 

291 
media_automount_open
= '/apps/nautilus/preferences/media_automount_open' 

292 
media_autorun_never
= '/apps/nautilus/preferences/media_autorun_never' 

293 
self
. 
gconf_previous
= { } 

294 for 
gconf_key
in ( 
gvm_automount_drives
, 
gvm_automount_media
, 

295 
volumes_visible
, 

296 
media_automount
, 
media_automount_open
) : 

297 
self
. 
gconf_previous
[ 
gconf_key
] = 
gconftool
. 
	`get
( 
gconf_key
) 

298 if 
self
. 
gconf_previous
[ 
gconf_key
] != 'false' : 

299 
gconftool
. 
	`set
( 
gconf_key
, 'bool' , 'false' ) 

300 for 
gconf_key
in ( 
media_autorun_never
, ) : 

301 
self
. 
gconf_previous
[ 
gconf_key
] = 
gconftool
. 
	`get
( 
gconf_key
) 

302 if 
self
. 
gconf_previous
[ 
gconf_key
] != 'true' : 

303 
gconftool
. 
	`set
( 
gconf_key
, 'bool' , 'true' ) 

305 
self
. 
thunar_previous
= 
self
. 
	`thunar_set_volmanrc
( 

308 
atexit
. 
	`register
( 
self
. 
enable_volume_manager
) 

310 
	}


310 def 
	$enable_volume_manager
( 
self
) : 

311 
gvm_root
= '/desktop/gnome/volume_manager' 

312 
gvm_automount_drives
= '%s/automount_drives' % 
gvm_root


313 
gvm_automount_media
= '%s/automount_media' % 
gvm_root


314 
volumes_visible
= '/apps/nautilus/desktop/volumes_visible' 

315 
media_automount
= '/apps/nautilus/preferences/media_automount' 

316 
media_automount_open
= '/apps/nautilus/preferences/media_automount_open' 

317 
media_autorun_never
= '/apps/nautilus/preferences/media_autorun_never' 

318 for 
gconf_key
in ( 
gvm_automount_drives
, 
gvm_automount_media
, 

319 
volumes_visible
, 

320 
media_automount
, 
media_automount_open
) : 

321 if 
self
. 
gconf_previous
[ 
gconf_key
] == '' : 

322 
gconftool
. 
	`unset
( 
gconf_key
) 

323 elif 
self
. 
gconf_previous
[ 
gconf_key
] != 'false' : 

324 
gconftool
. 
	`set
( 
gconf_key
, 'bool' , 

325 
self
. 
gconf_previous
[ 
gconf_key
] ) 

326 for 
gconf_key
in ( 
media_autorun_never
, ) : 

327 if 
self
. 
gconf_previous
[ 
gconf_key
] == '' : 

328 
gconftool
. 
	`unset
( 
gconf_key
) 

329 elif 
self
. 
gconf_previous
[ 
gconf_key
] != 'true' : 

330 
gconftool
. 
	`set
( 
gconf_key
, 'bool' , 

331 
self
. 
gconf_previous
[ 
gconf_key
] ) 

333 if 
self
. 
thunar_previous
: 

334 
self
. 
	`thunar_set_volmanrc
( 
self
. 
thunar_previous
) 

337 
	}


337 def 
	$run
( 
self
) : 

340 if 
os
. 
	`getuid
( ) != 0 : 

341 
title
= ( 'This installer must be run with administrative ' 

343 
dialog
= 
gtk
. 
	`MessageDialog
( 
self
. 
live_installer
, 
gtk
. 
DIALOG_MODAL
, 

344 
gtk
. 
MESSAGE_ERROR
, 
gtk
. 
BUTTONS_CLOSE
, 

345 
title
) 

346 
dialog
. 
	`run
( ) 

347 
sys
. 
	`exit
( 1 ) 

349 
self
. 
	`disable_volume_manager
( ) 

352 
got_intro
= 
self
. 
	`show_intro
( ) 

353 
self
. 
	`allow_change_step
( True ) 

356 
self
. 
glade
. 
	`signal_autoconnect
( 
self
) 

360 
self
. 
username_changed_id
= 
self
. 
username
. 
	`connect
( 

361 'changed' , 
self
. 
on_username_changed
) 

362 
self
. 
hostname_changed_id
= 
self
. 
hostname
. 
	`connect
( 

363 'changed' , 
self
. 
on_hostname_changed
) 

365 
self
. 
pagesindex
= 0 

366 
pageslen
= 
	`len
( 
self
. 
pages
) 

368 if 'UBIQUITY_AUTOMATIC' in 
os
. 
environ
: 

369 
got_intro
= False 

371 
self
. 
	`initialize_slideshow
( ) 

373 
self
. 
debconf_progress_window
. 
	`modify_bg
( 
gtk
. 
STATE_NORMAL
, 
gtk
. 
gdk
. 
	`color_parse
( "#2E303B" ) ) 

376 
self
. 
	`debconf_progress_start
( 0 , 
pageslen
, 

377 
self
. 
	`get_string
( 'ubiquity/install/title' ) ) 

378 
self
. 
	`refresh
( ) 

381 if 
got_intro
: 

382 global 
BREADCRUMB_STEPS
, 
BREADCRUMB_MAX_STEP


383 for 
step
in 
BREADCRUMB_STEPS
: 

384 
BREADCRUMB_STEPS
[ 
step
] += 1 

385 
BREADCRUMB_STEPS
[ "stepWelcome" ] = 1 

386 
BREADCRUMB_MAX_STEP
+= 1 

387 
first_step
= 
self
. 
stepWelcome


389 
first_step
= 
self
. 
stepLanguage


390 
self
. 
	`set_current_page
( 
self
. 
steps
. 
	`page_num
( 
first_step
) ) 

391 if 
got_intro
: 

395 
self
. 
next
. 
	`grab_focus
( ) 

399 
self
. 
language_treeview
. 
	`grab_focus
( ) 

401 if not 'UBIQUITY_MIGRATION_ASSISTANT' in 
os
. 
environ
: 

402 
self
. 
steps
. 
	`remove_page
( 
self
. 
steps
. 
	`page_num
( 
self
. 
stepMigrationAssistant
) ) 

403 for 
step
in 
BREADCRUMB_STEPS
: 

404 if ( 
BREADCRUMB_STEPS
[ 
step
] > 

405 
BREADCRUMB_STEPS
[ "stepMigrationAssistant" ] ) : 

406 
BREADCRUMB_STEPS
[ 
step
] -= 1 

407 
BREADCRUMB_MAX_STEP
-= 1 

409 if 
got_intro
: 

410 
gtk
. 
	`main
( ) 

412 while ( 
self
. 
pagesindex
< 
pageslen
) : 

413 if 
self
. 
current_page
== None : 

416 
old_dbfilter
= 
self
. 
dbfilter


417 
self
. 
dbfilter
= 
self
. 
pages
[ 
self
. 
pagesindex
] ( 
self
) 

419 
self
. 
	`prepare_page
( ) 

423 if 
self
. 
dbfilter
is not None and 
self
. 
dbfilter
!= 
old_dbfilter
: 

424 
self
. 
	`allow_change_step
( False ) 

425 
self
. 
dbfilter
. 
	`start
( 
auto_process
= True ) 

426 
gtk
. 
	`main
( ) 

428 if 
self
. 
backup
or 
self
. 
	`dbfilter_handle_status
( ) : 

429 if 
self
. 
installing
: 

430 
self
. 
	`progress_loop
( ) 

431 elif 
self
. 
current_page
is not None and not 
self
. 
backup
: 

432 
self
. 
	`process_step
( ) 

433 if not 
self
. 
stay_on_page
: 

434 
self
. 
pagesindex
= 
self
. 
pagesindex
+ 1 

435 if 'UBIQUITY_AUTOMATIC' in 
os
. 
environ
: 

437 
self
. 
	`debconf_progress_step
( 1 ) 

438 
self
. 
	`refresh
( ) 

439 if 
self
. 
backup
: 

440 if 
self
. 
pagesindex
> 0 : 

441 
step
= 
self
. 
	`step_name
( 
self
. 
steps
. 
	`get_current_page
( ) ) 

442 if not 
step
== 'stepPartAdvanced' : 

443 
self
. 
pagesindex
= 
self
. 
pagesindex
- 1 

445 while 
gtk
. 
	`events_pending
( ) : 

446 
gtk
. 
	`main_iteration
( ) 

451 if 
self
. 
pagesindex
== 
pageslen
: 

453 
self
. 
live_installer
. 
	`hide
( ) 

454 
self
. 
current_page
= None 

455 
self
. 
installing
= True 

456 
self
. 
	`progress_loop
( ) 

457 return 
self
. 
returncode


460 
	}


460 def 
	$customize_installer
( 
self
) : 

463 
PIXMAPSDIR
= 
os
. 
path
. 
	`join
( 
PATH
, 'pixmaps' , 
self
. 
distro
) 

466 if ( 
gtk
. 
gdk
. 
	`get_default_root_window
( ) . 
	`get_screen
( ) . 
	`get_width
( ) > 1024 ) : 

467 
logo
= 
os
. 
path
. 
	`join
( 
PIXMAPSDIR
, "logo_1280.jpg" ) 

468 
photo
= 
os
. 
path
. 
	`join
( 
PIXMAPSDIR
, "photo_1280.jpg" ) 

470 
logo
= 
os
. 
path
. 
	`join
( 
PIXMAPSDIR
, "logo_1024.jpg" ) 

471 
photo
= 
os
. 
path
. 
	`join
( 
PIXMAPSDIR
, "photo_1024.jpg" ) 

472 if not 
os
. 
path
. 
	`exists
( 
logo
) : 

473 
logo
= None 

474 if not 
os
. 
path
. 
	`exists
( 
photo
) : 

475 
photo
= None 

477 
self
. 
logo_image
. 
	`set_from_file
( 
logo
) 

478 
self
. 
photo
. 
	`set_from_file
( 
photo
) 

480 if 'UBIQUITY_ONLY' in 
os
. 
environ
: 

481 
self
. 
live_installer
. 
	`fullscreen
( ) 

483 if 
self
. 
oem_config
: 

484 
self
. 
live_installer
. 
	`set_title
( 
self
. 
	`get_string
( 'oem_config_title' ) ) 

485 
self
. 
oem_id_vbox
. 
	`show
( ) 

487 
self
. 
oem_id_entry
. 
	`set_text
( 

488 
self
. 
	`debconf_operation
( 'get' , 'oem-config/id' ) ) 

489 except 
debconf
. 
DebconfError
: 

491 
self
. 
fullname
. 
	`set_text
( 'OEM Configuration (temporary user)' ) 

492 
self
. 
fullname
. 
	`set_editable
( False ) 

493 
self
. 
fullname
. 
	`set_sensitive
( False ) 

494 
self
. 
username
. 
	`set_text
( 'oem' ) 

495 
self
. 
username
. 
	`set_editable
( False ) 

496 
self
. 
username
. 
	`set_sensitive
( False ) 

497 
self
. 
username_edited
= True 

498 if 
self
. 
laptop
: 

499 
self
. 
hostname
. 
	`set_text
( 'oem-laptop' ) 

501 
self
. 
hostname
. 
	`set_text
( 'oem-desktop' ) 

502 
self
. 
hostname_edited
= True 

503 
self
. 
login_vbox
. 
	`hide
( ) 

505 
	`execute_root
( 'apt-install' , 'oem-config-gtk' ) 

507 if not 'UBIQUITY_AUTOMATIC' in 
os
. 
environ
: 

508 
self
. 
live_installer
. 
	`show
( ) 

509 
self
. 
	`allow_change_step
( False ) 

512 
release_notes
= 
	`open
( '/cdrom/.disk/release_notes_url' ) 

513 
self
. 
release_notes_url
. 
	`set_uri
( 

514 
release_notes
. 
	`read
( ) . 
	`rstrip
( '\n' ) ) 

515 
release_notes
. 
	`close
( ) 

516 except ( 
KeyboardInterrupt
, 
SystemExit
) : 

519 
self
. 
release_notes_vbox
. 
	`hide
( ) 

520 
gtk
. 
	`link_button_set_uri_hook
( 
self
. 
link_button_browser
) 

522 if 'UBIQUITY_OLD_TZMAP' in 
os
. 
environ
: 

523 
self
. 
tzmap
= 
	`TimezoneMap
( 
self
) 

524 
self
. 
tzmap
. 
tzmap
. 
	`show
( ) 

526 
self
. 
tzdb
= 
ubiquity
. 
tz
. 
	`Database
( ) 

527 
self
. 
tzmap
= 
timezone_map
. 
	`TimezoneMap
( 
self
. 
tzdb
, '/usr/share/ubiquity/pixmaps/timezone' ) 

528 
self
. 
tzmap
. 
	`connect
( 'city-selected' , 
self
. 
select_city
) 

529 
self
. 
timezone_map_window
. 
	`add
( 
self
. 
tzmap
) 

530 
self
. 
	`setup_timezone_page
( ) 

531 
self
. 
tzmap
. 
	`show
( ) 

533 
self
. 
action_bar
= 
segmented_bar
. 
	`SegmentedBarSlider
( ) 

534 
self
. 
action_bar
. 
h_padding
= 
self
. 
action_bar
. 
bar_height
/ 2 

535 
sw
= 
gtk
. 
	`ScrolledWindow
( ) 

536 
sw
. 
	`add_with_viewport
( 
self
. 
action_bar
) 

537 
sw
. 
	`set_policy
( 
gtk
. 
POLICY_AUTOMATIC
, 
gtk
. 
POLICY_NEVER
) 

538 
sw
. 
child
. 
	`set_shadow_type
( 
gtk
. 
SHADOW_NONE
) 

539 
sw
. 
	`show_all
( ) 

540 
self
. 
action_bar_eb
. 
	`add
( 
sw
) 

542 
self
. 
before_bar
= 
segmented_bar
. 
	`SegmentedBar
( ) 

543 
self
. 
before_bar
. 
h_padding
= 
self
. 
before_bar
. 
bar_height
/ 2 

544 
sw
= 
gtk
. 
	`ScrolledWindow
( ) 

545 
sw
. 
	`add_with_viewport
( 
self
. 
before_bar
) 

546 
sw
. 
	`set_policy
( 
gtk
. 
POLICY_AUTOMATIC
, 
gtk
. 
POLICY_NEVER
) 

547 
sw
. 
child
. 
	`set_shadow_type
( 
gtk
. 
SHADOW_NONE
) 

548 
sw
. 
	`show_all
( ) 

549 
self
. 
before_bar_eb
. 
	`add
( 
sw
) 

551 if 'UBIQUITY_DEBUG' in 
os
. 
environ
: 

552 
self
. 
password_debug_warning_label
. 
	`show
( ) 

554 
self
. 
previous_partitioning_page
= 

555 
self
. 
steps
. 
	`page_num
( 
self
. 
stepPartAuto
) 

558 
self
. 
	`allow_go_backward
( False ) 

560 
	}


560 def 
	$setup_timezone_page
( 
self
) : 

562 
renderer
= 
gtk
. 
	`CellRendererText
( ) 

563 
self
. 
timezone_zone_combo
. 
	`pack_start
( 
renderer
, True ) 

564 
self
. 
timezone_zone_combo
. 
	`add_attribute
( 
renderer
, 'text' , 0 ) 

565 
list_store
= 
gtk
. 
	`ListStore
( 
gobject
. 
TYPE_STRING
) 

566 
self
. 
timezone_zone_combo
. 
	`set_model
( 
list_store
) 

567 
self
. 
timezone_zone_combo
. 
	`connect
( 'changed' , 
self
. 
zone_combo_selection_changed
) 

568 
self
. 
timezone_city_combo
. 
	`connect
( 'changed' , 
self
. 
city_combo_selection_changed
) 

570 
renderer
= 
gtk
. 
	`CellRendererText
( ) 

571 
self
. 
timezone_city_combo
. 
	`pack_start
( 
renderer
, True ) 

572 
self
. 
timezone_city_combo
. 
	`add_attribute
( 
renderer
, 'text' , 0 ) 

573 
city_store
= 
gtk
. 
	`ListStore
( 
gobject
. 
TYPE_STRING
) 

574 
self
. 
timezone_city_combo
. 
	`set_model
( 
city_store
) 

576 
self
. 
regions
= { } 

577 for 
location
in 
self
. 
tzdb
. 
locations
: 

578 
region
, 
city
= 
location
. 
zone
. 
	`replace
( '_' , ' ' ) . 
	`split
( '/' , 1 ) 

579 if 
region
in 
self
. 
regions
: 

580 
self
. 
regions
[ 
region
] . 
	`append
( 
city
) 

582 
self
. 
regions
[ 
region
] = [ 
city
] 

584 
r
= 
self
. 
regions
. 
	`keys
( ) 

585 
r
. 
	`sort
( ) 

586 for 
region
in 
r
: 

587 
list_store
. 
	`append
( [ 
region
] ) 

589 
	}


589 def 
	$zone_combo_selection_changed
( 
self
, 
widget
) : 

590 
i
= 
self
. 
timezone_zone_combo
. 
	`get_active
( ) 

591 
m
= 
self
. 
timezone_zone_combo
. 
	`get_model
( ) 

592 
region
= 
m
[ 
i
] [ 0 ] 

594 
m
= 
self
. 
timezone_city_combo
. 
	`get_model
( ) 

595 
m
. 
	`clear
( ) 

596 for 
city
in 
self
. 
regions
[ 
region
] : 

597 
m
. 
	`append
( [ 
city
] ) 

599 
	}


599 def 
	$city_combo_selection_changed
( 
self
, 
widget
) : 

600 
i
= 
self
. 
timezone_zone_combo
. 
	`get_active
( ) 

601 
m
= 
self
. 
timezone_zone_combo
. 
	`get_model
( ) 

602 
region
= 
m
[ 
i
] [ 0 ] 

604 
i
= 
self
. 
timezone_city_combo
. 
	`get_active
( ) 

605 if 
i
< 0 : 

608 
m
= 
self
. 
timezone_city_combo
. 
	`get_model
( ) 

609 
city
= 
m
[ 
i
] [ 0 ] . 
	`replace
( ' ' , '_' ) 

610 
city
= 
region
+ '/' + 
city


611 
self
. 
tzmap
. 
	`select_city
( 
city
) 

613 
	}


613 def 
	$select_city
( 
self
, 
widget
, 
city
) : 

614 
region
, 
city
= 
city
. 
	`replace
( '_' , ' ' ) . 
	`split
( '/' , 1 ) 

615 
m
= 
self
. 
timezone_zone_combo
. 
	`get_model
( ) 

616 
iterator
= 
m
. 
	`get_iter_first
( ) 

617 while 
iterator
: 

618 if 
m
[ 
iterator
] [ 0 ] == 
region
: 

619 
self
. 
timezone_zone_combo
. 
	`set_active_iter
( 
iterator
) 

621 
iterator
= 
m
. 
	`iter_next
( 
iterator
) 

623 
m
= 
self
. 
timezone_city_combo
. 
	`get_model
( ) 

624 
iterator
= 
m
. 
	`get_iter_first
( ) 

625 while 
iterator
: 

626 if 
m
[ 
iterator
] [ 0 ] == 
city
: 

627 
self
. 
timezone_city_combo
. 
	`set_active_iter
( 
iterator
) 

629 
iterator
= 
m
. 
	`iter_next
( 
iterator
) 

632 
	}


632 def 
	$poke_screensaver
( 
self
) : 

634 if 
os
. 
path
. 
	`exists
( '/usr/bin/gnome-screensaver-command' ) : 

635 
command
= [ "gnome-screensaver-command" , "--poke" ] 

636 elif 
os
. 
path
. 
	`exists
( '/usr/bin/xscreensaver-command' ) : 

637 
command
= [ "xscreensaver-command" , "--deactivate" ] 

641 
env
= [ 'LC_ALL=C' ] 

642 for 
key
, 
value
in 
os
. 
environ
. 
	`iteritems
( ) : 

643 if 
key
!= 'LC_ALL' : 

644 
env
. 
	`append
( '%s=%s' % ( 
key
, 
value
) ) 

645 
gobject
. 
	`spawn_async
( 
command
, 
envp
= 
env
, 

646 
flags
= ( 
gobject
. 
SPAWN_SEARCH_PATH
| 

647 
gobject
. 
SPAWN_STDOUT_TO_DEV_NULL
| 

648 
gobject
. 
SPAWN_STDERR_TO_DEV_NULL
) ) 

652 
	}


652 def 
	$set_window_hints
( 
self
, 
widget
) : 

653 if 'UBIQUITY_ONLY' in 
os
. 
environ
: 

655 
widget
. 
window
. 
	`set_functions
( 

656 
gtk
. 
gdk
. 
FUNC_RESIZE
| 
gtk
. 
gdk
. 
FUNC_MOVE
) 

659 
	}


659 def 
	$set_locales
( 
self
) : 

662 
domain
= 
self
. 
distro
+ '-installer' 

663 
gettext
. 
	`bindtextdomain
( 
domain
, 
LOCALEDIR
) 

664 
gtk
. 
glade
. 
	`bindtextdomain
( 
domain
, 
LOCALEDIR
) 

665 
gtk
. 
glade
. 
	`textdomain
( 
domain
) 

666 
gettext
. 
	`textdomain
( 
domain
) 

667 
gettext
. 
	`install
( 
domain
, 
LOCALEDIR
, 
unicode
= 1 ) 

670 
	}


670 def 
	$translate_widgets
( 
self
) : 

671 if 
self
. 
locale
is None : 

672 
languages
= [ ] 

674 
languages
= [ 
self
. 
locale
] 

675 
core_names
= [ 'ubiquity/text/%s' % 
q
for 
q
in 
self
. 
language_questions
] 

676 
core_names
. 
	`append
( 'ubiquity/text/oem_config_title' ) 

677 for 
stock_item
in ( 'cancel' , 'close' , 'go-back' , 'go-forward' , 

679 
core_names
. 
	`append
( 'ubiquity/imported/%s' % 
stock_item
) 

680 
i18n
. 
	`get_translations
( 
languages
= 
languages
, 
core_names
= 
core_names
) 

682 for 
widget
in 
self
. 
all_widgets
: 

683 
self
. 
	`translate_widget
( 
widget
, 
self
. 
locale
) 

685 
self
. 
partition_button_undo
. 
	`set_label
( 

686 
self
. 
	`get_string
( 'partman/text/undo_everything' ) ) 

688 
	}


688 def 
	$translate_widget
( 
self
, 
widget
, 
lang
) : 

689 if 
	`isinstance
( 
widget
, 
gtk
. 
Button
) and 
widget
. 
	`get_use_stock
( ) : 

690 
widget
. 
	`set_label
( 
widget
. 
	`get_label
( ) ) 

692 
text
= 
self
. 
	`get_string
( 
widget
. 
	`get_name
( ) , 
lang
) 

693 if 
text
is None : 

695 
name
= 
widget
. 
	`get_name
( ) 

697 if 
	`isinstance
( 
widget
, 
gtk
. 
Label
) : 

698 if 
name
== 'step_label' : 

699 global 
BREADCRUMB_STEPS
, 
BREADCRUMB_MAX_STEP


700 
curstep
= '?' 

701 if 
self
. 
current_page
is not None : 

702 
current_name
= 
self
. 
	`step_name
( 
self
. 
current_page
) 

703 if 
current_name
in 
BREADCRUMB_STEPS
: 

704 
curstep
= 
	`str
( 
BREADCRUMB_STEPS
[ 
current_name
] ) 

705 
text
= 
text
. 
	`replace
( '${INDEX}' , 
curstep
) 

706 
text
= 
text
. 
	`replace
( '${TOTAL}' , 
	`str
( 
BREADCRUMB_MAX_STEP
) ) 

707 
widget
. 
	`set_text
( 
text
) 

710 
textlen
= 
	`len
( 
text
. 
	`encode
( "UTF-8" ) ) 

711 if 'heading_label' in 
name
: 

712 
attrs
= 
pango
. 
	`AttrList
( ) 

713 
attrs
. 
	`insert
( 
pango
. 
	`AttrScale
( 
pango
. 
SCALE_LARGE
, 0 , 
textlen
) ) 

714 
attrs
. 
	`insert
( 
pango
. 
	`AttrWeight
( 
pango
. 
WEIGHT_BOLD
, 0 , 
textlen
) ) 

715 
widget
. 
	`set_attributes
( 
attrs
) 

716 elif 'extra_label' in 
name
: 

717 
attrs
= 
pango
. 
	`AttrList
( ) 

718 
attrs
. 
	`insert
( 
pango
. 
	`AttrScale
( 
pango
. 
SCALE_SMALL
, 0 , 
textlen
) ) 

719 
widget
. 
	`set_attributes
( 
attrs
) 

720 elif ( 'group_label' in 
name
or 'warning_label' in 
name
or 

721 
name
in ( 'drives_label' , 'partition_method_label' ) ) : 

722 
attrs
= 
pango
. 
	`AttrList
( ) 

723 
attrs
. 
	`insert
( 
pango
. 
	`AttrWeight
( 
pango
. 
WEIGHT_BOLD
, 0 , 
textlen
) ) 

724 
widget
. 
	`set_attributes
( 
attrs
) 

726 elif 
	`isinstance
( 
widget
, 
gtk
. 
Button
) : 

729 
tempref
= 
widget
. 
	`get_image
( ) 

731 
question
= 
i18n
. 
	`map_widget_name
( 
widget
. 
	`get_name
( ) ) 

732 
widget
. 
	`set_label
( 
text
) 

736 
widget
. 
	`realize
( ) 

738 if 
question
. 
	`startswith
( 'ubiquity/imported/' ) : 

739 
stock_id
= 
question
[ 18 : ] 

740 
widget
. 
	`set_use_stock
( False ) 

741 
widget
. 
	`set_image
( 
gtk
. 
	`image_new_from_stock
( 

742 'gtk-%s' % 
stock_id
, 
gtk
. 
ICON_SIZE_BUTTON
) ) 

744 elif 
	`isinstance
( 
widget
, 
gtk
. 
Window
) : 

745 if 
name
== 'live_installer' and 
self
. 
oem_config
: 

746 
text
= 
self
. 
	`get_string
( 'oem_config_title' , 
lang
) 

747 
widget
. 
	`set_title
( 
text
) 

750 
	}


750 def 
	$allow_change_step
( 
self
, 
allowed
) : 

751 if 
allowed
: 

752 
cursor
= None 

754 
cursor
= 
self
. 
watch


755 if 
self
. 
live_installer
. 
window
: 

756 
self
. 
live_installer
. 
window
. 
	`set_cursor
( 
cursor
) 

757 
self
. 
back
. 
	`set_sensitive
( 
allowed
and 
self
. 
allowed_go_backward
) 

758 
self
. 
next
. 
	`set_sensitive
( 
allowed
and 
self
. 
allowed_go_forward
) 

760 if ( 
self
. 
back
. 
	`get_property
( 'visible' ) and 

761 
allowed
and 
self
. 
allowed_go_backward
) : 

762 
self
. 
back
. 
	`hide
( ) 

763 
self
. 
back
. 
	`show
( ) 

764 if ( 
self
. 
next
. 
	`get_property
( 'visible' ) and 

765 
allowed
and 
self
. 
allowed_go_forward
) : 

766 
self
. 
next
. 
	`hide
( ) 

767 
self
. 
next
. 
	`show
( ) 

768 
self
. 
next
. 
	`grab_default
( ) 

769 
self
. 
allowed_change_step
= 
allowed


771 
	}


771 def 
	$allow_go_backward
( 
self
, 
allowed
) : 

772 
self
. 
back
. 
	`set_sensitive
( 
allowed
and 
self
. 
allowed_change_step
) 

774 if ( 
self
. 
back
. 
	`get_property
( 'visible' ) and 

775 
allowed
and 
self
. 
allowed_change_step
) : 

776 
self
. 
back
. 
	`hide
( ) 

777 
self
. 
back
. 
	`show
( ) 

778 
self
. 
allowed_go_backward
= 
allowed


780 
	}


780 def 
	$allow_go_forward
( 
self
, 
allowed
) : 

781 
self
. 
next
. 
	`set_sensitive
( 
allowed
and 
self
. 
allowed_change_step
) 

783 if ( 
self
. 
next
. 
	`get_property
( 'visible' ) and 

784 
allowed
and 
self
. 
allowed_change_step
) : 

785 
self
. 
next
. 
	`hide
( ) 

786 
self
. 
next
. 
	`show
( ) 

787 
self
. 
next
. 
	`grab_default
( ) 

788 
self
. 
allowed_go_forward
= 
allowed


791 
	}


791 def 
	$dbfilter_handle_status
( 
self
) : 

796 if not 
self
. 
dbfilter_status
or 
self
. 
current_page
is None : 

799 
syslog
. 
	`syslog
( 'dbfilter_handle_status: %s' % 
	`str
( 
self
. 
dbfilter_status
) ) 

802 
text
= ( '%s failed with exit code %s. Further information may be ' 

806 ( 
self
. 
dbfilter_status
[ 0 ] , 
self
. 
dbfilter_status
[ 1 ] ) ) 

807 
dialog
= 
gtk
. 
	`Dialog
( '%s crashed' % 
self
. 
dbfilter_status
[ 0 ] , 

808 
self
. 
live_installer
, 
gtk
. 
DIALOG_MODAL
, 

809 ( 
gtk
. 
STOCK_QUIT
, 
gtk
. 
RESPONSE_CLOSE
, 

812 
self
. 
dbfilter_status
= None 

813 
label
= 
gtk
. 
	`Label
( 
text
) 

814 
label
. 
	`set_line_wrap
( True ) 

815 
label
. 
	`set_selectable
( True ) 

816 
dialog
. 
vbox
. 
	`add
( 
label
) 

817 
dialog
. 
	`show_all
( ) 

818 
response
= 
dialog
. 
	`run
( ) 

819 
dialog
. 
	`hide
( ) 

820 
syslog
. 
	`syslog
( 'dbfilter_handle_status: response %d' % 
response
) 

821 if 
response
== 1 : 

823 elif 
response
== 
gtk
. 
RESPONSE_CLOSE
: 

824 
self
. 
	`quit_installer
( ) 

826 
step
= 
self
. 
	`step_name
( 
self
. 
steps
. 
	`get_current_page
( ) ) 

827 if 
step
. 
	`startswith
( "stepPart" ) : 

829 
self
. 
	`set_current_page
( 
self
. 
steps
. 
	`page_num
( 
self
. 
stepPartAuto
) ) 

833 
	}


833 def 
	$show_intro
( 
self
) : 

836 
intro
= 
os
. 
path
. 
	`join
( 
PATH
, 'intro.txt' ) 

838 if 
os
. 
path
. 
	`isfile
( 
intro
) : 

839 
intro_file
= 
	`open
( 
intro
) 

840 
self
. 
intro_label
. 
	`set_markup
( 
intro_file
. 
	`read
( ) . 
	`rstrip
( '\n' ) ) 

841 
intro_file
. 
	`close
( ) 

847 
	}


847 def 
	$step_name
( 
self
, 
step_index
) : 

848 return 
self
. 
steps
. 
	`get_nth_page
( 
step_index
) . 
	`get_name
( ) 

851 
	}


851 def 
	$set_page
( 
self
, 
n
) : 

852 
self
. 
	`run_automation_error_cmd
( ) 

856 
self
. 
backup
= False 

857 
self
. 
live_installer
. 
	`show
( ) 

858 if 
n
== 'Language' : 

859 
cur
= 
self
. 
stepLanguage


860 elif 
n
== 'ConsoleSetup' : 

861 
cur
= 
self
. 
stepKeyboardConf


862 elif 
n
== 'Timezone' : 

863 
cur
= 
self
. 
stepLocation


864 elif 
n
== 'Partman' : 

869 elif 
n
== 'UserSetup' : 

870 
cur
= 
self
. 
stepUserInfo


871 elif 
n
== 'Summary' : 

872 
cur
= 
self
. 
stepReady


873 
self
. 
next
. 
	`set_label
( 
self
. 
	`get_string
( 'install_button' ) ) 

874 elif 
n
== 'MigrationAssistant' : 

875 
cur
= 
self
. 
stepMigrationAssistant


877 print >> 
sys
. 
stderr
, 'No page found for %s' % 
n


880 
self
. 
	`set_current_page
( 
self
. 
steps
. 
	`page_num
( 
cur
) ) 

881 if not 
self
. 
first_seen_page
: 

882 
self
. 
first_seen_page
= 
n


883 if 
self
. 
first_seen_page
== 
self
. 
pages
[ 
self
. 
pagesindex
] . 
__name__
: 

884 
self
. 
	`allow_go_backward
( False ) 

885 elif 'UBIQUITY_AUTOMATIC' not in 
os
. 
environ
: 

886 
self
. 
	`allow_go_backward
( True ) 

888 
	}


888 def 
	$set_current_page
( 
self
, 
current
) : 

889 if 
self
. 
steps
. 
	`get_current_page
( ) == 
current
: 

892 
self
. 
	`on_steps_switch_page
( 

893 
self
. 
steps
, 
self
. 
steps
. 
	`get_nth_page
( 
current
) , 
current
) 

895 
self
. 
steps
. 
	`set_current_page
( 
current
) 

899 
	}


899 def 
	$initialize_slideshow
( 
self
) : 

900 if 
self
. 
slideshow_initialized
: 

902 
self
. 
slideshow_initialized
= True 

903 
lang
= 
self
. 
locale
. 
	`split
( '_' ) [ 0 ] 

904 
slides
= '/usr/share/ubiquity-slideshow/slides/index.html' 

905 
s
= 
self
. 
live_installer
. 
	`get_screen
( ) 

906 
sh
= 
s
. 
	`get_height
( ) 

907 
sw
= 
s
. 
	`get_width
( ) 

908 
fail
= None 

909 if 
os
. 
path
. 
	`exists
( 
slides
) : 

910 
slides
= 'file://%s#locale=%s' % ( 
slides
, 
lang
) 

911 if 
sh
>= 600 and 
sw
>= 800 : 

913 import 
	~<webkit


914 
webview
= 
webkit
. 
	`WebView
( ) 

915 
webview
. 
	`open
( 
slides
) 

916 
self
. 
slideshow_frame
. 
	`add
( 
webview
) 

917 
webview
. 
	`set_size_request
( 700 , 420 ) 

918 
self
. 
slideshow_frame
. 
	`show_all
( ) 

919 except 
ImportError
: 

920 
fail
= 'WebKit not present' 

922 
fail
= 'Display too small (%sx%s).' % ( 
sw
, 
sh
) 

924 
fail
= 'Slides not found for %s.' % 
lang


925 if 
fail
: 

926 
syslog
. 
	`syslog
( 'Not displaying the slideshow: %s' % 
fail
) 

929 
	}


929 def 
	$progress_loop
( 
self
) : 

932 
syslog
. 
	`syslog
( 'progress_loop()' ) 

934 
self
. 
current_page
= None 

936 
self
. 
	`initialize_slideshow
( ) 

938 
self
. 
	`debconf_progress_start
( 

939 0 , 100 , 
self
. 
	`get_string
( 'ubiquity/install/title' ) ) 

940 
self
. 
	`debconf_progress_region
( 0 , 15 ) 

942 
dbfilter
= 
partman_commit
. 
	`PartmanCommit
( 
self
) 

943 if 
dbfilter
. 
	`run_command
( 
auto_process
= True ) != 0 : 

944 while 
self
. 
progress_position
. 
	`depth
( ) != 0 : 

945 
self
. 
	`debconf_progress_stop
( ) 

946 
self
. 
debconf_progress_window
. 
	`hide
( ) 

947 
self
. 
	`return_to_partitioning
( ) 

951 
self
. 
installing_no_return
= True 

953 
self
. 
	`debconf_progress_region
( 15 , 100 ) 

955 
dbfilter
= 
install
. 
	`Install
( 
self
) 

956 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

957 if 
ret
!= 0 : 

958 
self
. 
installing
= False 

959 if 
ret
== 3 : 

961 
sys
. 
	`exit
( 
ret
) 

962 elif ( 
os
. 
	`WIFSIGNALED
( 
ret
) and 

963 
os
. 
	`WTERMSIG
( 
ret
) in ( 
signal
. 
SIGINT
, 
signal
. 
SIGKILL
, 

964 
signal
. 
SIGTERM
) ) : 

965 
sys
. 
	`exit
( 
ret
) 

966 elif 
os
. 
path
. 
	`exists
( '/var/lib/ubiquity/install.trace' ) : 

967 
tbfile
= 
	`open
( '/var/lib/ubiquity/install.trace' ) 

968 
realtb
= 
tbfile
. 
	`read
( ) 

969 
tbfile
. 
	`close
( ) 

970 raise 
RuntimeError
, ( "Install failed with exit code %s\n%s" % 

971 ( 
ret
, 
realtb
) ) 

973 raise 
RuntimeError
, ( "Install failed with exit code %s; see " 

974 "/var/log/syslog" % 
ret
) 

976 while 
self
. 
progress_position
. 
	`depth
( ) != 0 : 

977 
self
. 
	`debconf_progress_stop
( ) 

980 
self
. 
debconf_progress_window
. 
	`hide
( ) 

982 
self
. 
installing
= False 

984 
self
. 
	`run_success_cmd
( ) 

985 if not 
self
. 
	`get_reboot_seen
( ) : 

986 if 'UBIQUITY_ONLY' in 
os
. 
environ
: 

987 
txt
= 
self
. 
	`get_string
( 'ubiquity/finished_restart_only' ) 

988 
self
. 
finished_label
. 
	`set_label
( 
txt
) 

989 
self
. 
quit_button
. 
	`hide
( ) 

990 
self
. 
finished_dialog
. 
	`run
( ) 

991 elif 
self
. 
	`get_reboot
( ) : 

992 
self
. 
	`reboot
( ) 

995 
	}


995 def 
	$reboot
( 
self
, * 
args
) : 

998 
self
. 
returncode
= 10 

999 
self
. 
	`quit_installer
( ) 

1002 
	}


1002 def 
	$do_reboot
( 
self
) : 

1005 if ( 
os
. 
path
. 
	`exists
( "/usr/lib/ubiquity/gdm-signal" ) and 

1006 
os
. 
path
. 
	`exists
( "/usr/bin/gnome-session-save" ) and 

1007 'DESKTOP_SESSION' in 
os
. 
environ
) : 

1008 
	`execute
( "/usr/lib/ubiquity/gdm-signal" , "--reboot" ) 

1009 if 'SUDO_UID' in 
os
. 
environ
: 

1010 
user
= '#%d' % 
	`int
( 
os
. 
environ
[ 'SUDO_UID' ] ) 

1012 
user
= 'ubuntu' 

1013 
	`execute
( "sudo" , "-u" , 
user
, "-H" , 

1016 
	`execute
( "reboot" ) 

1019 
	}


1019 def 
	$quit_installer
( 
self
) : 

1023 
self
. 
current_page
= None 

1024 if 
self
. 
dbfilter
is not None : 

1025 
self
. 
dbfilter
. 
	`cancel_handler
( ) 

1026 if 
gtk
. 
	`main_level
( ) > 0 : 

1027 
gtk
. 
	`main_quit
( ) 

1031 
	}


1031 def 
	$on_quit_clicked
( 
self
, 
widget
) : 

1032 
self
. 
warning_dialog
. 
	`show
( ) 

1033 
response
= 
self
. 
warning_dialog
. 
	`run
( ) 

1034 
self
. 
warning_dialog
. 
	`hide
( ) 

1035 if 
response
== 
gtk
. 
RESPONSE_CLOSE
: 

1036 
self
. 
current_page
= None 

1037 
self
. 
	`quit_installer
( ) 

1043 
	}


1043 def 
	$on_live_installer_delete_event
( 
self
, 
widget
, 
event
) : 

1044 return 
self
. 
	`on_quit_clicked
( 
widget
) 

1047 
	}


1047 def 
	$info_loop
( 
self
, 
widget
) : 

1051 if ( 
self
. 
username_changed_id
is None or 

1052 
self
. 
hostname_changed_id
is None ) : 

1055 if ( 
widget
is not None and 
widget
. 
	`get_name
( ) == 'fullname' and 

1056 not 
self
. 
username_edited
) : 

1057 
self
. 
username
. 
	`handler_block
( 
self
. 
username_changed_id
) 

1058 
new_username
= 
widget
. 
	`get_text
( ) . 
	`split
( ' ' ) [ 0 ] 

1059 
new_username
= 
new_username
. 
	`encode
( 'ascii' , 'ascii_transliterate' ) 

1060 
new_username
= 
new_username
. 
	`lower
( ) 

1061 
self
. 
username
. 
	`set_text
( 
new_username
) 

1062 
self
. 
username
. 
	`handler_unblock
( 
self
. 
username_changed_id
) 

1063 elif ( 
widget
is not None and 
widget
. 
	`get_name
( ) == 'username' and 

1064 not 
self
. 
hostname_edited
) : 

1065 if 
self
. 
laptop
: 

1066 
hostname_suffix
= '-laptop' 

1068 
hostname_suffix
= '-desktop' 

1069 
self
. 
hostname
. 
	`handler_block
( 
self
. 
hostname_changed_id
) 

1070 
self
. 
hostname
. 
	`set_text
( 
widget
. 
	`get_text
( ) + 
hostname_suffix
) 

1071 
self
. 
hostname
. 
	`handler_unblock
( 
self
. 
hostname_changed_id
) 

1073 
complete
= True 

1074 for 
name
in ( 'username' , 'hostname' ) : 

1075 if 
	`getattr
( 
self
, 
name
) . 
	`get_text
( ) == '' : 

1076 
complete
= False 

1077 if not 
self
. 
allow_password_empty
: 

1078 for 
name
in ( 'password' , 'verified_password' ) : 

1079 if 
	`getattr
( 
self
, 
name
) . 
	`get_text
( ) == '' : 

1080 
complete
= False 

1081 
self
. 
	`allow_go_forward
( 
complete
) 

1083 
	}


1083 def 
	$on_username_changed
( 
self
, 
widget
) : 

1084 
self
. 
username_edited
= ( 
widget
. 
	`get_text
( ) != '' ) 

1086 
	}


1086 def 
	$on_hostname_changed
( 
self
, 
widget
) : 

1087 
self
. 
hostname_edited
= ( 
widget
. 
	`get_text
( ) != '' ) 

1089 
	}


1089 def 
	$on_next_clicked
( 
self
, 
widget
) : 

1092 if not 
self
. 
allowed_change_step
or not 
self
. 
allowed_go_forward
: 

1095 
self
. 
	`allow_change_step
( False ) 

1097 
step
= 
self
. 
	`step_name
( 
self
. 
steps
. 
	`get_current_page
( ) ) 

1103 if 
step
== "stepPartAuto" : 

1104 
self
. 
part_advanced_warning_message
. 
	`set_text
( '' ) 

1105 
self
. 
part_advanced_warning_hbox
. 
	`hide
( ) 

1106 if 
step
in ( "stepPartAuto" , "stepPartAdvanced" ) : 

1107 
self
. 
username_error_box
. 
	`hide
( ) 

1108 
self
. 
password_error_box
. 
	`hide
( ) 

1109 
self
. 
hostname_error_box
. 
	`hide
( ) 

1111 if 
self
. 
dbfilter
is not None : 

1112 
self
. 
dbfilter
. 
	`ok_handler
( ) 

1115 elif 
gtk
. 
	`main_level
( ) > 0 : 

1116 
gtk
. 
	`main_quit
( ) 

1118 if not 
self
. 
live_installer
. 
	`get_focus
( ) : 

1119 
self
. 
live_installer
. 
	`child_focus
( 
gtk
. 
DIR_TAB_FORWARD
) 

1121 
	}


1121 def 
	$on_keyboardlayoutview_row_activated
( 
self
, 
treeview
, 
path
, 
view_column
) : 

1122 
self
. 
next
. 
	`activate
( ) 

1124 
	}


1124 def 
	$on_keyboard_layout_selected
( 
self
, 
start_editing
, * 
args
) : 

1125 if 
	`isinstance
( 
self
. 
dbfilter
, 
console_setup
. 
ConsoleSetup
) : 

1126 
layout
= 
self
. 
	`get_keyboard
( ) 

1127 if 
layout
is not None : 

1128 
self
. 
current_layout
= 
layout


1129 
self
. 
dbfilter
. 
	`change_layout
( 
layout
) 

1131 
	}


1131 def 
	$on_keyboardvariantview_row_activated
( 
self
, 
treeview
, 
path
, 

1132 
view_column
) : 

1133 
self
. 
next
. 
	`activate
( ) 

1135 
	}


1135 def 
	$on_keyboard_variant_selected
( 
self
, 
start_editing
, * 
args
) : 

1136 if 
	`isinstance
( 
self
. 
dbfilter
, 
console_setup
. 
ConsoleSetup
) : 

1137 
layout
= 
self
. 
	`get_keyboard
( ) 

1138 
variant
= 
self
. 
	`get_keyboard_variant
( ) 

1139 if 
layout
is not None and 
variant
is not None : 

1140 
self
. 
dbfilter
. 
	`apply_keyboard
( 
layout
, 
variant
) 

1142 
	}


1142 def 
	$prepare_page
( 
self
) : 

1148 if 
	`isinstance
( 
self
. 
dbfilter
, 
console_setup
. 
ConsoleSetup
) : 

1149 
self
. 
default_keyboard_layout
= None 

1150 
self
. 
default_keyboard_variant
= None 

1152 
	}


1152 def 
	$process_step
( 
self
) : 

1156 
step_num
= 
self
. 
steps
. 
	`get_current_page
( ) 

1157 
step
= 
self
. 
	`step_name
( 
step_num
) 

1158 
syslog
. 
	`syslog
( 'Step_before = %s' % 
step
) 

1160 if 
step
. 
	`startswith
( "stepPart" ) : 

1161 
self
. 
previous_partitioning_page
= 
step_num


1163 elif 
step
== "stepLanguage" : 

1164 
self
. 
	`translate_widgets
( ) 

1168 elif 
step
== "stepPartAuto" : 

1169 
self
. 
	`process_autopartitioning
( ) 

1171 elif 
step
== "stepPartAdvanced" : 

1172 
self
. 
	`info_loop
( None ) 

1174 elif 
step
== "stepUserInfo" : 

1175 
self
. 
	`process_identification
( ) 

1177 
	}


1177 def 
	$process_identification
( 
self
) : 

1180 
error_msg
= [ ] 

1181 
error
= 0 

1186 
hostname
= 
self
. 
hostname
. 
	`get_property
( 'text' ) 

1187 for 
result
in 
validation
. 
	`check_hostname
( 
hostname
) : 

1188 if 
result
== 
validation
. 
HOSTNAME_LENGTH
: 

1189 
error_msg
. 
	`append
( "The hostname must be between 1 and 63 characters long." ) 

1190 elif 
result
== 
validation
. 
HOSTNAME_BADCHAR
: 

1191 
error_msg
. 
	`append
( "The hostname may only contain letters, digits, hyphens, and dots." ) 

1192 elif 
result
== 
validation
. 
HOSTNAME_BADHYPHEN
: 

1193 
error_msg
. 
	`append
( "The hostname may not start or end with a hyphen." ) 

1194 elif 
result
== 
validation
. 
HOSTNAME_BADDOTS
: 

1195 
error_msg
. 
	`append
( 'The hostname may not start or end with a dot, or contain the sequence "..".' ) 

1198 if 
	`len
( 
error_msg
) != 0 : 

1199 
self
. 
hostname_error_reason
. 
	`set_text
( "\n" . 
	`join
( 
error_msg
) ) 

1200 
self
. 
hostname_error_box
. 
	`show
( ) 

1201 
self
. 
stay_on_page
= True 

1203 
self
. 
stay_on_page
= False 

1206 
	}


1206 def 
	$process_autopartitioning
( 
self
) : 

1210 while 
gtk
. 
	`events_pending
( ) : 

1211 
gtk
. 
	`main_iteration
( ) 

1215 
choice
= 
self
. 
	`get_autopartition_choice
( ) [ 0 ] 

1216 if 
self
. 
manual_choice
is None or 
choice
== 
self
. 
manual_choice
: 

1217 
self
. 
steps
. 
	`next_page
( ) 

1226 
	}


1226 def 
	$on_back_clicked
( 
self
, 
widget
) : 

1229 if not 
self
. 
allowed_change_step
: 

1232 
self
. 
	`allow_change_step
( False ) 

1234 
self
. 
backup
= True 

1235 
self
. 
stay_on_page
= False 

1238 
self
. 
	`allow_go_forward
( True ) 

1240 
step
= 
self
. 
	`step_name
( 
self
. 
steps
. 
	`get_current_page
( ) ) 

1242 if 
step
== "stepReady" : 

1243 
self
. 
next
. 
	`set_label
( "gtk-go-forward" ) 

1244 
self
. 
	`translate_widget
( 
self
. 
next
, 
self
. 
locale
) 

1246 if 
self
. 
dbfilter
is not None : 

1247 
self
. 
dbfilter
. 
	`cancel_handler
( ) 

1250 elif 
gtk
. 
	`main_level
( ) > 0 : 

1251 
gtk
. 
	`main_quit
( ) 

1253 if not 
self
. 
live_installer
. 
	`get_focus
( ) : 

1254 
self
. 
live_installer
. 
	`child_focus
( 
gtk
. 
DIR_TAB_FORWARD
) 

1257 
	}


1257 def 
	$selected_language
( 
self
, 
selection
) : 

1258 ( 
model
, 
iterator
) = 
selection
. 
	`get_selected
( ) 

1259 if 
iterator
is not None : 

1260 
value
= 
	`unicode
( 
model
. 
	`get_value
( 
iterator
, 0 ) ) 

1261 return 
self
. 
language_choice_map
[ 
value
] [ 1 ] 

1266 
	}


1266 def 
	$link_button_browser
( 
self
, 
button
, 
uri
) : 

1267 
selection
= 
self
. 
language_treeview
. 
	`get_selection
( ) 

1268 
lang
= 
self
. 
	`selected_language
( 
selection
) 

1269 
lang
= 
lang
. 
	`split
( '.' ) [ 0 ] # strip encoding 

1270 
uri
= 
uri
. 
	`replace
( '${LANG}' , 
lang
) 

1271 
subprocess
. 
	`Popen
( [ 'sensible-browser' , 
uri
] , 

1272 
close_fds
= True , 
preexec_fn
= 
drop_all_privileges
) 

1275 
	}


1275 def 
	$on_language_treeview_row_activated
( 
self
, 
treeview
, 
path
, 
view_column
) : 

1276 
self
. 
next
. 
	`activate
( ) 

1278 
	}


1278 def 
	$on_language_treeview_selection_changed
( 
self
, 
selection
) : 

1279 
lang
= 
self
. 
	`selected_language
( 
selection
) 

1280 if 
lang
: 

1282 
lang
= 
lang
. 
	`split
( '.' ) [ 0 ] . 
	`lower
( ) 

1283 for 
widget
in 
self
. 
language_questions
: 

1284 
self
. 
	`translate_widget
( 
	`getattr
( 
self
, 
widget
) , 
lang
) 

1286 
	}


1286 def 
	$on_steps_switch_page
( 
self
, 
foo
, 
bar
, 
current
) : 

1287 
self
. 
current_page
= 
current


1293 if 
self
. 
	`step_name
( 
current
) != 'stepLanguage' : 

1294 
self
. 
	`translate_widget
( 
self
. 
step_label
, 
self
. 
locale
) 

1296 
selection
= 
self
. 
language_treeview
. 
	`get_selection
( ) 

1297 
self
. 
	`on_language_treeview_selection_changed
( 
selection
) 

1298 
syslog
. 
	`syslog
( 'switched to page %s' % 
self
. 
	`step_name
( 
current
) ) 

1300 
	}


1300 def 
	$on_extra_combo_changed
( 
self
, 
widget
) : 

1301 
txt
= 
widget
. 
	`get_active_text
( ) 

1302 for 
k
in 
self
. 
disk_layout
: 

1303 
disk
= 
k


1304 if 
disk
. 
	`startswith
( '=dev=' ) : 

1305 
disk
= 
disk
[ 5 : ] 

1306 if '(%s)' % 
disk
in 
txt
: 

1307 
self
. 
before_bar
. 
	`remove_all
( ) 

1308 
self
. 
	`create_bar
( 
k
) 

1310 if 
txt
in 
self
. 
format_warnings
: 

1311 
self
. 
format_warning
. 
	`set_text
( 
self
. 
format_warnings
[ 
txt
] ) 

1312 
self
. 
format_warning_align
. 
	`show_all
( ) 

1314 
self
. 
format_warning_align
. 
	`hide
( ) 

1316 
	}


1316 def 
	$on_autopartition_toggled
( 
self
, 
widget
, 
extra_combo
) : 

1319 
choice
= 
	`unicode
( 
widget
. 
	`get_label
( ) , 'utf-8' , 'replace' ) 

1320 if 
choice
is not None and 
choice
in 
self
. 
autopartition_extras
: 

1321 
element
= 
self
. 
autopartition_extras
[ 
choice
] 

1322 if 
widget
. 
	`get_active
( ) : 

1323 
element
. 
	`set_sensitive
( True ) 

1325 
element
. 
	`set_sensitive
( False ) 

1327 if 
widget
. 
	`get_active
( ) : 

1328 
self
. 
action_bar
. 
	`remove_all
( ) 

1329 
self
. 
action_bar
. 
resize
= - 1 

1330 if 
choice
== 
self
. 
manual_choice
: 

1331 
self
. 
action_bar
. 
	`add_segment_rgb
( 
self
. 
manual_choice
, - 1 , 

1332 
self
. 
release_color
) 

1333 elif 
choice
== 
self
. 
resize_choice
: 

1334 for 
k
in 
self
. 
disk_layout
: 

1335 for 
p
in 
self
. 
disk_layout
[ 
k
] : 

1336 if 
self
. 
resize_path
== 
p
[ 0 ] : 

1337 
self
. 
before_bar
. 
	`remove_all
( ) 

1338 
self
. 
	`create_bar
( 
k
) 

1339 
self
. 
	`create_bar
( 
k
, 
type
= 
choice
) 

1341 elif 
choice
== 
self
. 
biggest_free_choice
: 

1342 for 
k
in 
self
. 
disk_layout
: 

1343 for 
p
in 
self
. 
disk_layout
[ 
k
] : 

1344 if 
self
. 
biggest_free_id
== 
p
[ 2 ] : 

1345 
self
. 
before_bar
. 
	`remove_all
( ) 

1346 
self
. 
	`create_bar
( 
k
) 

1347 
self
. 
	`create_bar
( 
k
, 
type
= 
choice
) 

1351 
self
. 
action_bar
. 
	`add_segment_rgb
( 
	`get_release_name
( ) , - 1 , 

1352 
self
. 
release_color
) 

1353 
self
. 
	`on_extra_combo_changed
( 
extra_combo
) 

1357 
	}


1357 def 
	$watch_debconf_fd
( 
self
, 
from_debconf
, 
process_input
) : 

1358 
gobject
. 
	`io_add_watch
( 
from_debconf
, 

1359 
gobject
. 
IO_IN
| 
gobject
. 
IO_ERR
| 
gobject
. 
IO_HUP
, 

1360 
self
. 
watch_debconf_fd_helper
, 
process_input
) 

1363 
	}


1363 def 
	$watch_debconf_fd_helper
( 
self
, 
source
, 
cb_condition
, 
callback
) : 

1364 
debconf_condition
= 0 

1365 if ( 
cb_condition
& 
gobject
. 
IO_IN
) != 0 : 

1366 
debconf_condition
|= 
filteredcommand
. 
DEBCONF_IO_IN


1367 if ( 
cb_condition
& 
gobject
. 
IO_ERR
) != 0 : 

1368 
debconf_condition
|= 
filteredcommand
. 
DEBCONF_IO_ERR


1369 if ( 
cb_condition
& 
gobject
. 
IO_HUP
) != 0 : 

1370 
debconf_condition
|= 
filteredcommand
. 
DEBCONF_IO_HUP


1372 return 
	`callback
( 
source
, 
debconf_condition
) 

1375 
	}


1375 def 
	$debconf_progress_start
( 
self
, 
progress_min
, 
progress_max
, 
progress_title
) : 

1376 if 
self
. 
current_page
is not None : 

1377 
self
. 
debconf_progress_window
. 
	`set_transient_for
( 
self
. 
live_installer
) 

1380 
self
. 
debconf_progress_window
. 
	`set_type_hint
( 

1381 
gtk
. 
gdk
. 
WINDOW_TYPE_HINT_DIALOG
) 

1383 
self
. 
debconf_progress_window
. 
	`set_transient_for
( None ) 

1384 if 
progress_title
is None : 

1385 
progress_title
= "" 

1386 if 
self
. 
progress_position
. 
	`depth
( ) == 0 : 

1387 
self
. 
debconf_progress_window
. 
	`set_title
( 
progress_title
) 

1388 elif 
progress_title
!= 
self
. 
	`get_string
( 'ubiquity/install/title' ) and 

1389 
progress_title
!= 
self
. 
	`get_string
( 'ubiquity/install/checking' ) : 

1390 
progress_title
= 
self
. 
debconf_progress_window
. 
	`get_title
( ) 

1392 
self
. 
progress_position
. 
	`start
( 
progress_min
, 
progress_max
, 

1393 
progress_title
) 

1394 
self
. 
progress_title
. 
	`set_markup
( 

1396 
xml
. 
sax
. 
saxutils
. 
	`escape
( 
self
. 
progress_position
. 
	`title
( ) ) + 

1398 
self
. 
	`debconf_progress_set
( 0 ) 

1399 
self
. 
progress_info
. 
	`set_text
( '' ) 

1400 
self
. 
debconf_progress_window
. 
	`show
( ) 

1402 
	}


1402 def 
	$debconf_progress_set
( 
self
, 
progress_val
) : 

1403 if 
self
. 
progress_cancelled
: 

1405 
self
. 
progress_position
. 
	`set
( 
progress_val
) 

1406 
fraction
= 
self
. 
progress_position
. 
	`fraction
( ) 

1407 if 
fraction
> 1 : 

1408 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 

1410 for 
line
in 
traceback
. 
	`format_stack
( ) : 

1411 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 
line
) 

1412 
fraction
= 1 

1413 
self
. 
progress_bar
. 
	`set_fraction
( 
fraction
) 

1414 
self
. 
progress_bar
. 
	`set_text
( '%s%%' % 
	`int
( 
fraction
* 100 ) ) 

1417 
	}


1417 def 
	$debconf_progress_step
( 
self
, 
progress_inc
) : 

1418 if 
self
. 
progress_cancelled
: 

1420 
self
. 
progress_position
. 
	`step
( 
progress_inc
) 

1421 
fraction
= 
self
. 
progress_position
. 
	`fraction
( ) 

1422 if 
fraction
> 1 : 

1423 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 

1425 for 
line
in 
traceback
. 
	`format_stack
( ) : 

1426 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 
line
) 

1427 
fraction
= 1 

1428 
self
. 
progress_bar
. 
	`set_fraction
( 
fraction
) 

1429 
self
. 
progress_bar
. 
	`set_text
( '%s%%' % 
	`int
( 
fraction
* 100 ) ) 

1432 
	}


1432 def 
	$debconf_progress_info
( 
self
, 
progress_info
) : 

1433 if 
self
. 
progress_cancelled
: 

1435 
self
. 
progress_info
. 
	`set_markup
( 

1436 '<i>' + 
xml
. 
sax
. 
saxutils
. 
	`escape
( 
progress_info
) + '</i>' ) 

1439 
	}


1439 def 
	$debconf_progress_stop
( 
self
) : 

1440 
self
. 
progress_cancelled
= False 

1441 
self
. 
progress_position
. 
	`stop
( ) 

1442 if 
self
. 
progress_position
. 
	`depth
( ) == 0 : 

1443 
self
. 
debconf_progress_window
. 
	`hide
( ) 

1445 
self
. 
progress_title
. 
	`set_markup
( 

1447 
xml
. 
sax
. 
saxutils
. 
	`escape
( 
self
. 
progress_position
. 
	`title
( ) ) + 

1450 
	}


1450 def 
	$debconf_progress_region
( 
self
, 
region_start
, 
region_end
) : 

1451 
self
. 
progress_position
. 
	`set_region
( 
region_start
, 
region_end
) 

1453 
	}


1453 def 
	$debconf_progress_cancellable
( 
self
, 
cancellable
) : 

1454 if 
cancellable
: 

1455 
self
. 
progress_cancel_button
. 
	`show
( ) 

1457 
self
. 
progress_cancel_button
. 
	`hide
( ) 

1458 
self
. 
progress_cancelled
= False 

1460 
	}


1460 def 
	$on_progress_cancel_button_clicked
( 
self
, 
button
) : 

1461 
self
. 
progress_cancelled
= True 

1464 
	}


1464 def 
	$debconffilter_done
( 
self
, 
dbfilter
) : 

1465 if 
BaseFrontend
. 
	`debconffilter_done
( 
self
, 
dbfilter
) : 

1466 if 
gtk
. 
	`main_level
( ) > 0 : 

1467 
gtk
. 
	`main_quit
( ) 

1473 
	}


1473 def 
	$set_language_choices
( 
self
, 
choices
, 
choice_map
) : 

1474 
BaseFrontend
. 
	`set_language_choices
( 
self
, 
choices
, 
choice_map
) 

1475 if 
	`len
( 
self
. 
language_treeview
. 
	`get_columns
( ) ) < 1 : 

1476 
column
= 
gtk
. 
	`TreeViewColumn
( None , 
gtk
. 
	`CellRendererText
( ) , 
text
= 0 ) 

1477 
column
. 
	`set_sizing
( 
gtk
. 
TREE_VIEW_COLUMN_FIXED
) 

1478 
self
. 
language_treeview
. 
	`append_column
( 
column
) 

1479 
selection
= 
self
. 
language_treeview
. 
	`get_selection
( ) 

1480 
selection
. 
	`connect
( 'changed' , 

1481 
self
. 
on_language_treeview_selection_changed
) 

1482 
list_store
= 
gtk
. 
	`ListStore
( 
gobject
. 
TYPE_STRING
) 

1483 
self
. 
language_treeview
. 
	`set_model
( 
list_store
) 

1484 for 
choice
in 
choices
: 

1485 
list_store
. 
	`append
( [ 
choice
] ) 

1488 
	}


1488 def 
	$set_language
( 
self
, 
language
) : 

1489 
model
= 
self
. 
language_treeview
. 
	`get_model
( ) 

1490 
iterator
= 
model
. 
	`iter_children
( None ) 

1491 while 
iterator
is not None : 

1492 if 
	`unicode
( 
model
. 
	`get_value
( 
iterator
, 0 ) ) == 
language
: 

1493 
path
= 
model
. 
	`get_path
( 
iterator
) 

1494 
self
. 
language_treeview
. 
	`get_selection
( ) . 
	`select_path
( 
path
) 

1495 
self
. 
language_treeview
. 
	`scroll_to_cell
( 

1496 
path
, 
use_align
= True , 
row_align
= 0.5 ) 

1498 
iterator
= 
model
. 
	`iter_next
( 
iterator
) 

1501 
	}


1501 def 
	$get_language
( 
self
) : 

1502 
selection
= 
self
. 
language_treeview
. 
	`get_selection
( ) 

1503 ( 
model
, 
iterator
) = 
selection
. 
	`get_selected
( ) 

1504 if 
iterator
is None : 

1507 
value
= 
	`unicode
( 
model
. 
	`get_value
( 
iterator
, 0 ) ) 

1508 return 
self
. 
language_choice_map
[ 
value
] [ 1 ] 

1511 
	}


1511 def 
	$get_oem_id
( 
self
) : 

1512 return 
self
. 
oem_id_entry
. 
	`get_text
( ) 

1515 
	}


1515 def 
	$set_timezone
( 
self
, 
timezone
) : 

1516 
self
. 
	`select_city
( None , 
timezone
) 

1518 
	}


1518 def 
	$get_timezone
( 
self
) : 

1519 
i
= 
self
. 
timezone_zone_combo
. 
	`get_active
( ) 

1520 
m
= 
self
. 
timezone_zone_combo
. 
	`get_model
( ) 

1521 
region
= 
m
[ 
i
] [ 0 ] 

1523 
i
= 
self
. 
timezone_city_combo
. 
	`get_active
( ) 

1524 
m
= 
self
. 
timezone_city_combo
. 
	`get_model
( ) 

1525 
city
= 
m
[ 
i
] [ 0 ] . 
	`replace
( ' ' , '_' ) 

1526 
city
= 
region
+ '/' + 
city


1527 return 
city


1529 
	}


1529 def 
	$set_keyboard_choices
( 
self
, 
choices
) : 

1530 
layouts
= 
gtk
. 
	`ListStore
( 
gobject
. 
TYPE_STRING
) 

1531 
self
. 
keyboardlayoutview
. 
	`set_model
( 
layouts
) 

1532 for 
v
in 
	`sorted
( 
choices
) : 

1533 
layouts
. 
	`append
( [ 
v
] ) 

1535 if 
	`len
( 
self
. 
keyboardlayoutview
. 
	`get_columns
( ) ) < 1 : 

1536 
column
= 
gtk
. 
	`TreeViewColumn
( "Layout" , 
gtk
. 
	`CellRendererText
( ) , 
text
= 0 ) 

1537 
column
. 
	`set_sizing
( 
gtk
. 
TREE_VIEW_COLUMN_FIXED
) 

1538 
self
. 
keyboardlayoutview
. 
	`append_column
( 
column
) 

1539 
selection
= 
self
. 
keyboardlayoutview
. 
	`get_selection
( ) 

1540 
selection
. 
	`connect
( 'changed' , 

1541 
self
. 
on_keyboard_layout_selected
) 

1543 if 
self
. 
current_layout
is not None : 

1544 
self
. 
	`set_keyboard
( 
self
. 
current_layout
) 

1546 
	}


1546 def 
	$set_keyboard
( 
self
, 
layout
) : 

1547 if 
self
. 
default_keyboard_layout
is None : 

1548 
self
. 
default_keyboard_layout
= 
layout


1549 
BaseFrontend
. 
	`set_keyboard
( 
self
, 
layout
) 

1550 
model
= 
self
. 
keyboardlayoutview
. 
	`get_model
( ) 

1551 if 
model
is None : 

1553 
iterator
= 
model
. 
	`iter_children
( None ) 

1554 while 
iterator
is not None : 

1555 if 
	`unicode
( 
model
. 
	`get_value
( 
iterator
, 0 ) ) == 
layout
: 

1556 
path
= 
model
. 
	`get_path
( 
iterator
) 

1557 
self
. 
keyboardlayoutview
. 
	`get_selection
( ) . 
	`select_path
( 
path
) 

1558 
self
. 
keyboardlayoutview
. 
	`scroll_to_cell
( 

1559 
path
, 
use_align
= True , 
row_align
= 0.5 ) 

1561 
iterator
= 
model
. 
	`iter_next
( 
iterator
) 

1563 
	}


1563 def 
	$get_keyboard
( 
self
) : 

1564 if 
self
. 
suggested_keymap
. 
	`get_active
( ) : 

1565 return 
	`unicode
( 
self
. 
default_keyboard_layout
) 

1566 
selection
= 
self
. 
keyboardlayoutview
. 
	`get_selection
( ) 

1567 ( 
model
, 
iterator
) = 
selection
. 
	`get_selected
( ) 

1568 if 
iterator
is None : 

1571 return 
	`unicode
( 
model
. 
	`get_value
( 
iterator
, 0 ) ) 

1573 
	}


1573 def 
	$set_keyboard_variant_choices
( 
self
, 
choices
) : 

1574 
variants
= 
gtk
. 
	`ListStore
( 
gobject
. 
TYPE_STRING
) 

1575 
self
. 
keyboardvariantview
. 
	`set_model
( 
variants
) 

1576 for 
v
in 
	`sorted
( 
choices
) : 

1577 
variants
. 
	`append
( [ 
v
] ) 

1579 if 
	`len
( 
self
. 
keyboardvariantview
. 
	`get_columns
( ) ) < 1 : 

1580 
column
= 
gtk
. 
	`TreeViewColumn
( "Variant" , 
gtk
. 
	`CellRendererText
( ) , 
text
= 0 ) 

1581 
column
. 
	`set_sizing
( 
gtk
. 
TREE_VIEW_COLUMN_FIXED
) 

1582 
self
. 
keyboardvariantview
. 
	`append_column
( 
column
) 

1583 
selection
= 
self
. 
keyboardvariantview
. 
	`get_selection
( ) 

1584 
selection
. 
	`connect
( 'changed' , 

1585 
self
. 
on_keyboard_variant_selected
) 

1587 
	}


1587 def 
	$set_keyboard_variant
( 
self
, 
variant
) : 

1588 if 
self
. 
default_keyboard_variant
is None : 

1589 
self
. 
default_keyboard_variant
= 
variant


1593 if 
self
. 
suggested_keymap
. 
	`get_active
( ) : 

1594 
self
. 
suggested_keymap_label
. 
	`set_property
( 'label' , 
variant
) 

1595 
self
. 
suggested_keymap
. 
	`toggled
( ) 

1596 
model
= 
self
. 
keyboardvariantview
. 
	`get_model
( ) 

1597 if 
model
is None : 

1599 
iterator
= 
model
. 
	`iter_children
( None ) 

1600 while 
iterator
is not None : 

1601 if 
	`unicode
( 
model
. 
	`get_value
( 
iterator
, 0 ) ) == 
variant
: 

1602 
path
= 
model
. 
	`get_path
( 
iterator
) 

1603 
self
. 
keyboardvariantview
. 
	`get_selection
( ) . 
	`select_path
( 
path
) 

1604 
self
. 
keyboardvariantview
. 
	`scroll_to_cell
( 

1605 
path
, 
use_align
= True , 
row_align
= 0.5 ) 

1607 
iterator
= 
model
. 
	`iter_next
( 
iterator
) 

1609 
	}


1609 def 
	$get_keyboard_variant
( 
self
) : 

1610 if 
self
. 
suggested_keymap
. 
	`get_active
( ) : 

1611 return 
	`unicode
( 
self
. 
default_keyboard_variant
) 

1612 
selection
= 
self
. 
keyboardvariantview
. 
	`get_selection
( ) 

1613 ( 
model
, 
iterator
) = 
selection
. 
	`get_selected
( ) 

1614 if 
iterator
is None : 

1617 return 
	`unicode
( 
model
. 
	`get_value
( 
iterator
, 0 ) ) 

1619 
	}


1619 def 
	$on_suggested_keymap_toggled
( 
self
, 
widget
) : 

1620 if 
self
. 
suggested_keymap
. 
	`get_active
( ) : 

1621 
self
. 
keyboard_layout_hbox
. 
	`set_sensitive
( False ) 

1622 if 
	`isinstance
( 
self
. 
dbfilter
, 
console_setup
. 
ConsoleSetup
) : 

1623 if ( 
self
. 
default_keyboard_layout
is not None and 

1624 
self
. 
default_keyboard_variant
is not None ) : 

1625 
self
. 
current_layout
= 
self
. 
default_keyboard_layout


1626 
self
. 
dbfilter
. 
	`change_layout
( 
self
. 
default_keyboard_layout
) 

1627 
self
. 
dbfilter
. 
	`apply_keyboard
( 
self
. 
default_keyboard_layout
, 

1628 
self
. 
default_keyboard_variant
) 

1631 
self
. 
keyboard_layout_hbox
. 
	`set_sensitive
( True ) 

1633 
	}


1633 def 
	$set_disk_layout
( 
self
, 
layout
) : 

1634 
self
. 
disk_layout
= 
layout


1636 
	}


1636 def 
	$create_bar
( 
self
, 
disk
, 
type
= None ) : 

1637 if 
type
: 

1638 
b
= 
self
. 
action_bar


1640 
b
= 
self
. 
before_bar


1641 
ret
= [ ] 

1642 for 
part
in 
self
. 
disk_layout
[ 
disk
] : 

1643 if 
part
[ 0 ] . 
	`startswith
( '/' ) : 

1644 
t
= 
	`find_in_os_prober
( 
part
[ 0 ] ) 

1645 if 
t
and 
t
!= 'swap' : 

1646 
ret
. 
	`append
( 
t
) 

1647 if 
	`len
( 
ret
) == 0 : 

1648 
s
= 
self
. 
	`get_string
( 'ubiquity/text/part_auto_comment_none' ) 

1649 elif 
	`len
( 
ret
) == 1 : 

1650 
s
= 
self
. 
	`get_string
( 'ubiquity/text/part_auto_comment_one' ) 

1651 
s
= 
s
. 
	`replace
( '${OS}' , 
ret
[ 0 ] ) 

1653 
s
= 
self
. 
	`get_string
( 'ubiquity/text/part_auto_comment_many' ) 

1654 
self
. 
part_auto_comment_label
. 
	`set_text
( 
s
) 

1655 
i
= 0 

1656 for 
part
in 
self
. 
disk_layout
[ 
disk
] : 

1657 
dev
= 
part
[ 0 ] 

1658 
size
= 
part
[ 1 ] 

1659 if 
type
== 
self
. 
biggest_free_choice
and 
part
[ 2 ] == 
self
. 
biggest_free_id
: 

1660 
b
. 
	`add_segment_rgb
( 
	`get_release_name
( ) , 
size
, 
self
. 
release_color
) 

1661 elif 
dev
== 'free' : 

1662 
b
. 
	`add_segment_rgb
( "Free Space" , 
size
, 
b
. 
remainder_color
) 

1664 if 
dev
in 
self
. 
dev_colors
: 

1665 
c
= 
self
. 
dev_colors
[ 
dev
] 

1667 
c
= 
self
. 
auto_colors
[ 
i
] 

1668 
self
. 
dev_colors
[ 
dev
] = 
c


1669 
b
. 
	`add_segment_rgb
( 
dev
, 
size
, 
c
) 

1670 if 
dev
== 
self
. 
resize_path
and 
type
== 
self
. 
resize_choice
: 

1671 
self
. 
action_bar
. 
	`add_segment_rgb
( 
	`get_release_name
( ) , - 1 , 

1672 
self
. 
release_color
) 

1673 
i
= ( 
i
+ 1 ) % 
	`len
( 
self
. 
auto_colors
) 

1675 
	}


1675 def 
	$setup_format_warnings
( 
self
, 
extra_options
) : 

1676 for 
extra
in 
extra_options
: 

1677 for 
k
in 
self
. 
disk_layout
: 

1678 
disk
= 
k


1679 if 
disk
. 
	`startswith
( '=dev=' ) : 

1680 
disk
= 
disk
[ 5 : ] 

1681 if '(%s)' % 
disk
not in 
extra
: 

1683 
l
= [ ] 

1684 for 
part
in 
self
. 
disk_layout
[ 
k
] : 

1685 if 
part
[ 0 ] == 'free' : 

1687 
ret
= 
	`find_in_os_prober
( 
part
[ 0 ] ) 

1688 if 
ret
and 
ret
!= 'swap' : 

1689 
l
. 
	`append
( 
ret
) 

1690 if 
l
: 

1691 if 
	`len
( 
l
) == 1 : 

1692 
l
= 
l
[ 0 ] 

1693 elif 
	`len
( 
l
) > 1 : 

1694 
l
= ', ' . 
	`join
( 
l
) 

1695 
txt
= 
self
. 
	`get_string
( 'ubiquity/text/part_format_warning' ) 

1696 
txt
= 
txt
. 
	`replace
( '${RELEASE}' , 
	`get_release_name
( ) ) 

1697 
txt
= 
txt
. 
	`replace
( '${SYSTEMS}' , 
l
) 

1698 
self
. 
format_warnings
[ 
extra
] = 
txt


1700 
	}


1700 def 
	$set_autopartition_choices
( 
self
, 
choices
, 
extra_options
, 

1701 
resize_choice
, 
manual_choice
, 

1702 
biggest_free_choice
) : 

1703 
BaseFrontend
. 
	`set_autopartition_choices
( 
self
, 
choices
, 
extra_options
, 

1704 
resize_choice
, 
manual_choice
, 

1705 
biggest_free_choice
) 

1707 if 
resize_choice
in 
choices
: 

1708 
self
. 
resize_min_size
, 
self
. 
resize_max_size
, 

1709 
self
. 
resize_orig_size
, 
self
. 
resize_path
= 

1710 
extra_options
[ 
resize_choice
] 

1711 
self
. 
action_bar
. 
	`set_part_size
( 
self
. 
resize_orig_size
) 

1712 
self
. 
action_bar
. 
	`set_min
( 
self
. 
resize_min_size
) 

1713 
self
. 
action_bar
. 
	`set_max
( 
self
. 
resize_max_size
) 

1714 
self
. 
action_bar
. 
	`set_device
( 
self
. 
resize_path
) 

1715 if 
biggest_free_choice
in 
choices
: 

1716 
self
. 
biggest_free_id
= 
extra_options
[ 
biggest_free_choice
] 

1718 for 
child
in 
self
. 
autopartition_choices_vbox
. 
	`get_children
( ) : 

1719 
self
. 
autopartition_choices_vbox
. 
	`remove
( 
child
) 

1721 
text
= 
self
. 
	`get_string
( 'ubiquity/text/part_auto_choices_label' ) 

1722 
text
= 
text
. 
	`replace
( '${RELEASE}' , 
	`get_release_name
( ) ) 

1723 
self
. 
part_auto_choices_label
. 
	`set_text
( 
text
) 

1725 
firstbutton
= None 

1726 
extra_combo
= None 

1727 for 
choice
in 
choices
: 

1728 
button
= 
gtk
. 
	`RadioButton
( 
firstbutton
, 
choice
, False ) 

1729 if 
firstbutton
is None : 

1730 
firstbutton
= 
button


1731 
self
. 
autopartition_choices_vbox
. 
	`add
( 
button
) 

1733 if 
choice
in 
extra_options
and 
choice
!= 
biggest_free_choice
: 

1734 
alignment
= 
gtk
. 
	`Alignment
( 
xscale
= 1 , 
yscale
= 1 ) 

1735 
alignment
. 
	`set_padding
( 0 , 0 , 12 , 0 ) 

1737 if 
choice
not in [ 
resize_choice
, 
manual_choice
] : 

1738 
extra_combo
= 
gtk
. 
	`combo_box_new_text
( ) 

1739 
vbox
= 
gtk
. 
	`VBox
( 
spacing
= 6 ) 

1740 
alignment
. 
	`add
( 
vbox
) 

1741 
vbox
. 
	`add
( 
extra_combo
) 

1742 for 
extra
in 
extra_options
[ 
choice
] : 

1743 
extra_combo
. 
	`append_text
( 
extra
) 

1744 
a
= 
gtk
. 
	`Alignment
( 
xscale
= 1 , 
yscale
= 1 ) 

1745 
a
. 
	`set_padding
( 0 , 0 , 12 , 0 ) 

1746 
a
. 
	`hide
( ) 

1747 
self
. 
format_warning_align
= 
a


1748 
label
= 
gtk
. 
	`Label
( ) 

1749 
self
. 
format_warning
= 
label


1750 
hbox
= 
gtk
. 
	`HBox
( 
spacing
= 6 ) 

1751 
img
= 
gtk
. 
	`Image
( ) 

1752 
img
. 
	`set_from_icon_name
( 'gtk-dialog-warning' , 
gtk
. 
ICON_SIZE_BUTTON
) 

1753 
hbox
. 
	`pack_start
( 
img
, 
expand
= False , 
fill
= False ) 

1754 
hbox
. 
	`pack_start
( 
label
, 
expand
= False , 
fill
= False ) 

1755 
a
. 
	`add
( 
hbox
) 

1756 
vbox
. 
	`add
( 
a
) 

1758 
self
. 
	`setup_format_warnings
( 
extra_options
[ 
choice
] ) 

1759 
extra_combo
. 
	`connect
( 'changed' , 
self
. 
on_extra_combo_changed
) 

1760 
extra_combo
. 
	`set_active
( 0 ) 

1761 
self
. 
autopartition_choices_vbox
. 
	`pack_start
( 
alignment
, 

1762 
expand
= False , 
fill
= False ) 

1763 
self
. 
autopartition_extras
[ 
choice
] = 
alignment


1764 
button
. 
	`connect
( 'toggled' , 
self
. 
on_autopartition_toggled
, 
extra_combo
) 

1766 if 
firstbutton
is not None : 

1767 
firstbutton
. 
	`set_active
( True ) 

1768 
self
. 
	`on_autopartition_toggled
( 
firstbutton
, 
extra_combo
) 

1769 
self
. 
autopartition_choices_vbox
. 
	`show_all
( ) 

1772 
self
. 
	`set_current_page
( 
self
. 
steps
. 
	`page_num
( 
self
. 
stepPartAuto
) ) 

1775 
	}


1775 def 
	$get_autopartition_choice
( 
self
) : 

1776 for 
button
in 
self
. 
autopartition_choices_vbox
. 
	`get_children
( ) : 

1777 if 
	`isinstance
( 
button
, 
gtk
. 
Button
) : 

1778 if 
button
. 
	`get_active
( ) : 

1779 
choice
= 
	`unicode
( 
button
. 
	`get_label
( ) , 'utf-8' , 'replace' ) 

1782 raise 
AssertionError
, "no active autopartitioning choice" 

1784 if 
choice
== 
self
. 
resize_choice
: 

1786 assert 
self
. 
action_bar
. 
resize
!= - 1 

1787 return 
choice
, '%d B' % 
self
. 
action_bar
. 
	`get_size
( ) 

1788 elif ( 
choice
!= 
self
. 
manual_choice
and 

1789 
choice
in 
self
. 
autopartition_extras
) : 

1790 
vbox
= 
self
. 
autopartition_extras
[ 
choice
] . 
child


1791 for 
child
in 
vbox
. 
	`get_children
( ) : 

1792 if 
	`isinstance
( 
child
, 
gtk
. 
ComboBox
) : 

1793 return 
choice
, 
	`unicode
( 
child
. 
	`get_active_text
( ) , 

1796 return 
choice
, None 

1798 return 
choice
, None 

1801 
	}


1801 def 
	$installation_medium_mounted
( 
self
, 
message
) : 

1802 
self
. 
part_advanced_warning_message
. 
	`set_text
( 
message
) 

1803 
self
. 
part_advanced_warning_hbox
. 
	`show_all
( ) 

1806 
	}


1806 def 
	$partman_column_name
( 
self
, 
column
, 
cell
, 
model
, 
iterator
) : 

1807 
partition
= 
model
[ 
iterator
] [ 1 ] 

1808 if 'id' not in 
partition
: 

1810 
cell
. 
	`set_property
( 'text' , 
partition
[ 'device' ] ) 

1811 elif 
partition
[ 'parted' ] [ 'fs' ] != 'free' : 

1812 
cell
. 
	`set_property
( 'text' , '  %s' % 
partition
[ 'parted' ] [ 'path' ] ) 

1813 elif 
partition
[ 'parted' ] [ 'type' ] == 'unusable' : 

1814 
unusable
= 
self
. 
	`get_string
( 'partman/text/unusable' ) 

1815 
cell
. 
	`set_property
( 'text' , '  %s' % 
unusable
) 

1819 
free_space
= 
self
. 
	`get_string
( 'partition_free_space' ) 

1820 
cell
. 
	`set_property
( 'text' , '  %s' % 
free_space
) 

1822 
	}


1822 def 
	$partman_column_type
( 
self
, 
column
, 
cell
, 
model
, 
iterator
) : 

1823 
partition
= 
model
[ 
iterator
] [ 1 ] 

1824 if 'id' not in 
partition
or 'method' not in 
partition
: 

1825 if ( 'parted' in 
partition
and 

1826 
partition
[ 'parted' ] [ 'fs' ] != 'free' and 

1827 'detected_filesystem' in 
partition
) : 

1828 
cell
. 
	`set_property
( 'text' , 
partition
[ 'detected_filesystem' ] ) 

1830 
cell
. 
	`set_property
( 'text' , '' ) 

1831 elif ( 'filesystem' in 
partition
and 

1832 
partition
[ 'method' ] in ( 'format' , 'keep' ) ) : 

1833 
cell
. 
	`set_property
( 'text' , 
partition
[ 'acting_filesystem' ] ) 

1835 
cell
. 
	`set_property
( 'text' , 
partition
[ 'method' ] ) 

1837 
	}


1837 def 
	$partman_column_mountpoint
( 
self
, 
column
, 
cell
, 
model
, 
iterator
) : 

1838 
partition
= 
model
[ 
iterator
] [ 1 ] 

1839 if 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1840 
mountpoint
= 
self
. 
dbfilter
. 
	`get_current_mountpoint
( 
partition
) 

1841 if 
mountpoint
is None : 

1842 
mountpoint
= '' 

1844 
mountpoint
= '' 

1845 
cell
. 
	`set_property
( 'text' , 
mountpoint
) 

1847 
	}


1847 def 
	$partman_column_format
( 
self
, 
column
, 
cell
, 
model
, 
iterator
) : 

1848 
partition
= 
model
[ 
iterator
] [ 1 ] 

1849 if 'id' not in 
partition
: 

1850 
cell
. 
	`set_property
( 'visible' , False ) 

1851 
cell
. 
	`set_property
( 'active' , False ) 

1852 
cell
. 
	`set_property
( 'activatable' , False ) 

1853 elif 'method' in 
partition
: 

1854 
cell
. 
	`set_property
( 'visible' , True ) 

1855 
cell
. 
	`set_property
( 'active' , 
partition
[ 'method' ] == 'format' ) 

1856 
cell
. 
	`set_property
( 'activatable' , 'can_activate_format' in 
partition
) 

1858 
cell
. 
	`set_property
( 'visible' , True ) 

1859 
cell
. 
	`set_property
( 'active' , False ) 

1860 
cell
. 
	`set_property
( 'activatable' , False ) 

1862 
	}


1862 def 
	$partman_column_format_toggled
( 
self
, 
cell
, 
path
, 
user_data
) : 

1863 if not 
self
. 
allowed_change_step
: 

1865 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1867 
model
= 
user_data


1868 
devpart
= 
model
[ 
path
] [ 0 ] 

1869 
partition
= 
model
[ 
path
] [ 1 ] 

1870 if 'id' not in 
partition
or 'method' not in 
partition
: 

1872 
self
. 
	`allow_change_step
( False ) 

1873 
self
. 
dbfilter
. 
	`edit_partition
( 
devpart
, 
format
= 'dummy' ) 

1875 
	}


1875 def 
	$partman_column_size
( 
self
, 
column
, 
cell
, 
model
, 
iterator
) : 

1876 
partition
= 
model
[ 
iterator
] [ 1 ] 

1877 if 'id' not in 
partition
: 

1878 
cell
. 
	`set_property
( 'text' , '' ) 

1882 
size_mb
= 
	`int
( 
partition
[ 'parted' ] [ 'size' ] ) / 1000000 

1883 
cell
. 
	`set_property
( 'text' , '%d MB' % 
size_mb
) 

1885 
	}


1885 def 
	$partman_column_used
( 
self
, 
column
, 
cell
, 
model
, 
iterator
) : 

1886 
partition
= 
model
[ 
iterator
] [ 1 ] 

1887 if 'id' not in 
partition
or 
partition
[ 'parted' ] [ 'fs' ] == 'free' : 

1888 
cell
. 
	`set_property
( 'text' , '' ) 

1889 elif 'resize_min_size' not in 
partition
: 

1890 
unknown
= 
self
. 
	`get_string
( 'partition_used_unknown' ) 

1891 
cell
. 
	`set_property
( 'text' , 
unknown
) 

1895 
size_mb
= 
	`int
( 
partition
[ 'resize_min_size' ] ) / 1000000 

1896 
cell
. 
	`set_property
( 'text' , '%d MB' % 
size_mb
) 

1898 
	}


1898 def 
	$partman_popup
( 
self
, 
widget
, 
event
) : 

1899 if not 
self
. 
allowed_change_step
: 

1901 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1904 
model
, 
iterator
= 
widget
. 
	`get_selection
( ) . 
	`get_selected
( ) 

1905 if 
iterator
is None : 

1906 
devpart
= None 

1907 
partition
= None 

1909 
devpart
= 
model
[ 
iterator
] [ 0 ] 

1910 
partition
= 
model
[ 
iterator
] [ 1 ] 

1912 
partition_list_menu
= 
gtk
. 
	`Menu
( ) 

1913 for 
action
in 
self
. 
dbfilter
. 
	`get_actions
( 
devpart
, 
partition
) : 

1914 if 
action
== 'new_label' : 

1915 
new_label_item
= 
gtk
. 
	`MenuItem
( 

1916 
self
. 
	`get_string
( 'partition_button_new_label' ) ) 

1917 
new_label_item
. 
	`connect
( 

1918 'activate' , 
self
. 
on_partition_list_new_label_activate
) 

1919 
partition_list_menu
. 
	`append
( 
new_label_item
) 

1920 elif 
action
== 'new' : 

1921 
new_item
= 
gtk
. 
	`MenuItem
( 

1922 
self
. 
	`get_string
( 'partition_button_new' ) ) 

1923 
new_item
. 
	`connect
( 

1924 'activate' , 
self
. 
on_partition_list_new_activate
) 

1925 
partition_list_menu
. 
	`append
( 
new_item
) 

1926 elif 
action
== 'edit' : 

1927 
edit_item
= 
gtk
. 
	`MenuItem
( 

1928 
self
. 
	`get_string
( 'partition_button_edit' ) ) 

1929 
edit_item
. 
	`connect
( 

1930 'activate' , 
self
. 
on_partition_list_edit_activate
) 

1931 
partition_list_menu
. 
	`append
( 
edit_item
) 

1932 elif 
action
== 'delete' : 

1933 
delete_item
= 
gtk
. 
	`MenuItem
( 

1934 
self
. 
	`get_string
( 'partition_button_delete' ) ) 

1935 
delete_item
. 
	`connect
( 

1936 'activate' , 
self
. 
on_partition_list_delete_activate
) 

1937 
partition_list_menu
. 
	`append
( 
delete_item
) 

1938 if 
partition_list_menu
. 
	`get_children
( ) : 

1939 
partition_list_menu
. 
	`append
( 
gtk
. 
	`SeparatorMenuItem
( ) ) 

1940 
undo_item
= 
gtk
. 
	`MenuItem
( 

1941 
self
. 
	`get_string
( 'partman/text/undo_everything' ) ) 

1942 
undo_item
. 
	`connect
( 'activate' , 
self
. 
on_partition_list_undo_activate
) 

1943 
partition_list_menu
. 
	`append
( 
undo_item
) 

1944 
partition_list_menu
. 
	`show_all
( ) 

1946 if 
event
: 

1947 
button
= 
event
. 
button


1948 
time
= 
event
. 
	`get_time
( ) 

1950 
button
= 0 

1951 
time
= 0 

1952 
partition_list_menu
. 
	`popup
( None , None , None , 
button
, 
time
) 

1954 
	}


1954 def 
	$partman_create_dialog
( 
self
, 
devpart
, 
partition
) : 

1955 if not 
self
. 
allowed_change_step
: 

1957 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

1960 
self
. 
partition_create_dialog
. 
	`show_all
( ) 

1966 if 
partition
[ 'parted' ] [ 'type' ] == 'pri/log' : 

1968 
model
= 
self
. 
partition_list_treeview
. 
	`get_model
( ) 

1969 for 
otherpart
in [ 
row
[ 1 ] for 
row
in 
model
] : 

1970 if ( 
otherpart
[ 'dev' ] == 
partition
[ 'dev' ] and 

1971 'id' in 
otherpart
and 

1972 
otherpart
[ 'parted' ] [ 'type' ] == 'primary' ) : 

1973 
self
. 
partition_create_type_logical
. 
	`set_active
( True ) 

1976 
self
. 
partition_create_type_primary
. 
	`set_active
( True ) 

1978 
self
. 
partition_create_type_label
. 
	`hide
( ) 

1979 
self
. 
partition_create_type_primary
. 
	`hide
( ) 

1980 
self
. 
partition_create_type_logical
. 
	`hide
( ) 

1984 
max_size_mb
= 
	`int
( 
partition
[ 'parted' ] [ 'size' ] ) / 1000000 

1985 
self
. 
partition_create_size_spinbutton
. 
	`set_adjustment
( 

1986 
gtk
. 
	`Adjustment
( 
value
= 
max_size_mb
, 
upper
= 
max_size_mb
, 

1987 
step_incr
= 1 , 
page_incr
= 100 ) ) 

1988 
self
. 
partition_create_size_spinbutton
. 
	`set_value
( 
max_size_mb
) 

1990 
self
. 
partition_create_place_beginning
. 
	`set_active
( True ) 

1992 
self
. 
partition_create_use_combo
. 
	`clear
( ) 

1993 
renderer
= 
gtk
. 
	`CellRendererText
( ) 

1994 
self
. 
partition_create_use_combo
. 
	`pack_start
( 
renderer
) 

1995 
self
. 
partition_create_use_combo
. 
	`add_attribute
( 
renderer
, 'text' , 2 ) 

1996 
list_store
= 
gtk
. 
	`ListStore
( 
gobject
. 
TYPE_STRING
, 
gobject
. 
TYPE_STRING
, 

1997 
gobject
. 
TYPE_STRING
) 

1998 for 
method
, 
name
, 
description
in 
self
. 
dbfilter
. 
	`create_use_as
( ) : 

1999 
list_store
. 
	`append
( [ 
method
, 
name
, 
description
] ) 

2000 
self
. 
partition_create_use_combo
. 
	`set_model
( 
list_store
) 

2001 if 
list_store
. 
	`get_iter_first
( ) : 

2002 
self
. 
partition_create_use_combo
. 
	`set_active
( 0 ) 

2004 
list_store
= 
gtk
. 
	`ListStore
( 
gobject
. 
TYPE_STRING
) 

2005 for 
mp
, 
choice_c
, 
choice
in 
self
. 
dbfilter
. 
	`default_mountpoint_choices
( ) : 

2006 
list_store
. 
	`append
( [ 
mp
] ) 

2007 
self
. 
partition_create_mount_combo
. 
	`set_model
( 
list_store
) 

2008 if 
self
. 
partition_create_mount_combo
. 
	`get_text_column
( ) == - 1 : 

2009 
self
. 
partition_create_mount_combo
. 
	`set_text_column
( 0 ) 

2010 
self
. 
partition_create_mount_combo
. 
child
. 
	`set_text
( '' ) 

2012 
response
= 
self
. 
partition_create_dialog
. 
	`run
( ) 

2013 
self
. 
partition_create_dialog
. 
	`hide
( ) 

2015 if ( 
response
== 
gtk
. 
RESPONSE_OK
and 

2016 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) ) : 

2017 if 
partition
[ 'parted' ] [ 'type' ] == 'primary' : 

2018 
prilog
= 
partman
. 
PARTITION_TYPE_PRIMARY


2019 elif 
partition
[ 'parted' ] [ 'type' ] == 'logical' : 

2020 
prilog
= 
partman
. 
PARTITION_TYPE_LOGICAL


2021 elif 
partition
[ 'parted' ] [ 'type' ] == 'pri/log' : 

2022 if 
self
. 
partition_create_type_primary
. 
	`get_active
( ) : 

2023 
prilog
= 
partman
. 
PARTITION_TYPE_PRIMARY


2025 
prilog
= 
partman
. 
PARTITION_TYPE_LOGICAL


2027 if 
self
. 
partition_create_place_beginning
. 
	`get_active
( ) : 

2028 
place
= 
partman
. 
PARTITION_PLACE_BEGINNING


2030 
place
= 
partman
. 
PARTITION_PLACE_END


2032 
method_iter
= 
self
. 
partition_create_use_combo
. 
	`get_active_iter
( ) 

2033 if 
method_iter
is None : 

2034 
method
= None 

2036 
model
= 
self
. 
partition_create_use_combo
. 
	`get_model
( ) 

2037 
method
= 
model
. 
	`get_value
( 
method_iter
, 1 ) 

2039 
mountpoint
= 
self
. 
partition_create_mount_combo
. 
child
. 
	`get_text
( ) 

2041 
self
. 
	`allow_change_step
( False ) 

2042 
self
. 
dbfilter
. 
	`create_partition
( 

2043 
devpart
, 

2044 
	`str
( 
self
. 
partition_create_size_spinbutton
. 
	`get_value
( ) ) , 

2045 
prilog
, 
place
, 
method
, 
mountpoint
) 

2047 
	}


2047 def 
	$on_partition_create_use_combo_changed
( 
self
, 
combobox
) : 

2048 
model
= 
combobox
. 
	`get_model
( ) 

2049 
iterator
= 
combobox
. 
	`get_active_iter
( ) 

2052 if 
iterator
is None or 
model
[ 
iterator
] [ 0 ] != 'filesystem' : 

2053 
self
. 
partition_create_mount_combo
. 
child
. 
	`set_text
( '' ) 

2054 
self
. 
partition_create_mount_combo
. 
	`set_sensitive
( False ) 

2056 
self
. 
partition_create_mount_combo
. 
	`set_sensitive
( True ) 

2057 if 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

2058 
mount_model
= 
self
. 
partition_create_mount_combo
. 
	`get_model
( ) 

2059 if 
mount_model
is not None : 

2060 
fs
= 
model
[ 
iterator
] [ 1 ] 

2061 
mount_model
. 
	`clear
( ) 

2062 for 
mp
, 
choice_c
, 
choice
in 

2063 
self
. 
dbfilter
. 
	`default_mountpoint_choices
( 
fs
) : 

2064 
mount_model
. 
	`append
( [ 
mp
] ) 

2066 
	}


2066 def 
	$partman_edit_dialog
( 
self
, 
devpart
, 
partition
) : 

2067 if not 
self
. 
allowed_change_step
: 

2069 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

2072 
self
. 
partition_edit_dialog
. 
	`show_all
( ) 

2074 
current_size
= None 

2075 if ( 'can_resize' not in 
partition
or not 
partition
[ 'can_resize' ] or 

2076 'resize_min_size' not in 
partition
or 

2077 'resize_max_size' not in 
partition
) : 

2078 
self
. 
partition_edit_size_label
. 
	`hide
( ) 

2079 
self
. 
partition_edit_size_spinbutton
. 
	`hide
( ) 

2083 
min_size_mb
= 
	`int
( 
partition
[ 'resize_min_size' ] ) / 1000000 

2084 
cur_size_mb
= 
	`int
( 
partition
[ 'parted' ] [ 'size' ] ) / 1000000 

2085 
max_size_mb
= 
	`int
( 
partition
[ 'resize_max_size' ] ) / 1000000 

2087 
min_size_mb
= 
	`min
( 
min_size_mb
, 
cur_size_mb
) 

2088 
max_size_mb
= 
	`max
( 
cur_size_mb
, 
max_size_mb
) 

2089 
self
. 
partition_edit_size_spinbutton
. 
	`set_adjustment
( 

2090 
gtk
. 
	`Adjustment
( 
value
= 
cur_size_mb
, 
lower
= 
min_size_mb
, 

2091 
upper
= 
max_size_mb
, 

2092 
step_incr
= 1 , 
page_incr
= 100 ) ) 

2093 
self
. 
partition_edit_size_spinbutton
. 
	`set_value
( 
cur_size_mb
) 

2094 
current_size
= 
	`str
( 
self
. 
partition_edit_size_spinbutton
. 
	`get_value
( ) ) 

2096 
self
. 
partition_edit_use_combo
. 
	`clear
( ) 

2097 
renderer
= 
gtk
. 
	`CellRendererText
( ) 

2098 
self
. 
partition_edit_use_combo
. 
	`pack_start
( 
renderer
) 

2099 
self
. 
partition_edit_use_combo
. 
	`add_attribute
( 
renderer
, 'text' , 1 ) 

2100 
list_store
= 
gtk
. 
	`ListStore
( 
gobject
. 
TYPE_STRING
, 
gobject
. 
TYPE_STRING
) 

2101 for 
script
, 
arg
, 
option
in 
partition
[ 'method_choices' ] : 

2102 
list_store
. 
	`append
( [ 
arg
, 
option
] ) 

2103 
self
. 
partition_edit_use_combo
. 
	`set_model
( 
list_store
) 

2104 
current_method
= 
self
. 
dbfilter
. 
	`get_current_method
( 
partition
) 

2105 if 
current_method
: 

2106 
iterator
= 
list_store
. 
	`get_iter_first
( ) 

2107 while 
iterator
: 

2108 if 
list_store
[ 
iterator
] [ 0 ] == 
current_method
: 

2109 
self
. 
partition_edit_use_combo
. 
	`set_active_iter
( 
iterator
) 

2111 
iterator
= 
list_store
. 
	`iter_next
( 
iterator
) 

2113 if 'id' not in 
partition
: 

2114 
self
. 
partition_edit_format_label
. 
	`hide
( ) 

2115 
self
. 
partition_edit_format_checkbutton
. 
	`hide
( ) 

2116 
current_format
= False 

2117 elif 'method' in 
partition
: 

2118 
self
. 
partition_edit_format_label
. 
	`show
( ) 

2119 
self
. 
partition_edit_format_checkbutton
. 
	`show
( ) 

2120 
self
. 
partition_edit_format_checkbutton
. 
	`set_sensitive
( 

2121 'can_activate_format' in 
partition
) 

2122 
current_format
= ( 
partition
[ 'method' ] == 'format' ) 

2124 
self
. 
partition_edit_format_label
. 
	`show
( ) 

2125 
self
. 
partition_edit_format_checkbutton
. 
	`show
( ) 

2126 
self
. 
partition_edit_format_checkbutton
. 
	`set_sensitive
( False ) 

2127 
current_format
= False 

2128 
self
. 
partition_edit_format_checkbutton
. 
	`set_active
( 
current_format
) 

2130 
list_store
= 
gtk
. 
	`ListStore
( 
gobject
. 
TYPE_STRING
, 
gobject
. 
TYPE_STRING
) 

2131 if 'mountpoint_choices' in 
partition
: 

2132 for 
mp
, 
choice_c
, 
choice
in 
partition
[ 'mountpoint_choices' ] : 

2133 
list_store
. 
	`append
( [ 
mp
, 
choice
] ) 

2134 
self
. 
partition_edit_mount_combo
. 
	`set_model
( 
list_store
) 

2135 if 
self
. 
partition_edit_mount_combo
. 
	`get_text_column
( ) == - 1 : 

2136 
self
. 
partition_edit_mount_combo
. 
	`set_text_column
( 0 ) 

2137 
current_mountpoint
= 
self
. 
dbfilter
. 
	`get_current_mountpoint
( 
partition
) 

2138 if 
current_mountpoint
is not None : 

2139 
self
. 
partition_edit_mount_combo
. 
child
. 
	`set_text
( 
current_mountpoint
) 

2140 
iterator
= 
list_store
. 
	`get_iter_first
( ) 

2141 while 
iterator
: 

2142 if 
list_store
[ 
iterator
] [ 0 ] == 
current_mountpoint
: 

2143 
self
. 
partition_edit_mount_combo
. 
	`set_active_iter
( 
iterator
) 

2145 
iterator
= 
list_store
. 
	`iter_next
( 
iterator
) 

2147 
response
= 
self
. 
partition_edit_dialog
. 
	`run
( ) 

2148 
self
. 
partition_edit_dialog
. 
	`hide
( ) 

2150 if ( 
response
== 
gtk
. 
RESPONSE_OK
and 

2151 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) ) : 

2152 
size
= None 

2153 if 
current_size
is not None : 

2154 
size
= 
	`str
( 
self
. 
partition_edit_size_spinbutton
. 
	`get_value
( ) ) 

2156 
method_iter
= 
self
. 
partition_edit_use_combo
. 
	`get_active_iter
( ) 

2157 if 
method_iter
is None : 

2158 
method
= None 

2160 
model
= 
self
. 
partition_edit_use_combo
. 
	`get_model
( ) 

2161 
method
= 
model
. 
	`get_value
( 
method_iter
, 0 ) 

2163 
format
= 
self
. 
partition_edit_format_checkbutton
. 
	`get_active
( ) 

2165 
mountpoint
= 
self
. 
partition_edit_mount_combo
. 
child
. 
	`get_text
( ) 

2167 if ( 
current_size
is not None and 
size
is not None and 

2168 
current_size
== 
size
) : 

2169 
size
= None 

2170 if 
method
== 
current_method
: 

2171 
method
= None 

2172 if 
format
== 
current_format
: 

2173 
format
= None 

2174 if 
mountpoint
== 
current_mountpoint
: 

2175 
mountpoint
= None 

2177 if ( 
size
is not None or 
method
is not None or 
format
is not None or 

2178 
mountpoint
is not None ) : 

2179 
self
. 
	`allow_change_step
( False ) 

2180 
edits
= { 'size' : 
size
, 'method' : 
method
, 

2181 'mountpoint' : 
mountpoint
} 

2182 if 
format
is not None : 

2183 
edits
[ 'format' ] = 'dummy' 

2184 
self
. 
dbfilter
. 
	`edit_partition
( 
devpart
, ** 
edits
) 

2186 
	}


2186 def 
	$on_partition_edit_use_combo_changed
( 
self
, 
combobox
) : 

2187 
model
= 
combobox
. 
	`get_model
( ) 

2188 
iterator
= 
combobox
. 
	`get_active_iter
( ) 

2192 
known_filesystems
= ( 'ext3' , 'ext4' , 'ext2' , 'reiserfs' , 'jfs' , 'xfs' , 

2194 if 
iterator
is None or 
model
[ 
iterator
] [ 0 ] not in 
known_filesystems
: 

2195 
self
. 
partition_edit_mount_combo
. 
child
. 
	`set_text
( '' ) 

2196 
self
. 
partition_edit_mount_combo
. 
	`set_sensitive
( False ) 

2197 
self
. 
partition_edit_format_checkbutton
. 
	`set_sensitive
( False ) 

2199 
self
. 
partition_edit_mount_combo
. 
	`set_sensitive
( True ) 

2200 
self
. 
partition_edit_format_checkbutton
. 
	`set_sensitive
( True ) 

2201 if 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

2202 
mount_model
= 
self
. 
partition_edit_mount_combo
. 
	`get_model
( ) 

2203 if 
mount_model
is not None : 

2204 
fs
= 
model
[ 
iterator
] [ 0 ] 

2205 
mount_model
. 
	`clear
( ) 

2206 for 
mp
, 
choice_c
, 
choice
in 

2207 
self
. 
dbfilter
. 
	`default_mountpoint_choices
( 
fs
) : 

2208 
mount_model
. 
	`append
( [ 
mp
, 
choice
] ) 

2210 
	}


2210 def 
	$on_partition_list_treeview_button_press_event
( 
self
, 
widget
, 
event
) : 

2211 if 
event
. 
type
== 
gtk
. 
gdk
. 
BUTTON_PRESS
and 
event
. 
button
== 3 : 

2212 
path_at_pos
= 
widget
. 
	`get_path_at_pos
( 
	`int
( 
event
. 
x
) , 
	`int
( 
event
. 
y
) ) 

2213 if 
path_at_pos
is not None : 

2214 
selection
= 
widget
. 
	`get_selection
( ) 

2215 
selection
. 
	`unselect_all
( ) 

2216 
selection
. 
	`select_path
( 
path_at_pos
[ 0 ] ) 

2218 
self
. 
	`partman_popup
( 
widget
, 
event
) 

2221 
	}


2221 def 
	$on_partition_list_treeview_key_press_event
( 
self
, 
widget
, 
event
) : 

2222 if 
event
. 
type
!= 
gtk
. 
gdk
. 
KEY_PRESS
: 

2225 if 
event
. 
keyval
== 
gtk
. 
keysyms
. 
Delete
: 

2226 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

2228 
devpart
, 
partition
= 
self
. 
	`partition_list_get_selection
( ) 

2229 for 
action
in 
self
. 
dbfilter
. 
	`get_actions
( 
devpart
, 
partition
) : 

2230 if 
action
== 'delete' : 

2231 
self
. 
	`on_partition_list_delete_activate
( 
widget
) 

2236 
	}


2236 def 
	$on_partition_list_treeview_popup_menu
( 
self
, 
widget
) : 

2237 
self
. 
	`partman_popup
( 
widget
, None ) 

2240 
	}


2240 def 
	$on_partition_list_treeview_selection_changed
( 
self
, 
selection
) : 

2241 
self
. 
partition_button_new_label
. 
	`set_sensitive
( False ) 

2242 
self
. 
partition_button_new
. 
	`set_sensitive
( False ) 

2243 
self
. 
partition_button_edit
. 
	`set_sensitive
( False ) 

2244 
self
. 
partition_button_delete
. 
	`set_sensitive
( False ) 

2245 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

2248 
model
, 
iterator
= 
selection
. 
	`get_selected
( ) 

2249 if 
iterator
is None : 

2250 
devpart
= None 

2251 
partition
= None 

2253 
devpart
= 
model
[ 
iterator
] [ 0 ] 

2254 
partition
= 
model
[ 
iterator
] [ 1 ] 

2255 if 'id' not in 
partition
: 

2256 
dev
= 
partition
[ 'device' ] 

2258 
dev
= 
partition
[ 'parent' ] 

2259 for 
p
in 
self
. 
partition_bars
. 
	`itervalues
( ) : 

2260 
p
. 
	`hide
( ) 

2261 
self
. 
partition_bars
[ 
dev
] . 
	`show
( ) 

2262 for 
action
in 
self
. 
dbfilter
. 
	`get_actions
( 
devpart
, 
partition
) : 

2263 if 
action
== 'new_label' : 

2264 
self
. 
partition_button_new_label
. 
	`set_sensitive
( True ) 

2265 elif 
action
== 'new' : 

2266 
self
. 
partition_button_new
. 
	`set_sensitive
( True ) 

2267 elif 
action
== 'edit' : 

2268 
self
. 
partition_button_edit
. 
	`set_sensitive
( True ) 

2269 elif 
action
== 'delete' : 

2270 
self
. 
partition_button_delete
. 
	`set_sensitive
( True ) 

2271 
self
. 
partition_button_undo
. 
	`set_sensitive
( True ) 

2273 
	}


2273 def 
	$on_partition_list_treeview_row_activated
( 
self
, 
treeview
, 

2274 
path
, 
view_column
) : 

2275 if not 
self
. 
allowed_change_step
: 

2277 
model
= 
treeview
. 
	`get_model
( ) 

2279 
devpart
= 
model
[ 
path
] [ 0 ] 

2280 
partition
= 
model
[ 
path
] [ 1 ] 

2281 except ( 
IndexError
, 
KeyError
) : 

2284 if 'id' not in 
partition
: 

2288 for 
otherpart
in [ 
row
[ 1 ] for 
row
in 
model
] : 

2289 if 
otherpart
[ 'dev' ] == 
partition
[ 'dev' ] and 'id' in 
otherpart
: 

2292 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

2294 
self
. 
	`allow_change_step
( False ) 

2295 
self
. 
dbfilter
. 
	`create_label
( 
devpart
) 

2296 elif 
partition
[ 'parted' ] [ 'fs' ] == 'free' : 

2297 if 'can_new' in 
partition
and 
partition
[ 'can_new' ] : 

2298 
self
. 
	`partman_create_dialog
( 
devpart
, 
partition
) 

2300 
self
. 
	`partman_edit_dialog
( 
devpart
, 
partition
) 

2302 
	}


2302 def 
	$partition_list_get_selection
( 
self
) : 

2303 
model
, 
iterator
= 
self
. 
partition_list_treeview
. 
	`get_selection
( ) . 
	`get_selected
( ) 

2304 if 
iterator
is None : 

2305 
devpart
= None 

2306 
partition
= None 

2308 
devpart
= 
model
[ 
iterator
] [ 0 ] 

2309 
partition
= 
model
[ 
iterator
] [ 1 ] 

2310 return ( 
devpart
, 
partition
) 

2312 
	}


2312 def 
	$on_partition_list_new_label_activate
( 
self
, 
widget
) : 

2313 if not 
self
. 
allowed_change_step
: 

2315 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

2317 
self
. 
	`allow_change_step
( False ) 

2318 
devpart
, 
partition
= 
self
. 
	`partition_list_get_selection
( ) 

2319 
self
. 
dbfilter
. 
	`create_label
( 
devpart
) 

2321 
	}


2321 def 
	$on_partition_list_new_activate
( 
self
, 
widget
) : 

2322 
devpart
, 
partition
= 
self
. 
	`partition_list_get_selection
( ) 

2323 
self
. 
	`partman_create_dialog
( 
devpart
, 
partition
) 

2325 
	}


2325 def 
	$on_partition_list_edit_activate
( 
self
, 
widget
) : 

2326 
devpart
, 
partition
= 
self
. 
	`partition_list_get_selection
( ) 

2327 
self
. 
	`partman_edit_dialog
( 
devpart
, 
partition
) 

2329 
	}


2329 def 
	$on_partition_list_delete_activate
( 
self
, 
widget
) : 

2330 if not 
self
. 
allowed_change_step
: 

2332 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

2334 
self
. 
	`allow_change_step
( False ) 

2335 
devpart
, 
partition
= 
self
. 
	`partition_list_get_selection
( ) 

2336 
self
. 
dbfilter
. 
	`delete_partition
( 
devpart
) 

2338 
	}


2338 def 
	$on_partition_list_undo_activate
( 
self
, 
widget
) : 

2339 if not 
self
. 
allowed_change_step
: 

2341 if not 
	`isinstance
( 
self
. 
dbfilter
, 
partman
. 
Partman
) : 

2343 
self
. 
	`allow_change_step
( False ) 

2344 
self
. 
dbfilter
. 
	`undo
( ) 

2346 
	}


2346 def 
	$update_partman
( 
self
, 
disk_cache
, 
partition_cache
, 
cache_order
) : 

2347 if 
self
. 
partition_bars
: 

2348 for 
p
in 
self
. 
partition_bars
. 
	`itervalues
( ) : 

2349 
self
. 
segmented_bar_vbox
. 
	`remove
( 
p
) 

2350 del 
p


2352 
partition_tree_model
= 
self
. 
partition_list_treeview
. 
	`get_model
( ) 

2353 if 
partition_tree_model
is None : 

2354 
partition_tree_model
= 
gtk
. 
	`ListStore
( 
gobject
. 
TYPE_STRING
, 

2355 
gobject
. 
TYPE_PYOBJECT
) 

2357 
cell_name
= 
gtk
. 
	`CellRendererText
( ) 

2358 
column_name
= 
gtk
. 
	`TreeViewColumn
( 

2359 
self
. 
	`get_string
( 'partition_column_device' ) , 
cell_name
) 

2360 
column_name
. 
	`set_cell_data_func
( 
cell_name
, 
self
. 
partman_column_name
) 

2361 
column_name
. 
	`set_sizing
( 
gtk
. 
TREE_VIEW_COLUMN_AUTOSIZE
) 

2362 
self
. 
partition_list_treeview
. 
	`append_column
( 
column_name
) 

2364 
cell_type
= 
gtk
. 
	`CellRendererText
( ) 

2365 
column_type
= 
gtk
. 
	`TreeViewColumn
( 

2366 
self
. 
	`get_string
( 'partition_column_type' ) , 
cell_type
) 

2367 
column_type
. 
	`set_cell_data_func
( 
cell_type
, 
self
. 
partman_column_type
) 

2368 
column_type
. 
	`set_sizing
( 
gtk
. 
TREE_VIEW_COLUMN_AUTOSIZE
) 

2369 
self
. 
partition_list_treeview
. 
	`append_column
( 
column_type
) 

2371 
cell_mountpoint
= 
gtk
. 
	`CellRendererText
( ) 

2372 
column_mountpoint
= 
gtk
. 
	`TreeViewColumn
( 

2373 
self
. 
	`get_string
( 'partition_column_mountpoint' ) , 

2374 
cell_mountpoint
) 

2375 
column_mountpoint
. 
	`set_cell_data_func
( 

2376 
cell_mountpoint
, 
self
. 
partman_column_mountpoint
) 

2377 
column_mountpoint
. 
	`set_sizing
( 
gtk
. 
TREE_VIEW_COLUMN_AUTOSIZE
) 

2378 
self
. 
partition_list_treeview
. 
	`append_column
( 
column_mountpoint
) 

2380 
cell_format
= 
gtk
. 
	`CellRendererToggle
( ) 

2381 
column_format
= 
gtk
. 
	`TreeViewColumn
( 

2382 
self
. 
	`get_string
( 'partition_column_format' ) , 
cell_format
) 

2383 
column_format
. 
	`set_cell_data_func
( 

2384 
cell_format
, 
self
. 
partman_column_format
) 

2385 
column_format
. 
	`set_sizing
( 
gtk
. 
TREE_VIEW_COLUMN_AUTOSIZE
) 

2386 
cell_format
. 
	`connect
( "toggled" , 
self
. 
partman_column_format_toggled
, 

2387 
partition_tree_model
) 

2388 
self
. 
partition_list_treeview
. 
	`append_column
( 
column_format
) 

2390 
cell_size
= 
gtk
. 
	`CellRendererText
( ) 

2391 
column_size
= 
gtk
. 
	`TreeViewColumn
( 

2392 
self
. 
	`get_string
( 'partition_column_size' ) , 
cell_size
) 

2393 
column_size
. 
	`set_cell_data_func
( 
cell_size
, 
self
. 
partman_column_size
) 

2394 
column_size
. 
	`set_sizing
( 
gtk
. 
TREE_VIEW_COLUMN_AUTOSIZE
) 

2395 
self
. 
partition_list_treeview
. 
	`append_column
( 
column_size
) 

2397 
cell_used
= 
gtk
. 
	`CellRendererText
( ) 

2398 
column_used
= 
gtk
. 
	`TreeViewColumn
( 

2399 
self
. 
	`get_string
( 'partition_column_used' ) , 
cell_used
) 

2400 
column_used
. 
	`set_cell_data_func
( 
cell_used
, 
self
. 
partman_column_used
) 

2401 
column_used
. 
	`set_sizing
( 
gtk
. 
TREE_VIEW_COLUMN_AUTOSIZE
) 

2402 
self
. 
partition_list_treeview
. 
	`append_column
( 
column_used
) 

2404 
self
. 
partition_list_treeview
. 
	`set_model
( 
partition_tree_model
) 

2406 
selection
= 
self
. 
partition_list_treeview
. 
	`get_selection
( ) 

2407 
selection
. 
	`connect
( 

2408 'changed' , 
self
. 
on_partition_list_treeview_selection_changed
) 

2411 
partition_tree_model
. 
	`clear
( ) 

2413 
partition_bar
= None 

2414 
dev
= '' 

2415 
total_size
= { } 

2416 
i
= 0 

2417 if not 
self
. 
segmented_bar_vbox
: 

2418 
sw
= 
gtk
. 
	`ScrolledWindow
( ) 

2419 
self
. 
segmented_bar_vbox
= 
gtk
. 
	`VBox
( ) 

2420 
sw
. 
	`add_with_viewport
( 
self
. 
segmented_bar_vbox
) 

2421 
sw
. 
child
. 
	`set_shadow_type
( 
gtk
. 
SHADOW_NONE
) 

2422 
sw
. 
	`set_policy
( 
gtk
. 
POLICY_AUTOMATIC
, 
gtk
. 
POLICY_NEVER
) 

2423 
sw
. 
	`show_all
( ) 

2424 
self
. 
part_advanced_vbox
. 
	`pack_start
( 
sw
, 
expand
= False ) 

2425 
self
. 
part_advanced_vbox
. 
	`reorder_child
( 
sw
, 0 ) 

2427 for 
item
in 
cache_order
: 

2428 if 
item
in 
disk_cache
: 

2429 
partition_tree_model
. 
	`append
( [ 
item
, 
disk_cache
[ 
item
] ] ) 

2430 
dev
= 
disk_cache
[ 
item
] [ 'device' ] 

2431 
self
. 
partition_bars
[ 
dev
] = 
segmented_bar
. 
	`SegmentedBar
( ) 

2432 
partition_bar
= 
self
. 
partition_bars
[ 
dev
] 

2433 
self
. 
segmented_bar_vbox
. 
	`add
( 
partition_bar
) 

2434 
total_size
[ 
dev
] = 0.0 

2436 
partition_tree_model
. 
	`append
( [ 
item
, 
partition_cache
[ 
item
] ] ) 

2437 
size
= 
	`int
( 
partition_cache
[ 
item
] [ 'parted' ] [ 'size' ] ) 

2438 
total_size
[ 
dev
] = 
total_size
[ 
dev
] + 
size


2439 
fs
= 
partition_cache
[ 
item
] [ 'parted' ] [ 'fs' ] 

2440 
path
= 
partition_cache
[ 
item
] [ 'parted' ] [ 'path' ] . 
	`replace
( '/dev/' , '' ) 

2441 if 
fs
== 'free' : 

2442 
c
= 
partition_bar
. 
remainder_color


2444 
txt
= 'Free space' 

2446 
i
= ( 
i
+ 1 ) % 
	`len
( 
self
. 
auto_colors
) 

2447 
c
= 
self
. 
auto_colors
[ 
i
] 

2448 
txt
= '%s (%s)' % ( 
path
, 
fs
) 

2449 
partition_bar
. 
	`add_segment_rgb
( 
txt
, 
size
, 
c
) 

2450 
sel
= 
self
. 
partition_list_treeview
. 
	`get_selection
( ) 

2451 if 
sel
. 
	`count_selected_rows
( ) == 0 : 

2452 
sel
. 
	`select_path
( 0 ) 

2454 
self
. 
	`set_current_page
( 
self
. 
steps
. 
	`page_num
( 
self
. 
stepPartAdvanced
) ) 

2456 
	}


2456 def 
	$ma_get_choices
( 
self
) : 

2457 return 
self
. 
ma_choices


2459 
	}


2459 def 
	$ma_cb_toggle
( 
self
, 
cell
, 
path
, 
model
= None ) : 

2460 
iterator
= 
model
. 
	`get_iter
( 
path
) 

2461 
checked
= not 
cell
. 
	`get_active
( ) 

2462 
model
. 
	`set_value
( 
iterator
, 0 , 
checked
) 

2465 if 
model
. 
	`iter_children
( 
iterator
) : 

2466 if not 
cell
. 
	`get_active
( ) : 

2467 
model
. 
	`get_value
( 
iterator
, 1 ) [ 'selected' ] = True 

2469 
model
. 
	`get_value
( 
iterator
, 1 ) [ 'selected' ] = False 

2470 
parent
= 
iterator


2471 
iterator
= 
model
. 
	`iter_children
( 
iterator
) 

2472 
items
= [ ] 

2473 while 
iterator
: 

2474 
model
. 
	`set_value
( 
iterator
, 0 , 
checked
) 

2475 if 
checked
: 

2476 
items
. 
	`append
( 
model
. 
	`get_value
( 
iterator
, 1 ) ) 

2477 
iterator
= 
model
. 
	`iter_next
( 
iterator
) 

2478 
model
. 
	`get_value
( 
parent
, 1 ) [ 'items' ] = 
items


2482 
parent
= 
model
. 
	`iter_parent
( 
iterator
) 

2483 if not 
model
. 
	`get_value
( 
parent
, 0 ) : 

2484 
model
. 
	`set_value
( 
parent
, 0 , True ) 

2485 
model
. 
	`get_value
( 
parent
, 1 ) [ 'selected' ] = True 

2487 
item
= 
model
. 
	`get_value
( 
iterator
, 1 ) 

2488 
items
= 
model
. 
	`get_value
( 
parent
, 1 ) [ 'items' ] 

2489 if 
checked
: 

2490 
items
. 
	`append
( 
item
) 

2492 
items
. 
	`remove
( 
item
) 

2494 
	}


2494 def 
	$ma_set_choices
( 
self
, 
choices
) : 

2496 def 
	$cell_data_func
( 
column
, 
cell
, 
model
, 
iterator
) : 

2497 
val
= 
model
. 
	`get_value
( 
iterator
, 1 ) 

2498 if 
model
. 
	`iter_children
( 
iterator
) : 

2500 
text
= '%s  <small><i>%s (%s)</i></small>' % 

2501 ( 
val
[ 'user' ] , 
val
[ 'os' ] , 
val
[ 'part' ] ) 

2504 
text
= 
model
. 
	`get_value
( 
iterator
, 1 ) 

2507 
cell
. 
	`set_property
( "markup" , 
	`unicode
( 
text
) ) 

2509 
cell
. 
	`set_property
( "text" , '%s  %s (%s)' % 

2510 ( 
val
[ 'user' ] , 
val
[ 'os' ] , 
val
[ 'part' ] ) ) 

2512 
	}


2512 if 
self
. 
matreeview
. 
	`get_model
( ) : 

2513 for 
col
in 
self
. 
matreeview
. 
	`get_columns
( ) : 

2514 
self
. 
matreeview
. 
	`remove_column
( 
col
) 

2517 
self
. 
ma_previous_selection
= None 

2521 if not 
choices
: 

2523 
msg
= 'There were no users or operating systems suitable for ' 

2525 
liststore
= 
gtk
. 
	`ListStore
( 
str
) 

2526 
liststore
. 
	`append
( [ 
msg
] ) 

2527 
self
. 
matreeview
. 
	`set_model
( 
liststore
) 

2528 
column
= 
gtk
. 
	`TreeViewColumn
( 'item' , 
gtk
. 
	`CellRendererText
( ) , 
text
= 0 ) 

2529 
self
. 
matreeview
. 
	`append_column
( 
column
) 

2531 
treestore
= 
gtk
. 
	`TreeStore
( 
bool
, object ) 

2540 for 
choice
in 
choices
: 

2541 
kept
= False 

2542 for 
old_choice
in 
self
. 
ma_choices
: 

2543 if ( 
old_choice
[ 'user' ] == 
choice
[ 'user' ] ) and 

2544 ( 
old_choice
[ 'part' ] == 
choice
[ 'part' ] ) : 

2545 
piter
= 
treestore
. 
	`append
( None , 

2546 [ 
old_choice
[ 'selected' ] , 
choice
] ) 

2547 
choice
[ 'selected' ] = 
old_choice
[ 'selected' ] 

2548 
new_items
= [ ] 

2549 for 
item
in 
choice
[ 'items' ] : 

2550 if 
item
in 
old_choice
[ 'items' ] : 

2551 
treestore
. 
	`append
( 
piter
, [ True , 
item
] ) 

2552 
new_items
. 
	`append
( 
item
) 

2554 
treestore
. 
	`append
( 
piter
, [ False , 
item
] ) 

2555 
choice
[ 'items' ] = 
new_items


2556 
kept
= True 

2558 if 
kept
== False : 

2559 
piter
= 
treestore
. 
	`append
( None , [ False , 
choice
] ) 

2560 for 
item
in 
choice
[ 'items' ] : 

2561 
treestore
. 
	`append
( 
piter
, [ False , 
item
] ) 

2562 
choice
[ 'items' ] = [ ] 

2564 
self
. 
matreeview
. 
	`set_model
( 
treestore
) 

2566 
renderer
= 
gtk
. 
	`CellRendererToggle
( ) 

2567 
renderer
. 
	`connect
( 'toggled' , 
self
. 
ma_cb_toggle
, 
treestore
) 

2568 
column
= 
gtk
. 
	`TreeViewColumn
( 'boolean' , 
renderer
, 
active
= 0 ) 

2569 
column
. 
	`set_clickable
( True ) 

2570 
column
. 
	`set_sizing
( 
gtk
. 
TREE_VIEW_COLUMN_AUTOSIZE
) 

2571 
self
. 
matreeview
. 
	`append_column
( 
column
) 

2573 
renderer
= 
gtk
. 
	`CellRendererText
( ) 

2574 
column
= 
gtk
. 
	`TreeViewColumn
( 'item' , 
renderer
) 

2575 
column
. 
	`set_cell_data_func
( 
renderer
, 
cell_data_func
) 

2576 
self
. 
matreeview
. 
	`append_column
( 
column
) 

2578 
self
. 
matreeview
. 
	`set_search_column
( 1 ) 

2580 
self
. 
matreeview
. 
	`show_all
( ) 

2583 
self
. 
ma_choices
= 
choices


2585 def 
	$set_fullname
( 
self
, 
value
) : 

2586 
self
. 
fullname
. 
	`set_text
( 
value
) 

2588 
	}


2588 def 
	$get_fullname
( 
self
) : 

2589 return 
self
. 
fullname
. 
	`get_text
( ) 

2591 
	}


2591 def 
	$set_username
( 
self
, 
value
) : 

2592 
self
. 
username
. 
	`set_text
( 
value
) 

2594 
	}


2594 def 
	$get_username
( 
self
) : 

2595 return 
self
. 
username
. 
	`get_text
( ) 

2597 
	}


2597 def 
	$get_password
( 
self
) : 

2598 return 
self
. 
password
. 
	`get_text
( ) 

2600 
	}


2600 def 
	$get_verified_password
( 
self
) : 

2601 return 
self
. 
verified_password
. 
	`get_text
( ) 

2603 
	}


2603 def 
	$select_password
( 
self
) : 

2606 if 
self
. 
password
. 
	`get_text_length
( ) : 

2607 
self
. 
password
. 
	`select_region
( 0 , - 1 ) 

2608 
self
. 
password
. 
	`grab_focus
( ) 

2610 
	}


2610 def 
	$set_auto_login
( 
self
, 
value
) : 

2611 
self
. 
login_auto
. 
	`set_active
( 
value
) 

2613 
	}


2613 def 
	$get_auto_login
( 
self
) : 

2614 return 
self
. 
login_auto
. 
	`get_active
( ) 

2616 
	}


2616 def 
	$set_encrypt_home
( 
self
, 
value
) : 

2617 if 
value
: 

2618 
self
. 
login_encrypt
. 
	`show
( ) 

2619 
self
. 
login_encrypt
. 
	`set_active
( 
value
) 

2621 
	}


2621 def 
	$get_encrypt_home
( 
self
) : 

2622 return 
self
. 
login_encrypt
. 
	`get_active
( ) 

2624 
	}


2624 def 
	$username_error
( 
self
, 
msg
) : 

2625 
self
. 
username_error_reason
. 
	`set_text
( 
msg
) 

2626 
self
. 
username_error_box
. 
	`show
( ) 

2628 
	}


2628 def 
	$password_error
( 
self
, 
msg
) : 

2629 
self
. 
password_error_reason
. 
	`set_text
( 
msg
) 

2630 
self
. 
password_error_box
. 
	`show
( ) 

2632 
	}


2632 def 
	$get_hostname
( 
self
) : 

2633 return 
self
. 
hostname
. 
	`get_text
( ) 

2635 
	}


2635 def 
	$set_hostname
( 
self
, 
value
) : 

2636 
self
. 
hostname
. 
	`set_text
( 
value
) 

2638 
	}


2638 def 
	$set_summary_text
( 
self
, 
text
) : 

2639 for 
child
in 
self
. 
ready_text
. 
	`get_children
( ) : 

2640 
self
. 
ready_text
. 
	`remove
( 
child
) 

2642 
ready_buffer
= 
gtk
. 
	`TextBuffer
( ) 

2643 
ready_buffer
. 
	`set_text
( 
text
) 

2644 
self
. 
ready_text
. 
	`set_buffer
( 
ready_buffer
) 

2646 
	}


2646 def 
	$set_grub_combo
( 
self
, 
options
) : 

2647 
self
. 
grub_device_entry
. 
	`clear
( ) 

2648 
l
= 
gtk
. 
	`ListStore
( 
gobject
. 
TYPE_STRING
, 
gobject
. 
TYPE_STRING
) 

2649 
renderer
= 
gtk
. 
	`CellRendererText
( ) 

2650 
self
. 
grub_device_entry
. 
	`pack_start
( 
renderer
, True ) 

2651 
self
. 
grub_device_entry
. 
	`add_attribute
( 
renderer
, 'text' , 0 ) 

2652 
renderer
= 
gtk
. 
	`CellRendererText
( ) 

2653 
self
. 
grub_device_entry
. 
	`pack_start
( 
renderer
, True ) 

2654 
self
. 
grub_device_entry
. 
	`add_attribute
( 
renderer
, 'text' , 1 ) 

2655 for 
opt
in 
options
: 

2656 
l
. 
	`append
( 
opt
) 

2657 
self
. 
grub_device_entry
. 
	`set_model
( 
l
) 

2658 
self
. 
grub_device_entry
. 
	`set_text_column
( 0 ) 

2660 
	}


2660 def 
	$grub_verify_loop
( 
self
, 
widget
) : 

2661 if 
widget
is not None : 

2662 if 
validation
. 
	`check_grub_device
( 
widget
. 
child
. 
	`get_text
( ) ) : 

2663 
self
. 
advanced_okbutton
. 
	`set_sensitive
( True ) 

2665 
self
. 
advanced_okbutton
. 
	`set_sensitive
( False ) 

2667 
	}


2667 def 
	$on_advanced_button_clicked
( 
self
, 
button
) : 

2668 
display
= False 

2669 
grub_en
= 
self
. 
	`get_grub
( ) 

2670 
summary_device
= 
self
. 
	`get_summary_device
( ) 

2672 if 
grub_en
is not None : 

2673 
display
= True 

2674 
self
. 
bootloader_vbox
. 
	`show
( ) 

2675 
self
. 
grub_enable
. 
	`set_active
( 
grub_en
) 

2677 
self
. 
bootloader_vbox
. 
	`hide
( ) 

2678 
summary_device
= None 

2680 if 
summary_device
is not None : 

2681 
display
= True 

2682 
self
. 
grub_device_label
. 
	`show
( ) 

2683 
self
. 
grub_device_entry
. 
	`show
( ) 

2684 
self
. 
grub_device_entry
. 
child
. 
	`set_text
( 
summary_device
) 

2685 
self
. 
grub_device_entry
. 
	`set_sensitive
( 
grub_en
) 

2686 
self
. 
grub_device_label
. 
	`set_sensitive
( 
grub_en
) 

2688 
self
. 
grub_device_label
. 
	`hide
( ) 

2689 
self
. 
grub_device_entry
. 
	`hide
( ) 

2691 if 
self
. 
popcon
is not None : 

2692 
display
= True 

2693 
self
. 
popcon_vbox
. 
	`show
( ) 

2694 
self
. 
popcon_checkbutton
. 
	`set_active
( 
self
. 
popcon
) 

2696 
self
. 
popcon_vbox
. 
	`hide
( ) 

2698 
display
= True 

2699 if 
self
. 
http_proxy_host
: 

2700 
self
. 
proxy_host_entry
. 
	`set_text
( 
self
. 
http_proxy_host
) 

2701 
self
. 
proxy_port_spinbutton
. 
	`set_sensitive
( True ) 

2703 
self
. 
proxy_port_spinbutton
. 
	`set_sensitive
( False ) 

2704 
self
. 
proxy_port_spinbutton
. 
	`set_value
( 
self
. 
http_proxy_port
) 

2708 if not 
display
: 

2711 
response
= 
self
. 
advanced_dialog
. 
	`run
( ) 

2712 
self
. 
advanced_dialog
. 
	`hide
( ) 

2713 if 
response
== 
gtk
. 
RESPONSE_OK
: 

2714 if 
summary_device
is not None : 

2715 
self
. 
	`set_summary_device
( 
self
. 
grub_device_entry
. 
child
. 
	`get_text
( ) ) 

2716 
self
. 
	`set_popcon
( 
self
. 
popcon_checkbutton
. 
	`get_active
( ) ) 

2717 
self
. 
	`set_grub
( 
self
. 
grub_enable
. 
	`get_active
( ) ) 

2718 
self
. 
	`set_proxy_host
( 
self
. 
proxy_host_entry
. 
	`get_text
( ) ) 

2719 
self
. 
	`set_proxy_port
( 
self
. 
proxy_port_spinbutton
. 
	`get_value_as_int
( ) ) 

2722 
	}


2722 def 
	$toggle_grub
( 
self
, 
widget
) : 

2723 if ( 
widget
is not None and 
widget
. 
	`get_name
( ) == 'grub_enable' ) : 

2724 
self
. 
grub_device_entry
. 
	`set_sensitive
( 
widget
. 
	`get_active
( ) ) 

2725 
self
. 
grub_device_label
. 
	`set_sensitive
( 
widget
. 
	`get_active
( ) ) 

2727 
	}


2727 def 
	$on_proxy_host_changed
( 
self
, 
widget
) : 

2728 if 
widget
is not None and 
widget
. 
	`get_name
( ) == 'proxy_host_entry' : 

2729 
text
= 
self
. 
proxy_host_entry
. 
	`get_text
( ) 

2730 
self
. 
proxy_port_spinbutton
. 
	`set_sensitive
( 
text
!= '' ) 

2732 
	}


2732 def 
	$return_to_partitioning
( 
self
) : 

2737 if 
self
. 
installing
and not 
self
. 
installing_no_return
: 

2739 
self
. 
slideshow_frame
. 
	`hide
( ) 

2740 
self
. 
live_installer
. 
	`show
( ) 

2742 
self
. 
pagesindex
= 3 

2743 
self
. 
dbfilter
= 
partman
. 
	`Partman
( 
self
) 

2744 
self
. 
	`set_current_page
( 
self
. 
previous_partitioning_page
) 

2745 
self
. 
next
. 
	`set_label
( "gtk-go-forward" ) 

2746 
self
. 
	`translate_widget
( 
self
. 
next
, 
self
. 
locale
) 

2747 
self
. 
backup
= True 

2748 
self
. 
installing
= False 

2750 
	}


2750 def 
	$error_dialog
( 
self
, 
title
, 
msg
, 
fatal
= True ) : 

2752 
self
. 
	`run_automation_error_cmd
( ) 

2756 
saved_allowed_change_step
= 
self
. 
allowed_change_step


2757 
self
. 
	`allow_change_step
( True ) 

2758 if 
self
. 
current_page
is not None : 

2759 
transient
= 
self
. 
live_installer


2761 
transient
= 
self
. 
debconf_progress_window


2762 if not 
msg
: 

2763 
msg
= 
title


2764 
dialog
= 
gtk
. 
	`MessageDialog
( 
transient
, 
gtk
. 
DIALOG_MODAL
, 

2765 
gtk
. 
MESSAGE_ERROR
, 
gtk
. 
BUTTONS_OK
, 
msg
) 

2766 
dialog
. 
	`set_title
( 
title
) 

2767 
dialog
. 
	`run
( ) 

2768 
self
. 
	`allow_change_step
( 
saved_allowed_change_step
) 

2769 
dialog
. 
	`hide
( ) 

2770 if 
fatal
: 

2771 
self
. 
	`return_to_partitioning
( ) 

2773 
	}


2773 def 
	$question_dialog
( 
self
, 
title
, 
msg
, 
options
, 
use_templates
= True ) : 

2774 
self
. 
	`run_automation_error_cmd
( ) 

2778 
saved_allowed_change_step
= 
self
. 
allowed_change_step


2779 
self
. 
	`allow_change_step
( True ) 

2780 if 
self
. 
current_page
is not None : 

2781 
transient
= 
self
. 
live_installer


2783 
transient
= 
self
. 
debconf_progress_window


2784 if not 
msg
: 

2785 
msg
= 
title


2786 
buttons
= [ ] 

2787 for 
option
in 
options
: 

2788 if 
use_templates
: 

2789 
text
= 
self
. 
	`get_string
( 
option
) 

2791 
text
= 
option


2792 if 
text
is None : 

2793 
text
= 
option


2796 
text
= 
	`str
( 
text
) 

2797 
buttons
. 
	`extend
( ( 
text
, 
	`len
( 
buttons
) / 2 + 1 ) ) 

2798 
dialog
= 
gtk
. 
	`Dialog
( 
title
, 
transient
, 
gtk
. 
DIALOG_MODAL
, 
	`tuple
( 
buttons
) ) 

2799 
vbox
= 
gtk
. 
	`VBox
( ) 

2800 
vbox
. 
	`set_border_width
( 5 ) 

2801 
label
= 
gtk
. 
	`Label
( 
msg
) 

2802 
label
. 
	`set_line_wrap
( True ) 

2803 
label
. 
	`set_selectable
( True ) 

2804 
vbox
. 
	`pack_start
( 
label
) 

2805 
vbox
. 
	`show_all
( ) 

2806 
dialog
. 
vbox
. 
	`pack_start
( 
vbox
) 

2807 
response
= 
dialog
. 
	`run
( ) 

2808 
self
. 
	`allow_change_step
( 
saved_allowed_change_step
) 

2809 
dialog
. 
	`hide
( ) 

2810 if 
response
< 0 : 

2814 return 
options
[ 
response
- 1 ] 

2817 
	}


2817 def 
	$refresh
( 
self
) : 

2818 while 
gtk
. 
	`events_pending
( ) : 

2819 
gtk
. 
	`main_iteration
( ) 

2823 
	}


2823 def 
	$run_main_loop
( 
self
) : 

2824 
self
. 
	`allow_change_step
( True ) 

2825 
gtk
. 
	`main
( ) 

2829 
	}


2829 def 
	$quit_main_loop
( 
self
) : 

2830 if 
gtk
. 
	`main_level
( ) > 0 : 

2831 
gtk
. 
	`main_quit
( ) 

2838 
	}


2838 
NORMAL_RGBA
= 0xc070a0ffL 

2839 
HOVER_RGBA
= 0xffff60ffL 

2840 
SELECTED_1_RGBA
= 0xff60e0ffL 

2841 
SELECTED_2_RGBA
= 0x000000ffL 

2843 class 
	cTimezoneMap
( object ) : 

2844 def 
	$__init__
( 
self
, 
frontend
) : 

2845 
self
. 
frontend
= 
frontend


2846 
self
. 
tzdb
= 
ubiquity
. 
tz
. 
	`Database
( ) 

2847 
self
. 
tzmap
= 
ubiquity
. 
emap
. 
	`EMap
( ) 

2848 
self
. 
update_timeout
= None 

2849 
self
. 
point_selected
= None 

2850 
self
. 
point_hover
= None 

2851 
self
. 
location_selected
= None 

2853 
self
. 
tzmap
. 
	`set_smooth_zoom
( False ) 

2854 
zoom_in_file
= 
os
. 
path
. 
	`join
( 
PATH
, 'pixmaps' , 'zoom-in.png' ) 

2855 if 
os
. 
path
. 
	`exists
( 
zoom_in_file
) : 

2856 
display
= 
self
. 
frontend
. 
live_installer
. 
	`get_display
( ) 

2857 
pixbuf
= 
gtk
. 
gdk
. 
	`pixbuf_new_from_file
( 
zoom_in_file
) 

2858 
self
. 
cursor_zoom_in
= 
gtk
. 
gdk
. 
	`Cursor
( 
display
, 
pixbuf
, 10 , 10 ) 

2860 
self
. 
cursor_zoom_in
= None 

2862 
self
. 
tzmap
. 
	`add_events
( 
gtk
. 
gdk
. 
LEAVE_NOTIFY_MASK
| 

2863 
gtk
. 
gdk
. 
VISIBILITY_NOTIFY_MASK
) 

2865 
self
. 
frontend
. 
timezone_map_window
. 
	`add
( 
self
. 
tzmap
) 

2867 
timezone_city_combo
= 
self
. 
frontend
. 
timezone_city_combo


2869 
renderer
= 
gtk
. 
	`CellRendererText
( ) 

2870 
timezone_city_combo
. 
	`pack_start
( 
renderer
, True ) 

2871 
timezone_city_combo
. 
	`add_attribute
( 
renderer
, 'text' , 0 ) 

2872 
list_store
= 
gtk
. 
	`ListStore
( 
gobject
. 
TYPE_STRING
, 
gobject
. 
TYPE_STRING
) 

2873 
timezone_city_combo
. 
	`set_model
( 
list_store
) 

2875 
prev_continent
= '' 

2876 for 
location
in 
self
. 
tzdb
. 
locations
: 

2877 
self
. 
tzmap
. 
	`add_point
( "" , 
location
. 
longitude
, 
location
. 
latitude
, 

2878 
NORMAL_RGBA
) 

2879 
zone_bits
= 
location
. 
zone
. 
	`split
( '/' ) 

2880 if 
	`len
( 
zone_bits
) == 1 : 

2882 
continent
= 
zone_bits
[ 0 ] 

2883 if 
continent
!= 
prev_continent
: 

2884 
list_store
. 
	`append
( [ '' , None ] ) 

2885 
list_store
. 
	`append
( [ "--- %s ---" % 
continent
, None ] ) 

2886 
prev_continent
= 
continent


2887 
human_zone
= '/' . 
	`join
( 
zone_bits
[ 1 : ] ) . 
	`replace
( '_' , ' ' ) 

2888 
list_store
. 
	`append
( [ 
human_zone
, 
location
. 
zone
] ) 

2890 
self
. 
tzmap
. 
	`connect
( "map-event" , 
self
. 
mapped
) 

2891 
self
. 
tzmap
. 
	`connect
( "unmap-event" , 
self
. 
unmapped
) 

2892 
self
. 
tzmap
. 
	`connect
( "motion-notify-event" , 
self
. 
motion
) 

2893 
self
. 
tzmap
. 
	`connect
( "button-press-event" , 
self
. 
button_pressed
) 

2894 
self
. 
tzmap
. 
	`connect
( "leave-notify-event" , 
self
. 
out_map
) 

2896 
timezone_city_combo
. 
	`connect
( "changed" , 
self
. 
city_changed
) 

2898 
	}


2898 def 
	$set_city_text
( 
self
, 
name
) : 

2899 
model
= 
self
. 
frontend
. 
timezone_city_combo
. 
	`get_model
( ) 

2900 
iterator
= 
model
. 
	`get_iter_first
( ) 

2901 while 
iterator
is not None : 

2902 
location
= 
model
. 
	`get_value
( 
iterator
, 1 ) 

2903 if 
location
== 
name
: 

2904 
self
. 
frontend
. 
timezone_city_combo
. 
	`set_active_iter
( 
iterator
) 

2906 
iterator
= 
model
. 
	`iter_next
( 
iterator
) 

2908 
	}


2908 def 
	$set_zone_text
( 
self
, 
location
) : 

2909 
offset
= 
location
. 
utc_offset


2910 if 
offset
>= 
datetime
. 
	`timedelta
( 0 ) : 

2911 
minuteoffset
= 
	`int
( 
offset
. 
seconds
/ 60 ) 

2913 
minuteoffset
= 
	`int
( 
offset
. 
seconds
/ 60 - 1440 ) 

2914 if 
location
. 
zone_letters
== 'GMT' : 

2915 
text
= 
location
. 
zone_letters


2917 
text
= "%s (GMT%+d:%02d)" % ( 
location
. 
zone_letters
, 

2918 
minuteoffset
/ 60 , 
minuteoffset
% 60 ) 

2919 
self
. 
frontend
. 
timezone_zone_text
. 
	`set_text
( 
text
) 

2920 
translations
= 
gettext
. 
	`translation
( 'iso_3166' , 

2921 
languages
= [ 
self
. 
frontend
. 
locale
] , 

2922 
fallback
= True ) 

2923 
self
. 
frontend
. 
timezone_country_text
. 
	`set_text
( 

2924 
translations
. 
	`ugettext
( 
location
. 
human_country
) ) 

2925 
self
. 
	`update_current_time
( ) 

2927 
	}


2927 def 
	$update_current_time
( 
self
) : 

2928 if 
self
. 
location_selected
is not None : 

2930 
now
= 
datetime
. 
datetime
. 
	`now
( 
self
. 
location_selected
. 
info
) 

2931 
self
. 
frontend
. 
timezone_time_text
. 
	`set_text
( 
now
. 
	`strftime
( '%X' ) ) 

2932 except 
ValueError
: 

2935 
self
. 
frontend
. 
timezone_time_text
. 
	`set_text
( '<clock error>' ) 

2937 
	}


2937 def 
	$set_tz_from_name
( 
self
, 
name
) : 

2938 ( 
longitude
, 
latitude
) = ( 0.0 , 0.0 ) 

2940 for 
location
in 
self
. 
tzdb
. 
locations
: 

2941 if 
location
. 
zone
== 
name
: 

2942 ( 
longitude
, 
latitude
) = ( 
location
. 
longitude
, 
location
. 
latitude
) 

2947 if 
self
. 
point_selected
is not None : 

2948 
self
. 
tzmap
. 
	`point_set_color_rgba
( 
self
. 
point_selected
, 
NORMAL_RGBA
) 

2950 
self
. 
point_selected
= 
self
. 
tzmap
. 
	`get_closest_point
( 
longitude
, 
latitude
, 

2953 
self
. 
location_selected
= 
location


2954 
self
. 
	`set_city_text
( 
self
. 
location_selected
. 
zone
) 

2955 
self
. 
	`set_zone_text
( 
self
. 
location_selected
) 

2956 
self
. 
frontend
. 
	`allow_go_forward
( True ) 

2958 
	}


2958 def 
	$city_changed
( 
self
, 
widget
) : 

2959 
iterator
= 
widget
. 
	`get_active_iter
( ) 

2960 if 
iterator
is not None : 

2961 
model
= 
widget
. 
	`get_model
( ) 

2962 
location
= 
model
. 
	`get_value
( 
iterator
, 1 ) 

2963 if 
location
is not None : 

2964 
self
. 
	`set_tz_from_name
( 
location
) 

2966 
	}


2966 def 
	$get_selected_tz_name
( 
self
) : 

2967 if 
self
. 
location_selected
is not None : 

2968 return 
self
. 
location_selected
. 
zone


2972 
	}


2972 def 
	$location_from_point
( 
self
, 
point
) : 

2973 if 
point
is None : 

2976 ( 
longitude
, 
latitude
) = 
point
. 
	`get_location
( ) 

2978 
best_location
= None 

2979 
best_distance
= None 

2980 for 
location
in 
self
. 
tzdb
. 
locations
: 

2981 if ( 
	`abs
( 
location
. 
longitude
- 
longitude
) <= 1.0 and 

2982 
	`abs
( 
location
. 
latitude
- 
latitude
) <= 1.0 ) : 

2983 
distance
= ( ( 
location
. 
longitude
- 
longitude
) ** 2 + 

2984 ( 
location
. 
latitude
- 
latitude
) ** 2 ) ** 0.5 

2985 if 
best_distance
is None or 
distance
< 
best_distance
: 

2986 
best_location
= 
location


2987 
best_distance
= 
distance


2989 return 
best_location


2991 
	}


2991 def 
	$timeout
( 
self
) : 

2992 
self
. 
	`update_current_time
( ) 

2994 if 
self
. 
point_selected
is None : 

2997 if 
self
. 
point_selected
. 
	`get_color_rgba
( ) == 
SELECTED_1_RGBA
: 

2998 
self
. 
tzmap
. 
	`point_set_color_rgba
( 
self
. 
point_selected
, 

2999 
SELECTED_2_RGBA
) 

3001 
self
. 
tzmap
. 
	`point_set_color_rgba
( 
self
. 
point_selected
, 

3002 
SELECTED_1_RGBA
) 

3006 
	}


3006 def 
	$mapped
( 
self
, 
widget
, 
event
) : 

3007 if 
self
. 
update_timeout
is None : 

3008 
self
. 
update_timeout
= 
gobject
. 
	`timeout_add
( 100 , 
self
. 
timeout
) 

3010 
	}


3010 def 
	$unmapped
( 
self
, 
widget
, 
event
) : 

3011 if 
self
. 
update_timeout
is not None : 

3012 
gobject
. 
	`source_remove
( 
self
. 
update_timeout
) 

3013 
self
. 
update_timeout
= None 

3015 
	}


3015 def 
	$motion
( 
self
, 
widget
, 
event
) : 

3016 if 
self
. 
tzmap
. 
	`get_magnification
( ) <= 1.0 : 

3017 if 
self
. 
cursor_zoom_in
is not None : 

3018 
self
. 
frontend
. 
live_installer
. 
window
. 
	`set_cursor
( 

3019 
self
. 
cursor_zoom_in
) 

3021 
self
. 
frontend
. 
live_installer
. 
window
. 
	`set_cursor
( None ) 

3023 ( 
longitude
, 
latitude
) = 
self
. 
tzmap
. 
	`window_to_world
( 
event
. 
x
, 

3024 
event
. 
y
) 

3026 if ( 
self
. 
point_hover
is not None and 

3027 
self
. 
point_hover
!= 
self
. 
point_selected
) : 

3028 
self
. 
tzmap
. 
	`point_set_color_rgba
( 
self
. 
point_hover
, 
NORMAL_RGBA
) 

3030 
self
. 
point_hover
= 
self
. 
tzmap
. 
	`get_closest_point
( 
longitude
, 

3031 
latitude
, True ) 

3033 if 
self
. 
point_hover
!= 
self
. 
point_selected
: 

3034 
self
. 
tzmap
. 
	`point_set_color_rgba
( 
self
. 
point_hover
, 
HOVER_RGBA
) 

3038 
	}


3038 def 
	$out_map
( 
self
, 
widget
, 
event
) : 

3039 if 
event
. 
mode
!= 
gtk
. 
gdk
. 
CROSSING_NORMAL
: 

3042 if ( 
self
. 
point_hover
is not None and 

3043 
self
. 
point_hover
!= 
self
. 
point_selected
) : 

3044 
self
. 
tzmap
. 
	`point_set_color_rgba
( 
self
. 
point_hover
, 
NORMAL_RGBA
) 

3046 
self
. 
point_hover
= None 

3048 
self
. 
frontend
. 
live_installer
. 
window
. 
	`set_cursor
( None ) 

3052 
	}


3052 def 
	$button_pressed
( 
self
, 
widget
, 
event
) : 

3053 ( 
longitude
, 
latitude
) = 
self
. 
tzmap
. 
	`window_to_world
( 
event
. 
x
, 
event
. 
y
) 

3055 if 
event
. 
button
!= 1 : 

3056 
self
. 
tzmap
. 
	`zoom_out
( ) 

3057 if 
self
. 
cursor_zoom_in
is not None : 

3058 
self
. 
frontend
. 
live_installer
. 
window
. 
	`set_cursor
( 

3059 
self
. 
cursor_zoom_in
) 

3060 elif 
self
. 
tzmap
. 
	`get_magnification
( ) <= 1.0 : 

3061 
self
. 
tzmap
. 
	`zoom_to_location
( 
longitude
, 
latitude
) 

3062 if 
self
. 
cursor_zoom_in
is not None : 

3063 
self
. 
frontend
. 
live_installer
. 
window
. 
	`set_cursor
( None ) 

3065 if 
self
. 
point_selected
is not None : 

3066 
self
. 
tzmap
. 
	`point_set_color_rgba
( 
self
. 
point_selected
, 

3067 
NORMAL_RGBA
) 

3068 
self
. 
point_selected
= 
self
. 
point_hover


3070 
new_location_selected
= 

3071 
self
. 
	`location_from_point
( 
self
. 
point_selected
) 

3072 if 
new_location_selected
is not None : 

3073 
old_city
= 
self
. 
	`get_selected_tz_name
( ) 

3074 if 
old_city
is None or 
old_city
!= 
new_location_selected
. 
zone
: 

3075 
self
. 
	`set_city_text
( 
new_location_selected
. 
zone
) 

3076 
self
. 
	`set_zone_text
( 
new_location_selected
) 

3077 
self
. 
location_selected
= 
new_location_selected


3078 
self
. 
frontend
. 
	`allow_go_forward
( 
self
. 
location_selected
is not None ) 

3082 
	}


3082 

	@ubiquity/frontend/__init__.py

3 
__all__
= [ 'base' , 'gtk_ui' , 'kde_ui' , 'noninteractive' , 'mythbuntu_ui' ] 

	@ubiquity/frontend/noninteractive.py

27 import 
	~<syslog


29 import 
	~<gobject


31 import 
	~<getpass


32 import 
	~<os


33 import 
	~<sys


34 import 
	~<signal


36 from 
ubiquity
import 
	~<filteredcommand
, 
	~<i18n


37 from 
ubiquity
. 
misc
import * 

38 from 
ubiquity
. 
components
import 
	~<console_setup
, 
	~<language
, 
	~<timezone
, 
	~<usersetup
, 

39 
partman
, 
partman_commit
, 

40 
summary
, 
install
, 
migrationassistant


41 import 
	~<ubiquity
. 
	~<progressposition


42 from 
ubiquity
. 
frontend
. 
base
import 
	~<BaseFrontend


43 import 
	~<debconf


45 class 
	cWizard
( 
BaseFrontend
) : 

47 def 
	$__init__
( 
self
, 
distro
) : 

48 
BaseFrontend
. 
	`__init__
( 
self
, 
distro
) 

50 
self
. 
installing
= False 

51 
self
. 
progress_position
= 
ubiquity
. 
progressposition
. 
	`ProgressPosition
( ) 

52 
self
. 
fullname
= '' 

53 
self
. 
username
= '' 

54 
self
. 
password
= '' 

55 
self
. 
verifiedpassword
= '' 

56 
self
. 
progress_val
= 0 

57 
self
. 
progress_info
= '' 

58 
self
. 
auto_login
= False 

59 
self
. 
encrypt_home
= False 

60 
self
. 
mainloop
= 
gobject
. 
	`MainLoop
( ) 

62 
dbfilter
= 
language
. 
	`Language
( 
self
, 
self
. 
	`debconf_communicator
( ) ) 

63 
dbfilter
. 
	`cleanup
( ) 

64 
dbfilter
. 
db
. 
	`shutdown
( ) 

66 if 
self
. 
oem_config
: 

67 
	`execute_root
( 'apt-install' , 'oem-config-gtk' ) 

69 
	}


69 def 
	$run
( 
self
) : 

73 if 
os
. 
	`getuid
( ) != 0 : 

76 
sys
. 
	`exit
( 1 ) 

78 if 'UBIQUITY_MIGRATION_ASSISTANT' in 
os
. 
environ
: 

79 
pages
= [ 
language
. 
Language
, 
timezone
. 
Timezone
, 

80 
console_setup
. 
ConsoleSetup
, 
partman
. 
Partman
, 

81 
migrationassistant
. 
MigrationAssistant
, 
usersetup
. 
UserSetup
, 

82 
summary
. 
Summary
] 

84 
pages
= [ 
language
. 
Language
, 
timezone
. 
Timezone
, 

85 
console_setup
. 
ConsoleSetup
, 
partman
. 
Partman
, 

86 
usersetup
. 
UserSetup
, 
summary
. 
Summary
] 

88 for 
x
in 
pages
: 

89 
self
. 
dbfilter
= 
	`x
( 
self
) 

90 
self
. 
dbfilter
. 
	`start
( 
auto_process
= True ) 

91 
self
. 
mainloop
. 
	`run
( ) 

92 if 
self
. 
dbfilter_status
: 

93 
sys
. 
	`exit
( 1 ) 

95 
self
. 
installing
= True 

96 
self
. 
	`progress_loop
( ) 

98 
	}


98 def 
	$progress_loop
( 
self
) : 

101 
dbfilter
= 
partman_commit
. 
	`PartmanCommit
( 
self
) 

102 if 
dbfilter
. 
	`run_command
( 
auto_process
= True ) != 0 : 

106 
dbfilter
= 
install
. 
	`Install
( 
self
) 

107 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

108 if 
ret
!= 0 : 

109 if 
ret
== 3 : 

111 
sys
. 
	`exit
( 
ret
) 

112 elif ( 
os
. 
	`WIFSIGNALED
( 
ret
) and 

113 
os
. 
	`WTERMSIG
( 
ret
) in ( 
signal
. 
SIGINT
, 
signal
. 
SIGKILL
, 

114 
signal
. 
SIGTERM
) ) : 

115 
sys
. 
	`exit
( 
ret
) 

116 elif 
os
. 
path
. 
	`exists
( '/var/lib/ubiquity/install.trace' ) : 

117 
tbfile
= 
	`open
( '/var/lib/ubiquity/install.trace' ) 

118 
realtb
= 
tbfile
. 
	`read
( ) 

119 
tbfile
. 
	`close
( ) 

120 raise 
RuntimeError
, ( "Install failed with exit code %s\n%s" % 

121 ( 
ret
, 
realtb
) ) 

123 
self
. 
	`run_success_cmd
( ) 

125 if 
self
. 
	`get_reboot
( ) : 

126 
	`execute
( "reboot" ) 

128 
	}


128 def 
	$watch_debconf_fd
( 
self
, 
from_debconf
, 
process_input
) : 

138 
gobject
. 
	`io_add_watch
( 
from_debconf
, 

139 
gobject
. 
IO_IN
| 
gobject
. 
IO_ERR
| 
gobject
. 
IO_HUP
, 

140 
self
. 
watch_debconf_fd_helper
, 
process_input
) 

143 
	}


143 def 
	$watch_debconf_fd_helper
( 
self
, 
source
, 
cb_condition
, 
callback
) : 

144 
debconf_condition
= 0 

145 if ( 
cb_condition
& 
gobject
. 
IO_IN
) != 0 : 

146 
debconf_condition
|= 
filteredcommand
. 
DEBCONF_IO_IN


147 if ( 
cb_condition
& 
gobject
. 
IO_ERR
) != 0 : 

148 
debconf_condition
|= 
filteredcommand
. 
DEBCONF_IO_ERR


149 if ( 
cb_condition
& 
gobject
. 
IO_HUP
) != 0 : 

150 
debconf_condition
|= 
filteredcommand
. 
DEBCONF_IO_HUP


152 return 
	`callback
( 
source
, 
debconf_condition
) 

154 
	}


154 def 
	$debconffilter_done
( 
self
, 
dbfilter
) : 

155 if 
BaseFrontend
. 
	`debconffilter_done
( 
self
, 
dbfilter
) : 

156 if 
self
. 
mainloop
. 
	`is_running
( ) : 

157 
self
. 
mainloop
. 
	`quit
( ) 

162 
	}


162 def 
	$refresh
( 
self
) : 

166 
	}


166 def 
	$run_main_loop
( 
self
) : 

168 if 
self
. 
dbfilter
is not None : 

169 
self
. 
dbfilter
. 
	`ok_handler
( ) 

170 elif 
self
. 
mainloop
. 
	`is_running
( ) : 

171 
self
. 
mainloop
. 
	`quit
( ) 

173 
self
. 
mainloop
. 
	`run
( ) 

175 
	}


175 def 
	$quit_main_loop
( 
self
) : 

177 if not 
self
. 
dbfilter
and 
self
. 
mainloop
. 
	`is_running
( ) : 

178 
self
. 
mainloop
. 
	`quit
( ) 

180 
	}


180 def 
	$set_page
( 
self
, 
page
) : 

187 
	}


187 def 
	$debconf_progress_start
( 
self
, 
progress_min
, 
progress_max
, 

188 
progress_title
) : 

192 
	}


192 def 
	$debconf_progress_set
( 
self
, 
progress_val
) : 

194 
self
. 
progress_val
= 
progress_val


195 print '%d%%: %s' % ( 
self
. 
progress_val
, 
self
. 
progress_info
) 

198 
	}


198 def 
	$debconf_progress_step
( 
self
, 
progress_inc
) : 

202 
	}


202 def 
	$debconf_progress_info
( 
self
, 
progress_info
) : 

204 
self
. 
progress_info
= 
progress_info


205 print '%d%%: %s' % ( 
self
. 
progress_val
, 
self
. 
progress_info
) 

208 
	}


208 def 
	$debconf_progress_stop
( 
self
) : 

212 
	}


212 def 
	$debconf_progress_region
( 
self
, 
region_start
, 
region_end
) : 

216 
	}


216 def 
	$debconf_progress_cancellable
( 
self
, 
cancellable
) : 

225 
	}


225 def 
	$set_language_choices
( 
self
, 
choices
, 
choice_map
) : 

228 
self
. 
language_choice_map
= 
	`dict
( 
choice_map
) 

230 
	}


230 def 
	$set_language
( 
self
, 
language
) : 

232 
self
. 
language
= 
language


234 
	}


234 def 
	$get_language
( 
self
) : 

236 return 
self
. 
language


240 
	}


240 def 
	$set_timezone
( 
self
, 
timezone
) : 

242 
self
. 
timezone
= 
timezone


244 
	}


244 def 
	$get_timezone
( 
self
) : 

246 return 
self
. 
timezone


250 
	}


250 def 
	$set_keyboard_choices
( 
self
, 
choices
) : 

254 
	}


254 def 
	$set_keyboard
( 
self
, 
layout
) : 

256 
self
. 
current_layout
= 
layout


258 
	}


258 def 
	$get_keyboard
( 
self
) : 

260 return 
self
. 
current_layout


262 
	}


262 def 
	$set_keyboard_variant_choices
( 
self
, 
choices
) : 

266 
	}


266 def 
	$set_keyboard_variant
( 
self
, 
variant
) : 

268 
self
. 
keyboard_variant
= 
variant


270 
	}


270 def 
	$get_keyboard_variant
( 
self
) : 

272 return 
self
. 
keyboard_variant


276 
	}


276 def 
	$set_disk_layout
( 
self
, 
layout
) : 

279 
	}


279 def 
	$set_autopartition_choices
( 
self
, 
choices
, 
extra_options
, 

280 
resize_choice
, 
manual_choice
, 

281 
biggest_free_choice
) : 

283 
BaseFrontend
. 
	`set_autopartition_choices
( 
self
, 
choices
, 
extra_options
, 

284 
resize_choice
, 
manual_choice
, 
biggest_free_choice
) 

286 
	}


286 def 
	$get_autopartition_choice
( 
self
) : 

292 
	}


292 def 
	$return_to_partitioning
( 
self
) : 

295 
sys
. 
	`exit
( 1 ) 

300 
	}


300 def 
	$allow_go_forward
( 
self
, 
allow
) : 

303 
	}


303 def 
	$ma_set_choices
( 
self
, 
choices
) : 

305 
self
. 
ma_choices
= 
choices


307 
	}


307 def 
	$ma_get_choices
( 
self
) : 

309 return ( 
self
. 
ma_choices
, { } ) 

311 
	}


311 def 
	$ma_user_error
( 
self
, 
error
, 
user
) : 

313 print '\nError: %s: %s' % ( 
user
, 
error
) 

315 
	}


315 def 
	$ma_password_error
( 
self
, 
error
, 
user
) : 

317 print '\nError: %s: %s' % ( 
user
, 
error
) 

321 
	}


321 def 
	$set_fullname
( 
self
, 
value
) : 

323 
self
. 
fullname
= 
value


325 
	}


325 def 
	$get_fullname
( 
self
) : 

327 if 
self
. 
oem_config
: 

329 return 
self
. 
fullname


331 
	}


331 def 
	$set_username
( 
self
, 
value
) : 

333 
self
. 
username
= 
value


335 
	}


335 def 
	$get_username
( 
self
) : 

337 if 
self
. 
oem_config
: 

339 return 
self
. 
username


341 
	}


341 def 
	$get_password
( 
self
) : 

343 return 
self
. 
dbfilter
. 
db
. 
	`get
( 'passwd/user-password' ) #self.password 

345 
	}


345 def 
	$get_verified_password
( 
self
) : 

347 return 
self
. 
dbfilter
. 
db
. 
	`get
( 'passwd/user-password-again' ) #self.verifiedpassword 

349 
	}


349 def 
	$set_auto_login
( 
self
, 
value
) : 

350 
self
. 
auto_login
= 
value


352 
	}


352 def 
	$get_auto_login
( 
self
) : 

353 return 
self
. 
auto_login


355 
	}


355 def 
	$set_encrypt_home
( 
self
, 
value
) : 

356 
self
. 
encrypt_home
= 
value


358 
	}


358 def 
	$get_encrypt_home
( 
self
) : 

359 return 
self
. 
encrypt_home


361 
	}


361 def 
	$username_error
( 
self
, 
msg
) : 

363 print '\nusername error: %s' % 
msg


364 
self
. 
username
= 
	`raw_input
( 'Username: ' ) 

366 
	}


366 def 
	$password_error
( 
self
, 
msg
) : 

368 print '\nBad password: %s' % 
msg


369 
self
. 
password
= 
getpass
. 
	`getpass
( 'Password: ' ) 

370 
self
. 
verifiedpassword
= 
getpass
. 
	`getpass
( 'Password again: ' ) 

374 
	}


374 def 
	$get_hostname
( 
self
) : 

382 
	}


382 def 
	$set_summary_text
( 
self
, 
text
) : 

386 
	}


386 def 
	$set_summary_device
( 
self
, 
device
) : 

388 if 
device
is not None : 

389 if not 
device
. 
	`startswith
( '(' ) and not 
device
. 
	`startswith
( '/dev/' ) : 

390 
device
= '/dev/%s' % 
device


391 
self
. 
summary_device
= 
device


394 
	}


394 def 
	$get_grub
( 
self
) : 

399 
	}


399 def 
	$get_summary_device
( 
self
) : 

401 return 
self
. 
summary_device


403 
	}


403 def 
	$set_popcon
( 
self
, 
participate
) : 

405 
self
. 
popcon
= 
participate


408 
	}


408 def 
	$get_popcon
( 
self
) : 

410 return 
self
. 
popcon


414 
	}


414 def 
	$error_dialog
( 
self
, 
title
, 
msg
, 
fatal
= True ) : 

416 print '\n%s: %s' % ( 
title
, 
msg
) 

418 
	}


418 def 
	$question_dialog
( 
self
, 
title
, 
msg
, 
options
, 
use_templates
= True ) : 

420 
self
. 
	`_abstract
( 'question_dialog' ) 

420 
	}


	@ubiquity/frontend/kde_components/PartitionModel.py
	@ubiquity/frontend/kde_components/__init__.py

3 
__all__
= [ 'Timezone' , 'PartitionBar' , 'PartitionModel' ] 

	@ubiquity/frontend/kde_components/Timezone.py

3 from 
PyQt4
. 
QtGui
import * 

4 from 
PyQt4
. 
QtCore
import * 

6 import 
	~<datetime


7 import 
	~<ubiquity
. 
	~<tz


8 import 
	~<math


11 class 
	cCity
: 

12 def 
	$__init__
( 
self
, 
cName
, 
zName
, 
lat
, 
lng
, 
raw_zone
) : 

13 
self
. 
city_name
= 
cName


14 
self
. 
zone_name
= 
zName


15 
self
. 
lat
= 
lat


16 
self
. 
long
= 
lng


17 
self
. 
pixmap
= None 

19 
self
. 
raw_zone
= 
raw_zone


21 
self
. 
index
= 0 

23 
	}


23 class 
	cTimezoneMap
( 
QWidget
) : 

24 def 
	$__init__
( 
self
, 
frontend
) : 

25 
QWidget
. 
	`__init__
( 
self
, 
frontend
. 
userinterface
. 
map_frame
) 

26 
self
. 
frontend
= 
frontend


28 
self
. 
zones
= { } 

30 
self
. 
selected_city
= None 

32 
self
. 
cities
= { } 

33 
self
. 
	`setObjectName
( "timezone_map" ) 

36 
self
. 
imagePath
= "/usr/share/ubiquity/pixmaps/timezone" 

37 
self
. 
pixmap
= 
	`QPixmap
( "%s/bg.png" % 
self
. 
imagePath
) 

40 
self
. 
timer
= 
	`QTimer
( 
self
) 

41 
QApplication
. 
	`instance
( ) . 
	`connect
( 
self
. 
timer
, 
	`SIGNAL
( "timeout()" ) , 
self
. 
update
) 

42 
self
. 
timer
. 
	`start
( 1000 ) 

45 
zones
= [ '0.0' , '1.0' , '2.0' , '3.0' , '3.5' , '4.0' , '4.5' , '5.0' , '5.75' , '6.0' , 

50 
zonePixmaps
= { } 

52 for 
zone
in 
zones
: 

54 
zonePixmaps
[ 
zone
] = 
	`QPixmap
( '%s/timezone_%s.png' % ( 
self
. 
imagePath
, 
zone
) ) ; 

57 
tzdb
= 
ubiquity
. 
tz
. 
	`Database
( ) 

58 for 
location
in 
tzdb
. 
locations
: 

59 
zone_bits
= 
location
. 
zone
. 
	`split
( '/' ) 

61 if 
	`len
( 
zone_bits
) == 1 : 

64 
zoneName
= 
zone_bits
[ 0 ] 

67 
cityName
= '/' . 
	`join
( 
zone_bits
[ 1 : ] ) . 
	`replace
( '_' , ' ' ) 

70 
zoneHour
= ( 
location
. 
raw_utc_offset
. 
seconds
) / 3600.0 + 
location
. 
raw_utc_offset
. 
days
* 24 

73 if 
zoneHour
> 13.0 : 

74 
zoneHour
-= 24.0 

77 if not 
self
. 
zones
. 
	`has_key
( 
zoneName
) : 

78 
self
. 
zones
[ 
zoneName
] = { 'cities' : [ ] , 'cindex' : 0 } 

81 
city
= 
	`City
( 
cityName
, 
zoneName
, 
location
. 
latitude
, 
location
. 
longitude
, 
location
. 
zone
) 

84 
zoneS
= 
	`str
( 
zoneHour
) 

87 if not 
zonePixmaps
. 
	`has_key
( 
zoneS
) : 

88 if 
zonePixmaps
. 
	`has_key
( 
	`str
( 
zoneHour
+ .25 ) ) : 

89 
zoneS
= 
	`str
( 
zoneHour
+ .25 ) 

90 elif 
zonePixmaps
. 
	`has_key
( 
	`str
( 
zoneHour
+ .25 ) ) : 

91 
zoneS
= 
	`str
( 
zoneHour
- .25 ) 

92 elif 
zonePixmaps
. 
	`has_key
( 
	`str
( 
zoneHour
+ .5 ) ) : 

93 
zoneS
= 
	`str
( 
zoneHour
+ .5 ) 

94 elif 
zonePixmaps
. 
	`has_key
( 
	`str
( 
zoneHour
- .5 ) ) : 

95 
zoneS
= 
	`str
( 
zoneHour
- .5 ) 

98 
zoneS
= None 

100 if 
zoneS
: 

101 
city
. 
pixmap
= 
zonePixmaps
[ 
zoneS
] 

103 
self
. 
cities
[ 
location
. 
zone
] = 
city


106 
city
. 
index
= 
	`len
( 
self
. 
zones
[ 
zoneName
] [ 'cities' ] ) 

107 
self
. 
zones
[ 
zoneName
] [ 'cities' ] . 
	`append
( 
city
) 

109 
QApplication
. 
	`instance
( ) . 
	`connect
( 
self
. 
frontend
. 
userinterface
. 
timezone_zone_combo
, 

110 
	`SIGNAL
( "currentIndexChanged(QString)" ) , 
self
. 
regionChanged
) 

111 
QApplication
. 
	`instance
( ) . 
	`connect
( 
self
. 
frontend
. 
userinterface
. 
timezone_city_combo
, 

112 
	`SIGNAL
( "currentIndexChanged(int)" ) , 
self
. 
cityChanged
) 

115 
keys
= 
self
. 
zones
. 
	`keys
( ) 

116 
keys
. 
	`sort
( ) 

117 for 
z
in 
keys
: 

118 
self
. 
zones
[ 
z
] [ 'cindex' ] = 
self
. 
frontend
. 
userinterface
. 
timezone_zone_combo
. 
	`count
( ) 

119 
self
. 
frontend
. 
userinterface
. 
timezone_zone_combo
. 
	`addItem
( 
z
) 

122 
	}


122 def 
	$regionChanged
( 
self
, 
region
) : 

123 
self
. 
frontend
. 
userinterface
. 
timezone_city_combo
. 
	`clear
( ) 

125 
self
. 
frontend
. 
userinterface
. 
timezone_city_combo
. 
	`addItem
( "" ) 

128 for 
c
in 
self
. 
zones
[ 
	`str
( 
region
) ] [ 'cities' ] : 

129 
self
. 
frontend
. 
userinterface
. 
timezone_city_combo
. 
	`addItem
( 
c
. 
city_name
, 
	`QVariant
( 
c
) ) 

132 
	}


132 def 
	$cityChanged
( 
self
, 
cityindex
) : 

133 if 
cityindex
< 1 : 

136 
city
= 
self
. 
frontend
. 
userinterface
. 
timezone_city_combo
. 
	`itemData
( 
cityindex
) . 
	`toPyObject
( ) 

137 
self
. 
selected_city
= 
city


138 
self
. 
	`repaint
( ) 

141 
	}


141 def 
	$longitudeToX
( 
self
, 
longitude
) : 

145 
x
= ( 
longitude
* ( 
math
. 
pi
/ 180 ) ) + 
math
. 
pi
# 0 ... 2pi 

147 
x
= 
x
/ ( 2 * 
math
. 
pi
) 

148 
x
= 
x
* 
self
. 
	`width
( ) 

151 
x
= 
x
- ( 
self
. 
	`width
( ) * 0.039073402 ) 

152 return 
x


154 
	}


154 def 
	$latitudeToY
( 
self
, 
latitude
) : 

157 
y
= 1.25 * 
math
. 
	`log
( 
math
. 
	`tan
( ( 0.25 * 
math
. 
pi
) + 

158 ( 0.4 * ( 
latitude
* ( 
math
. 
pi
/ 180 ) ) ) ) ) 

160 
y
= 
	`abs
( 
y
- 2.30341254338 ) # 0 ... 4.606825 

161 
y
= 
y
/ 4.6068250867599998 

164 
y
= 
y
* ( 
self
. 
	`height
( ) * 1.2 ) 

165 return 
y


167 
	}


167 def 
	$paintEvent
( 
self
, 
paintEvent
) : 

168 
painter
= 
	`QPainter
( 
self
) 

169 
painter
. 
	`drawPixmap
( 
self
. 
	`rect
( ) , 
self
. 
pixmap
) 

171 if 
self
. 
selected_city
!= None : 

172 
c
= 
self
. 
selected_city


173 
cpos
= 
self
. 
	`getPosition
( 
c
. 
lat
, 
c
. 
long
) 

175 if ( 
c
. 
pixmap
) : 

176 
painter
. 
	`drawPixmap
( 
self
. 
	`rect
( ) , 
c
. 
pixmap
) 

178 
painter
. 
	`drawLine
( 
cpos
+ 
	`QPoint
( 1 , 1 ) , 
cpos
- 
	`QPoint
( 1 , 1 ) ) 

179 
painter
. 
	`drawLine
( 
cpos
+ 
	`QPoint
( 1 , - 1 ) , 
cpos
- 
	`QPoint
( 1 , - 1 ) ) 

184 
now
= 
datetime
. 
datetime
. 
	`now
( 
ubiquity
. 
tz
. 
	`SystemTzInfo
( 
c
. 
raw_zone
) ) 

185 
timestring
= 
now
. 
	`strftime
( '%X' ) 

187 
text_offset
= 
	`QPoint
( 2 , - 2 ) 

190 
text_size
= 
painter
. 
	`fontMetrics
( ) . 
	`size
( 
Qt
. 
TextSingleLine
, 
timestring
) 

191 if 
cpos
. 
	`x
( ) + 
text_size
. 
	`width
( ) > 
self
. 
	`width
( ) : 

192 
text_offset
. 
	`setX
( - 
text_size
. 
	`width
( ) - 2 ) 

193 if 
cpos
. 
	`y
( ) - 
text_size
. 
	`height
( ) < 0 : 

194 
text_offset
. 
	`setY
( 
text_size
. 
	`height
( ) - 2 ) 

196 
painter
. 
	`drawText
( 
cpos
+ 
text_offset
, 
timestring
) 

197 except 
ValueError
: 

213 
	}


213 def 
	$getPosition
( 
self
, 
la
, 
lo
) : 

217 
xdeg_offset
= - 6 

220 
x
= ( 
self
. 
	`width
( ) * ( 180.0 + 
lo
) / 360.0 ) + ( 
self
. 
	`width
( ) * 
xdeg_offset
/ 180.0 ) 

221 
x
= 
x
% 
self
. 
	`width
( ) 

224 
topLat
= 81 

225 
bottomLat
= - 59 

228 
topPer
= 
topLat
/ 180.0 

229 
totalPer
= ( 
topLat
- 
bottomLat
) / 180.0 

232 
y
= 1.25 * 
math
. 
	`log
( 
math
. 
	`tan
( 
math
. 
pi
/ 4.0 + 0.4 * 
math
. 
	`radians
( 
la
) ) ) 

235 
fullRange
= 4.6068250867599998 

237 
topOffset
= 
fullRange
* 
topPer


238 
mapRange
= 
	`abs
( 1.25 * 
math
. 
	`log
( 
math
. 
	`tan
( 
math
. 
pi
/ 4.0 + 0.4 * 
math
. 
	`radians
( 
bottomLat
) ) ) - 
topOffset
) 

241 
y
= 
	`abs
( 
y
- 
topOffset
) 

242 
y
= 
y
/ 
mapRange


245 
y
= 
y
* 
self
. 
	`height
( ) 

247 return 
	`QPoint
( 
	`int
( 
x
) , 
	`int
( 
y
) ) 

249 
	}


249 def 
	$mouseReleaseEvent
( 
self
, 
mouseEvent
) : 

250 
selected_zone
= - 1 

252 
pos
= 
mouseEvent
. 
	`pos
( ) 

254 
x
= 
	`int
( 
pos
. 
	`x
( ) * 
self
. 
pixmap
. 
	`width
( ) / 
self
. 
	`width
( ) ) 

255 
y
= 
	`int
( 
pos
. 
	`y
( ) * 
self
. 
pixmap
. 
	`height
( ) / 
self
. 
	`height
( ) ) 

258 
closest
= None 

259 
bestdist
= 0 

260 for 
z
in 
self
. 
zones
. 
	`values
( ) : 

261 for 
c
in 
z
[ 'cities' ] : 

262 
np
= 
pos
- 
self
. 
	`getPosition
( 
c
. 
lat
, 
c
. 
long
) 

263 
dist
= 
np
. 
	`x
( ) * 
np
. 
	`x
( ) + 
np
. 
	`y
( ) * 
np
. 
	`y
( ) 

264 if ( 
dist
< 
bestdist
or 
closest
== None ) : 

265 
closest
= 
c


266 
bestdist
= 
dist


271 if 
closest
!= None : 

272 
cindex
= 
self
. 
zones
[ 
closest
. 
zone_name
] [ 'cindex' ] 

273 
self
. 
frontend
. 
userinterface
. 
timezone_zone_combo
. 
	`setCurrentIndex
( 
cindex
) 

274 
self
. 
frontend
. 
userinterface
. 
timezone_city_combo
. 
	`setCurrentIndex
( 
closest
. 
index
+ 1 ) 

277 
	}


277 def 
	$set_timezone
( 
self
, 
name
) : 

278 
self
. 
	`_set_timezone
( 
self
. 
cities
[ 
name
] ) 

281 
	}


281 def 
	$_set_timezone
( 
self
, 
city
) : 

282 
cindex
= 
self
. 
zones
[ 
city
. 
zone_name
] [ 'cindex' ] 

283 
self
. 
frontend
. 
userinterface
. 
timezone_zone_combo
. 
	`setCurrentIndex
( 
cindex
) 

284 
self
. 
frontend
. 
userinterface
. 
timezone_city_combo
. 
	`setCurrentIndex
( 
city
. 
index
+ 1 ) 

287 
	}


287 def 
	$get_timezone
( 
self
) : 

288 if 
self
. 
selected_city
== None : 

291 return 
self
. 
selected_city
. 
raw_zone


291 
	}


	@ubiquity/frontend/kde_components/PartitionBar.py

26 import 
	~<sys


28 from 
PyQt4
. 
QtCore
import * 

29 from 
PyQt4
. 
QtGui
import * 

31 from 
ubiquity
. 
misc
import 
	~<format_size


33 class 
	cPartition
: 

36 
filesystemColours
= { 'auto' : '#509DE8' , 

45 def 
	$__init__
( 
self
, 
size
, 
index
, 
fs
, 
path
) : 

46 
self
. 
size
= 
size


47 
self
. 
fs
= 
fs


48 
self
. 
path
= 
path


49 
self
. 
index
= 
index


50 
self
. 
next
= None 

51 
self
. 
name
= None 

53 
	}


53 class 
	cPartitionsBar
( 
QWidget
) : 

54 
InfoColor
= '#333333' 

57 def 
	$__init__
( 
self
, 
parent
= None ) : 

58 
QWidget
. 
	`__init__
( 
self
, 
parent
) 

59 
self
. 
partitions
= [ ] 

60 
self
. 
bar_height
= 28 #should be a multiple of 2 

61 
self
. 
diskSize
= 0 

62 
self
. 
radius
= 4 

63 
self
. 
	`setMinimumHeight
( 
self
. 
bar_height
* 2 + 30 ) 

64 
self
. 
	`setMinimumWidth
( 500 ) 

65 
sizePolicy
= 
self
. 
	`sizePolicy
( ) 

66 
sizePolicy
. 
	`setVerticalStretch
( 10 ) 

67 
sizePolicy
. 
	`setVerticalPolicy
( 
QSizePolicy
. 
Fixed
) 

68 
self
. 
	`setSizePolicy
( 
sizePolicy
) 

70 
self
. 
resize_loc
= 0 

71 
self
. 
resizing
= False 

72 
self
. 
resize_part
= None 

74 
	}


74 def 
	$paintEvent
( 
self
, 
qPaintEvent
) : 

75 
painter
= 
	`QPainter
( 
self
) ; 

77 
h
= 
self
. 
bar_height


78 
h_2
= 
self
. 
bar_height
/ 2 

79 
effective_width
= 
self
. 
	`width
( ) - 1 

81 
path
= 
	`QPainterPath
( ) 

82 
path
. 
	`addRoundedRect
( 2 , 2 , 
self
. 
	`width
( ) - 4 , 
h
- 4 , 
self
. 
radius
, 
self
. 
radius
) 

84 
part_offset
= 0 

85 
label_offset
= 0 

86 
trunc_pix
= 0 

87 
resize_handle_x
= None 

88 for 
p
in 
self
. 
partitions
: 

89 
painter
. 
	`setRenderHint
( 
QPainter
. 
Antialiasing
, True ) 

92 
trunc_pix
+= ( 
effective_width
* 
	`float
( 
p
. 
size
) / 
self
. 
diskSize
) 

93 
pix_size
= 
	`int
( 
	`round
( 
trunc_pix
) ) 

94 
trunc_pix
-= 
pix_size


97 if 
Partition
. 
filesystemColours
. 
	`has_key
( 
p
. 
fs
) : 

98 
pColor
= 
	`QColor
( 
Partition
. 
filesystemColours
[ 
p
. 
fs
] ) 

100 
pColor
= 
	`QColor
( 
Partition
. 
filesystemColours
[ 'free' ] ) 

102 
pal
= 
	`QPalette
( 
pColor
) 

106 
dark
= 
pal
. 
	`color
( 
QPalette
. 
Dark
) 

107 
mid
= 
pColor
. 
	`darker
( 125 ) 

108 
midl
= 
mid
. 
	`lighter
( 125 ) 

111 
grad
= 
	`QLinearGradient
( 
	`QPointF
( 0 , 0 ) , 
	`QPointF
( 0 , 
h
) ) 

113 if 
p
. 
fs
== "free" : 

114 
grad
. 
	`setColorAt
( .25 , 
mid
) ; 

115 
grad
. 
	`setColorAt
( 1 , 
midl
) ; 

117 
grad
. 
	`setColorAt
( 0 , 
midl
) ; 

118 
grad
. 
	`setColorAt
( .75 , 
mid
) ; 

120 
painter
. 
	`setPen
( 
Qt
. 
NoPen
) 

121 
painter
. 
	`setBrush
( 
	`QBrush
( 
grad
) ) 

122 
painter
. 
	`setClipRect
( 
part_offset
, 0 , 
pix_size
, 
h
* 2 ) 

123 
painter
. 
	`drawPath
( 
path
) 

125 if 
part_offset
> 0 : 

126 
painter
. 
	`setPen
( 
dark
) 

127 
painter
. 
	`drawLine
( 
part_offset
, 3 , 
part_offset
, 
h
- 3 ) 

129 
painter
. 
	`setClipping
( False ) 

131 
draw_labels
= True 

132 if 
draw_labels
: 

134 
painter
. 
	`setPen
( 
Qt
. 
black
) 

137 
name
= 
p
. 
name


138 if 
name
== None : 

139 if 
p
. 
fs
== 'free' : 

140 
name
= 'free space' 

141 elif 
p
. 
fs
== 'swap' : 

142 
name
= 'swap' 

144 
name
= 
p
. 
path


147 
labelY
= 
h
+ 8 

149 
texts
= [ ] 

150 
texts
. 
	`append
( 
name
) 

151 
texts
. 
	`append
( "%.01f%%" % ( 
	`float
( 
p
. 
size
) / 
self
. 
diskSize
* 100 ) ) 

152 
texts
. 
	`append
( "%s" % 
	`format_size
( 
p
. 
size
) ) 

154 
nameFont
= 
	`QFont
( "arial" , 10 ) 

155 
infoFont
= 
	`QFont
( "arial" , 8 ) 

157 
painter
. 
	`setFont
( 
nameFont
) 

158 
v_off
= 0 

159 
width
= 0 

160 for 
text
in 
texts
: 

161 
textSize
= 
painter
. 
	`fontMetrics
( ) . 
	`size
( 
Qt
. 
TextSingleLine
, 
text
) 

162 
painter
. 
	`drawText
( 
label_offset
+ 20 , 
labelY
+ 
v_off
+ 
textSize
. 
	`height
( ) / 2 , 
text
) 

163 
v_off
+= 
textSize
. 
	`height
( ) 

164 
painter
. 
	`setFont
( 
infoFont
) 

165 
painter
. 
	`setPen
( 
	`QColor
( 
PartitionsBar
. 
InfoColor
) ) 

166 
width
= 
	`max
( 
width
, 
textSize
. 
	`width
( ) ) 

169 
painter
. 
	`setRenderHint
( 
QPainter
. 
Antialiasing
, True ) 

170 
painter
. 
	`setPen
( 
Qt
. 
NoPen
) 

171 
painter
. 
	`setBrush
( 
pal
. 
	`color
( 
QPalette
. 
Shadow
) ) 

172 
labelRectShadow
= 
	`QPainterPath
( ) 

173 
labelRectShadow
. 
	`addRoundedRect
( 
label_offset
+ 1 , 
labelY
- 2 + 1 , 13 , 13 , 4 , 4 ) 

174 
painter
. 
	`drawPath
( 
labelRectShadow
) 

176 
painter
. 
	`setBrush
( 
mid
) 

177 
labelRect
= 
	`QPainterPath
( ) 

178 
labelRect
. 
	`addRoundedRect
( 
label_offset
, 
labelY
- 2 , 13 , 13 , 4 , 4 ) 

179 
painter
. 
	`drawPath
( 
labelRect
) 

181 
label_offset
+= 
width
+ 40 

184 if 
self
. 
resize_part
and 
p
== 
self
. 
resize_part
. 
next
: 

185 
resize_handle_x
= 
part_offset


188 
part_offset
+= 
pix_size


197 
pp
= 
	`QPainterPath
( ) 

198 
pp
. 
	`moveTo
( 2 , 
h
) 

199 
pp
. 
	`lineTo
( 2 , 4 ) 

200 
pp
. 
	`lineTo
( 4 , 2 ) 

201 
pp
. 
	`lineTo
( 
self
. 
	`width
( ) - 4 , 2 ) 

202 
pp
. 
	`lineTo
( 
self
. 
	`width
( ) - 2 , 4 ) 

203 
pp
. 
	`lineTo
( 
self
. 
	`width
( ) - 2 , 
h
) 

205 
painter
. 
	`setClipPath
( 
path
) 

207 
painter
. 
	`setRenderHint
( 
QPainter
. 
Antialiasing
, True ) 

209 
pp
= 
	`QPainterPath
( ) 

210 
pp
. 
	`addRoundedRect
( 2 , 2 , 
self
. 
	`width
( ) - 4 , 
h
+ 5 , 4 , 4 ) 

212 
pp2
= 
	`QPainterPath
( ) 

213 
pp2
. 
	`addRoundedRect
( 3 , 3 , 
self
. 
	`width
( ) - 6 , 
h
- 4 , 4 , 4 ) 

215 
pp3
= 
	`QPainterPath
( ) 

216 
pp3
. 
	`addRoundedRect
( 4 , 4 , 
self
. 
	`width
( ) - 8 , 
h
- 6 , 3 , 3 ) 

218 
c
= 
	`QColor
( 
Qt
. 
black
) 

219 
c
. 
	`setAlphaF
( .4 ) 

221 
pen
= 
	`QPen
( 
c
) 

222 
pen
. 
	`setWidth
( 2 ) 

223 
painter
. 
	`setPen
( 
pen
) 

224 
painter
. 
	`setBrush
( 
Qt
. 
NoBrush
) 

226 
painter
. 
	`drawPath
( 
pp
) 

228 
c
. 
	`setAlphaF
( .25 ) 

229 
pen
. 
	`setColor
( 
c
) 

230 
painter
. 
	`setPen
( 
pen
) 

231 
painter
. 
	`drawPath
( 
pp2
) 

233 
c
. 
	`setAlphaF
( .1 ) 

234 
pen
. 
	`setColor
( 
c
) 

235 
painter
. 
	`setPen
( 
pen
) 

236 
painter
. 
	`drawPath
( 
pp3
) 

238 
painter
. 
	`setClipPath
( 
path
) 

240 if 
self
. 
resize_part
and 
resize_handle_x
: 

242 
part
= 
self
. 
resize_part


243 
xloc
= 
resize_handle_x


244 
self
. 
resize_loc
= 
xloc


245 
side
= 1 

246 
arr_dist
= 5 

248 
painter
. 
	`setPen
( 
Qt
. 
NoPen
) 

249 
painter
. 
	`setBrush
( 
Qt
. 
black
) 

251 
painter
. 
	`setRenderHint
( 
QPainter
. 
Antialiasing
, True ) 

253 
arrow_offsets
= ( 

254 ( 0 , 
h
/ 2 - 1 ) , 

255 ( 4 , 
h
/ 2 - 1 ) , 

256 ( 4 , 
h
/ 2 - 3 ) , 

257 ( 8 , 
h
/ 2 ) , 

258 ( 4 , 
h
/ 2 + 3 ) , 

259 ( 4 , 
h
/ 2 + 1 ) , 

260 ( 0 , 
h
/ 2 + 1 ) 

263 
p1
= 
arrow_offsets
[ 0 ] 

264 if 
part
. 
size
> 
part
. 
minsize
: 

265 
arrow
= 
	`QPainterPath
( 
	`QPointF
( 
xloc
+ - 1 * 
p1
[ 0 ] , 
p1
[ 1 ] ) ) 

266 for 
p
in 
arrow_offsets
: 

267 
arrow
. 
	`lineTo
( 
xloc
+ - 1 * 
p
[ 0 ] + 1 , 
p
[ 1 ] ) 

268 
painter
. 
	`drawPath
( 
arrow
) 

270 if 
part
. 
size
< 
part
. 
maxsize
: 

271 
arrow
= 
	`QPainterPath
( 
	`QPointF
( 
xloc
+ 
p1
[ 0 ] , 
p1
[ 1 ] ) ) 

272 for 
p
in 
arrow_offsets
: 

273 
arrow
. 
	`lineTo
( 
xloc
+ 
p
[ 0 ] , 
p
[ 1 ] ) 

274 
painter
. 
	`drawPath
( 
arrow
) 

276 
painter
. 
	`setRenderHint
( 
QPainter
. 
Antialiasing
, False ) 

277 
painter
. 
	`setPen
( 
Qt
. 
black
) 

278 
painter
. 
	`drawLine
( 
xloc
, 0 , 
xloc
, 
h
) 

280 
	}


280 def 
	$addPartition
( 
self
, 
name
, 
size
, 
index
, 
fs
, 
path
) : 

281 
partition
= 
	`Partition
( 
size
, 
index
, 
fs
, 
path
) 

282 
self
. 
diskSize
+= 
size


285 if 
	`len
( 
self
. 
partitions
) > 0 : 

286 
last
= 
self
. 
partitions
[ 
	`len
( 
self
. 
partitions
) - 1 ] 

287 
last
. 
next
= 
partition


289 
self
. 
partitions
. 
	`append
( 
partition
) 

291 
	}


291 def 
	$setResizePartition
( 
self
, 
path
, 
minsize
, 
maxsize
, 
origsize
, 
new_label
) : 

292 
part
= None 

293 
index
= 0 

294 for 
p
in 
self
. 
partitions
: 

295 if 
p
. 
path
== 
path
: 

296 
part
= 
p


298 
index
+= 1 

300 if not 
part
: 

303 
new_size
= 
maxsize


304 
part
. 
size
= 
new_size


305 
part
. 
minsize
= 
minsize


306 
part
. 
maxsize
= 
maxsize


307 
part
. 
origsize
= 
origsize


308 
self
. 
resize_part
= 
part


310 if 
part
. 
next
== None or 
part
. 
next
. 
index
!= - 1 : 

312 
p
= 
	`Partition
( 
origsize
- 
new_size
, 0 , 'auto' , 'Kubuntu' ) 

313 
p
. 
next
= 
part
. 
next


314 
part
. 
next
= 
p


317 
self
. 
partitions
. 
	`insert
( 
index
+ 1 , 
p
) 

321 
part
. 
next
. 
size
+= 
origsize
- 
part
. 
size


324 
self
. 
	`setMouseTracking
( True ) 

327 
	}


327 def 
	$resizePartSize
( ) : 

329 assert 
self
. 
resize_part
!= None , "No resize partition defined" 

330 return 
self
. 
resize_part
. 
size


332 
	}


332 def 
	$mousePressEvent
( 
self
, 
qMouseEvent
) : 

333 if 
self
. 
resize_part
: 

335 if 
	`abs
( 
qMouseEvent
. 
	`x
( ) - 
self
. 
resize_loc
) < 3 : 

336 
self
. 
resizing
= True 

338 
	}


338 def 
	$mouseMoveEvent
( 
self
, 
qMouseEvent
) : 

339 if 
self
. 
resizing
: 

340 
start
= 0 

341 for 
p
in 
self
. 
partitions
: 

342 if 
p
== 
self
. 
resize_part
: 

344 
start
+= 
p
. 
size


346 
ew
= 
self
. 
	`width
( ) - 1 

347 
bpp
= 
self
. 
diskSize
/ 
	`float
( 
ew
) 

350 
mx
= 
qMouseEvent
. 
	`x
( ) * 
bpp
- 
start


353 if 
mx
< 
self
. 
resize_part
. 
minsize
: 

354 
mx
= 
self
. 
resize_part
. 
minsize


355 elif 
mx
> 
self
. 
resize_part
. 
maxsize
: 

356 
mx
= 
self
. 
resize_part
. 
maxsize


359 
span
= 
self
. 
resize_part
. 
origsize


360 
percent
= 
mx
/ 
	`float
( 
span
) 

361 
oldsize
= 
self
. 
resize_part
. 
size


362 
self
. 
resize_part
. 
size
= 
	`int
( 
	`round
( 
span
* 
percent
) ) 

363 
self
. 
resize_part
. 
next
. 
size
-= 
self
. 
resize_part
. 
size
- 
oldsize


367 
t
= 0 

368 for 
p
in 
self
. 
partitions
: 

369 
t
= 
t
+ 
p
. 
size


370 assert 
t
== 
self
. 
diskSize


373 
self
. 
	`emit
( 
	`SIGNAL
( "partitionResized(PyQt_PyObject, PyQt_PyObject)" ) , 

374 
self
. 
resize_part
. 
path
, 
self
. 
resize_part
. 
size
) 

377 
self
. 
	`update
( ) 

379 if 
self
. 
resize_part
: 

380 if 
	`abs
( 
qMouseEvent
. 
	`x
( ) - 
self
. 
resize_loc
) < 3 : 

381 
self
. 
	`setCursor
( 
Qt
. 
SplitHCursor
) 

382 elif 
self
. 
cursor
!= 
Qt
. 
ArrowCursor
: 

383 
self
. 
	`setCursor
( 
Qt
. 
ArrowCursor
) 

385 
	}


385 def 
	$mouseReleaseEvent
( 
self
, 
qMouseEvent
) : 

386 
self
. 
resizing
= False 

388 
	}


388 if 
__name__
== "__main__" : 

389 
app
= 
	`QApplication
( 
sys
. 
argv
) 

390 
QApplication
. 
	`setStyle
( "Oxygen" ) 

392 
wid
= 
	`QWidget
( ) 

393 
layout
= 
	`QVBoxLayout
( 
wid
) 

395 
partBar
= 
	`PartitionsBar
( 
wid
) 

396 
layout
. 
	`addWidget
( 
partBar
) 

409 
partBar
. 
	`addPartition
( '' , 57511125504 , 1 , 'ext4' , '/dev/sdb1' ) 

410 
partBar
. 
	`addPartition
( '' , 2500452864 , 5 , 'linux-swap' , '/dev/sdb5' ) 

411 
partBar
. 
	`setResizePartition
( '/dev/sdb1' , 230989824 , 55143440896 , 57511125504 , 'Kubuntu' ) 

413 
wid
. 
	`show
( ) 

415 
sys
. 
	`exit
( 
app
. 
	`exec_
( ) ) 

	@ubiquity/wrap_label.py

33 import 
	~<gobject


34 import 
	~<pygtk


35 import 
	~<gtk


36 import 
	~<pango


38 class 
	cWrapLabel
( 
gtk
. 
Label
) : 

39 
__gtype_name__
= 'WrapLabel' 

40 def 
	$__init__
( 
self
, 
text
= '' ) : 

41 
gtk
. 
Label
. 
	`__init__
( 
self
) 

42 
self
. 
m_wrap_width
= 0 

44 
self
. 
	`get_layout
( ) . 
	`set_wrap
( 
pango
. 
WRAP_WORD_CHAR
) 

45 
self
. 
	`set_alignment
( 0.0 , 0.0 ) 

46 
self
. 
	`set_markup
( 
text
) 

47 
self
. 
	`connect
( 'size-request' , 
self
. 
on_size_request
) 

48 
self
. 
	`connect
( 'size-allocate' , 
self
. 
on_size_allocate
) 

50 
	}


50 def 
	$set_text
( 
self
, 
text
) : 

51 
gtk
. 
Label
. 
	`set_text
( 
self
, 
text
) 

52 
self
. 
	`set_wrap_width
( 
self
. 
m_wrap_width
) 

54 
	}


54 def 
	$set_markup
( 
self
, 
text
) : 

55 
gtk
. 
Label
. 
	`set_markup
( 
self
, 
text
) 

56 
self
. 
	`set_wrap_width
( 
self
. 
m_wrap_width
) 

58 
	}


58 def 
	$on_size_request
( 
self
, 
widget
, 
requisition
) : 

59 
width
, 
height
= 
self
. 
	`get_layout
( ) . 
	`get_pixel_size
( ) 

60 
requisition
. 
width
= 0 

61 
requisition
. 
height
= 
height


63 
	}


63 def 
	$on_size_allocate
( 
self
, 
widget
, 
allocation
) : 

64 
gtk
. 
Label
. 
	`size_allocate
( 
self
, 
allocation
) 

65 
self
. 
	`set_wrap_width
( 
allocation
. 
width
) 

67 
	}


67 def 
	$set_wrap_width
( 
self
, 
width
) : 

68 if 
width
== 0 : 

71 
self
. 
	`get_layout
( ) . 
	`set_width
( 
width
* 
pango
. 
SCALE
) 

72 if 
self
. 
m_wrap_width
!= 
width
: 

73 
self
. 
m_wrap_width
= 
width


74 
self
. 
	`queue_resize
( ) 

76 
	}


76 
gobject
. 
	`type_register
( 
WrapLabel
) 

78 if 
__name__
== '__main__' : 

79 
w
= 
gtk
. 
	`Window
( 
gtk
. 
WINDOW_TOPLEVEL
) 

80 
l
= 
	`WrapLabel
( "This is a very long label that should span many lines. " 

86 
w
. 
	`add
( 
l
) 

87 
w
. 
	`show_all
( ) 

88 
gtk
. 
	`main
( ) 

	@ubiquity/debconffilter.py

20 import 
	~<sys


21 import 
	~<os


22 import 
	~<fcntl


23 import 
	~<signal


24 import 
	~<errno


25 import 
	~<subprocess


26 import 
	~<re


28 import 
	~<debconf


30 from 
ubiquity
import 
	~<misc


58 
valid_commands
= { 

85 class 
	cDebconfFilter
: 

86 def 
	$__init__
( 
self
, 
db
, 
widgets
= { } ) : 

87 
self
. 
db
= 
db


88 
self
. 
widgets
= 
widgets


89 if 'DEBCONF_DEBUG' in 
os
. 
environ
: 

90 
self
. 
debug_re
= 
re
. 
	`compile
( 
os
. 
environ
[ 'DEBCONF_DEBUG' ] ) 

92 
self
. 
debug_re
= None 

93 
self
. 
escaping
= False 

94 
self
. 
progress_cancel
= False 

95 
self
. 
progress_bars
= [ ] 

96 
self
. 
toread
= '' 

97 
self
. 
toreadpos
= 0 

98 
self
. 
towrite
= '' 

99 
self
. 
towritepos
= 0 

101 
	}


101 def 
	$debug
( 
self
, 
key
, * 
args
) : 

102 if 
self
. 
debug_re
is not None and 
self
. 
debug_re
. 
	`search
( 
key
) : 

103 import 
	~<time


105 
time_str
= 
time
. 
	`ctime
( ) [ 4 : 19 ] 

106 print >> 
sys
. 
stderr
, "%s debconf (%s): %s" % ( 
time_str
, 
key
, 

107 ' ' . 
	`join
( 
args
) ) 

111 
	}


111 def 
	$tryreadline
( 
self
) : 

113 
newlinepos
= 
self
. 
toread
. 
	`find
( '\n' , 
self
. 
toreadpos
) 

114 if 
newlinepos
!= - 1 : 

115 
ret
= 
self
. 
toread
[ 
self
. 
toreadpos
: 
newlinepos
+ 1 ] 

116 
self
. 
toreadpos
= 
newlinepos
+ 1 

117 if 
self
. 
toreadpos
>= 
	`len
( 
self
. 
toread
) : 

118 
self
. 
toread
= '' 

119 
self
. 
toreadpos
= 0 

120 return 
ret


123 
text
= 
os
. 
	`read
( 
self
. 
subout_fd
, 512 ) 

124 if 
text
== '' : 

125 
ret
= 
self
. 
toread


126 
self
. 
toread
= '' 

127 
self
. 
toreadpos
= 0 

128 return 
ret


129 
self
. 
toread
+= 
text


130 except 
OSError
, ( 
err
, 
_
) : 

131 if 
err
== 
errno
. 
EAGAIN
or 
err
== 
errno
. 
EWOULDBLOCK
: 

136 
	}


136 def 
	$reply
( 
self
, 
code
, 
text
= '' , 
log
= False ) : 

137 if 
self
. 
escaping
and 
code
== 0 : 

138 
text
= 
text
. 
	`replace
( '\\' , '\\\\' ) . 
	`replace
( '\n' , '\\n' ) 

139 
code
= 1 

140 
ret
= '%d %s' % ( 
code
, 
text
) 

141 if 
log
: 

142 
self
. 
	`debug
( 'filter' , '-->' , 
ret
) 

143 
self
. 
subin
. 
	`write
( '%s\n' % 
ret
) 

144 
self
. 
subin
. 
	`flush
( ) 

146 
	}


146 def 
	$find_widgets
( 
self
, 
questions
, 
method
= None ) : 

147 
found
= 
	`set
( ) 

148 for 
pattern
in 
self
. 
widgets
. 
	`keys
( ) : 

149 
widget
= 
self
. 
widgets
[ 
pattern
] 

150 if 
widget
not in 
found
: 

151 for 
question
in 
questions
: 

152 
matches
= False 

153 if 
pattern
. 
	`startswith
( 'type:' ) and '/' in 
question
: 

155 
qtype
= 
self
. 
db
. 
	`metaget
( 
question
, 'Type' ) 

156 if 
qtype
== 
pattern
[ 5 : ] : 

157 
matches
= True 

158 except 
debconf
. 
DebconfError
: 

160 elif 
re
. 
	`search
( 
pattern
, 
question
) : 

161 
matches
= True 

162 if 
matches
: 

163 if 
method
is None or 
	`hasattr
( 
widget
, 
method
) : 

164 
found
. 
	`add
( 
widget
) 

166 return 
	`list
( 
found
) 

168 
	}


168 def 
	$start
( 
self
, 
command
, 
blocking
= True , 
extra_env
= { } ) : 

169 def 
	$subprocess_setup
( ) : 

170 
os
. 
environ
[ 'DEBIAN_HAS_FRONTEND' ] = '1' 

171 if 'DEBCONF_USE_CDEBCONF' in 
os
. 
environ
: 

174 
os
. 
	`dup2
( 2 , 5 ) 

176 
os
. 
environ
[ 'PERL_DL_NONLAZY' ] = '1' 

177 
os
. 
environ
[ 'HOME' ] = '/root' 

178 
os
. 
environ
[ 'LC_COLLATE' ] = 'C' 

179 for 
key
, 
value
in 
extra_env
. 
	`iteritems
( ) : 

180 
os
. 
environ
[ 
key
] = 
value


184 
signal
. 
	`signal
( 
signal
. 
SIGPIPE
, 
signal
. 
SIG_DFL
) 

186 
misc
. 
	`regain_privileges
( ) 

188 
	}


188 
self
. 
subp
= 
subprocess
. 
	`Popen
( 

189 
command
, 
stdin
= 
subprocess
. 
PIPE
, 
stdout
= 
subprocess
. 
PIPE
, 

190 
preexec_fn
= 
subprocess_setup
) 

191 
self
. 
subin
= 
self
. 
subp
. 
stdin


192 
self
. 
subout
= 
self
. 
subp
. 
stdout


193 
self
. 
subout_fd
= 
self
. 
subout
. 
	`fileno
( ) 

194 
self
. 
blocking
= 
blocking


195 if not 
self
. 
blocking
: 

196 
flags
= 
fcntl
. 
	`fcntl
( 
self
. 
subout_fd
, 
fcntl
. 
F_GETFL
) 

197 
fcntl
. 
	`fcntl
( 
self
. 
subout_fd
, 
fcntl
. 
F_SETFL
, 
flags
| 
os
. 
O_NONBLOCK
) 

198 
self
. 
next_go_backup
= False 

199 
self
. 
waiting
= False 

204 
self
. 
db
. 
	`capb
( 'escape' ) 

206 def 
	$process_line
( 
self
) : 

207 
line
= 
self
. 
	`tryreadline
( ) 

208 if 
line
is None : 

210 if 
line
== '' : 

214 
line
= 
line
. 
	`rstrip
( '\n' ) 

215 
params
= 
line
. 
	`split
( None , 1 ) 

216 if not 
params
: 

218 
command
= 
params
[ 0 ] . 
	`upper
( ) 

219 if 
	`len
( 
params
) > 1 : 

220 
rest
= 
params
[ 1 ] 

222 
rest
= '' 

225 if 
command
not in 
valid_commands
or 
valid_commands
[ 
command
] == 0 : 

226 
params
= [ 
rest
] 

227 elif 
valid_commands
[ 
command
] is None : 

228 
params
= 
rest
. 
	`split
( ) 

230 
params
= 
rest
. 
	`split
( None , 
valid_commands
[ 
command
] - 1 ) 

232 
self
. 
	`debug
( 'filter' , '<--' , 
command
, * 
params
) 

234 if 
line
== '' or 
line
. 
	`startswith
( ' ' ) or 
command
not in 
valid_commands
: 

238 
self
. 
	`debug
( 'filter' , 'ignoring unknown (multi-line?) command' ) 

241 if 
command
== 'CAPB' : 

242 
self
. 
escaping
= 'escape' in 
params


243 
self
. 
progress_cancel
= 'progresscancel' in 
params


244 for 
widget
in 
self
. 
	`find_widgets
( [ 'CAPB' ] , 'capb' ) : 

245 
self
. 
	`debug
( 'filter' , 'capb widget found' ) 

246 
widget
. 
	`capb
( 
params
) 

247 if 'escape' not in 
params
: 

248 
params
. 
	`append
( 'escape' ) 

250 if 
command
== 'INPUT' and 
	`len
( 
params
) == 2 : 

251 ( 
priority
, 
question
) = 
params


252 
input_widgets
= 
self
. 
	`find_widgets
( [ 
question
] ) 

254 if 
	`len
( 
input_widgets
) > 0 : 

255 if 'UBIQUITY_AUTOMATIC' in 
os
. 
environ
: 

256 if 
self
. 
db
. 
	`fget
( 
question
, 'seen' ) == 'true' : 

257 
self
. 
	`reply
( 30 , 'question skipped' , 
log
= True ) 

258 
self
. 
next_go_backup
= False 

260 
self
. 
	`debug
( 'filter' , 'widget found for' , 
question
) 

261 if not 
input_widgets
[ 0 ] . 
	`run
( 
priority
, 
question
) : 

262 
self
. 
	`debug
( 'filter' , 'widget requested backup' ) 

263 
self
. 
next_go_backup
= True 

265 
self
. 
next_go_backup
= False 

266 
self
. 
	`reply
( 0 , 'question will be asked' , 
log
= True ) 

268 elif 'ERROR' in 
self
. 
widgets
: 

272 if 
self
. 
db
. 
	`metaget
( 
question
, 'Type' ) == 'error' : 

273 
widget
= 
self
. 
widgets
[ 'ERROR' ] 

274 
self
. 
	`debug
( 'filter' , 'error widget found for' , 

275 
question
) 

276 if not 
widget
. 
	`error
( 
priority
, 
question
) : 

277 
self
. 
	`debug
( 'filter' , 'widget requested backup' ) 

278 
self
. 
next_go_backup
= True 

280 
self
. 
next_go_backup
= False 

281 
self
. 
	`reply
( 0 , 'question will be asked' , 
log
= True ) 

283 except 
debconf
. 
DebconfError
: 

286 if 
command
== 'SET' and 
	`len
( 
params
) >= 2 : 

287 
question
= 
params
[ 0 ] 

288 
value
= ' ' . 
	`join
( 
params
[ 1 : ] ) 

289 for 
widget
in 
self
. 
	`find_widgets
( [ 
question
] , 'set' ) : 

290 
self
. 
	`debug
( 'filter' , 'widget found for' , 
question
) 

291 
widget
. 
	`set
( 
question
, 
value
) 

293 if 
command
== 'SUBST' and 
	`len
( 
params
) >= 3 : 

294 ( 
question
, 
key
) = 
params
[ 0 : 2 ] 

295 
value
= ' ' . 
	`join
( 
params
[ 2 : ] ) 

296 for 
widget
in 
self
. 
	`find_widgets
( [ 
question
] , 'subst' ) : 

297 
self
. 
	`debug
( 'filter' , 'widget found for' , 
question
) 

298 
widget
. 
	`subst
( 
question
, 
key
, 
value
) 

300 if 
command
== 'METAGET' and 
	`len
( 
params
) == 2 : 

301 ( 
question
, 
field
) = 
params


302 for 
widget
in 
self
. 
	`find_widgets
( [ 
question
] , 'metaget' ) : 

303 
self
. 
	`debug
( 'filter' , 'widget found for' , 
question
) 

304 
widget
. 
	`metaget
( 
question
, 
field
) 

306 if 
command
== 'PROGRESS' and 
	`len
( 
params
) >= 1 : 

307 
subcommand
= 
params
[ 0 ] . 
	`upper
( ) 

308 
cancelled
= False 

309 if 
subcommand
== 'START' and 
	`len
( 
params
) == 4 : 

310 
progress_min
= 
	`int
( 
params
[ 1 ] ) 

311 
progress_max
= 
	`int
( 
params
[ 2 ] ) 

312 
progress_title
= 
params
[ 3 ] 

313 for 
widget
in 
self
. 
	`find_widgets
( 

314 [ 
progress_title
, 'PROGRESS' ] , 'progress_start' ) : 

315 
self
. 
	`debug
( 'filter' , 'widget found for' , 
progress_title
) 

316 
widget
. 
	`progress_start
( 
progress_min
, 
progress_max
, 

317 
progress_title
) 

318 
self
. 
progress_bars
. 
	`insert
( 0 , 
progress_title
) 

319 elif 
	`len
( 
self
. 
progress_bars
) != 0 : 

320 if 
subcommand
== 'SET' and 
	`len
( 
params
) == 2 : 

321 
progress_val
= 
	`int
( 
params
[ 1 ] ) 

322 for 
widget
in 
self
. 
	`find_widgets
( 

323 [ 
self
. 
progress_bars
[ 0 ] , 'PROGRESS' ] , 

325 
self
. 
	`debug
( 'filter' , 'widget found for' , 

326 
self
. 
progress_bars
[ 0 ] ) 

327 if not 
widget
. 
	`progress_set
( 
self
. 
progress_bars
[ 0 ] , 

328 
progress_val
) : 

329 
cancelled
= True 

330 elif 
subcommand
== 'STEP' and 
	`len
( 
params
) == 2 : 

331 
progress_inc
= 
	`int
( 
params
[ 1 ] ) 

332 for 
widget
in 
self
. 
	`find_widgets
( 

333 [ 
self
. 
progress_bars
[ 0 ] , 'PROGRESS' ] , 

335 
self
. 
	`debug
( 'filter' , 'widget found for' , 

336 
self
. 
progress_bars
[ 0 ] ) 

337 if not 
widget
. 
	`progress_step
( 
self
. 
progress_bars
[ 0 ] , 

338 
progress_inc
) : 

339 
cancelled
= True 

340 elif 
subcommand
== 'INFO' and 
	`len
( 
params
) == 2 : 

341 
progress_info
= 
params
[ 1 ] 

342 for 
widget
in 
self
. 
	`find_widgets
( 

343 [ 
self
. 
progress_bars
[ 0 ] , 'PROGRESS' ] , 

345 
self
. 
	`debug
( 'filter' , 'widget found for' , 

346 
self
. 
progress_bars
[ 0 ] ) 

347 if not 
widget
. 
	`progress_info
( 
self
. 
progress_bars
[ 0 ] , 

348 
progress_info
) : 

349 
cancelled
= True 

350 elif 
subcommand
== 'STOP' and 
	`len
( 
params
) == 1 : 

351 for 
widget
in 
self
. 
	`find_widgets
( 

352 [ 
self
. 
progress_bars
[ 0 ] , 'PROGRESS' ] , 

354 
self
. 
	`debug
( 'filter' , 'widget found for' , 

355 
self
. 
progress_bars
[ 0 ] ) 

356 
widget
. 
	`progress_stop
( 
self
. 
progress_bars
[ 0 ] ) 

357 
self
. 
progress_bars
. 
	`pop
( ) 

358 elif 
subcommand
== 'REGION' and 
	`len
( 
params
) == 3 : 

359 
progress_region_start
= 
	`int
( 
params
[ 1 ] ) 

360 
progress_region_end
= 
	`int
( 
params
[ 2 ] ) 

361 for 
widget
in 
self
. 
	`find_widgets
( 

362 [ 
self
. 
progress_bars
[ 0 ] , 'PROGRESS' ] , 

364 
self
. 
	`debug
( 'filter' , 'widget found for' , 

365 
self
. 
progress_bars
[ 0 ] ) 

366 
widget
. 
	`progress_region
( 
self
. 
progress_bars
[ 0 ] , 

367 
progress_region_start
, 

368 
progress_region_end
) 

371 if 
self
. 
progress_cancel
and 
cancelled
: 

372 
self
. 
	`reply
( 30 , 'progress bar cancelled' , 
log
= True ) 

374 
self
. 
	`reply
( 0 , 'OK' , 
log
= True ) 

377 if 
command
== 'GO' and 
self
. 
next_go_backup
: 

378 
self
. 
	`reply
( 30 , 'backup' , 
log
= True ) 

381 if 
command
== 'PURGE' : 

386 
self
. 
	`reply
( 0 , 
log
= True ) 

389 if 
command
== 'STOP' : 

393 if not 
self
. 
escaping
: 

394 
params
= 
	`map
( 
misc
. 
debconf_escape
, 
params
) 

395 
data
= 
self
. 
db
. 
	`command
( 
command
, * 
params
) 

396 
self
. 
	`reply
( 0 , 
data
) 

401 if 
command
== 'INPUT' : 

402 
self
. 
next_go_backup
= False 

403 except 
debconf
. 
DebconfError
, 
e
: 

404 
self
. 
	`reply
( * 
e
. 
args
) 

408 
	}


408 def 
	$wait
( 
self
) : 

409 if 
self
. 
subin
is not None and 
self
. 
subout
is not None : 

410 
self
. 
subin
. 
	`close
( ) 

411 
self
. 
subin
= None 

412 
self
. 
subout
. 
	`close
( ) 

413 
self
. 
subout
= None 

414 return 
self
. 
subp
. 
	`wait
( ) 

416 
	}


416 def 
	$run
( 
self
, 
command
) : 

417 
self
. 
	`start
( 
command
) 

418 while 
self
. 
	`process_line
( ) : 

420 return 
self
. 
	`wait
( ) 

420 
	}


	@ubiquity/__init__.py

3 
__all__
= [ 'gconftool' , 'i18n' , 'misc' , 'osextras' , 'validation' , 'tz' ] 

	@ubiquity/validation.py

35 def 
	$check_grub_device
( 
device
) : 

38 import 
	~<re


39 
regex
= 
re
. 
	`compile
( r'^/dev/([a-zA-Z0-9]+|mapper/[a-zA-Z0-9_]+)$' ) 

40 if 
regex
. 
	`search
( 
device
) : 

43 
regex
= 
re
. 
	`compile
( r'^\((hd|fd)[0-9]+(,[0-9]+)*\)$' ) 

44 if 
regex
. 
	`search
( 
device
) : 

49 
	}


49 
HOSTNAME_LENGTH
= 1 

50 
HOSTNAME_BADCHAR
= 2 

51 
HOSTNAME_BADHYPHEN
= 3 

52 
HOSTNAME_BADDOTS
= 4 

54 def 
	$check_hostname
( 
name
) : 

64 import 
	~<re


65 
result
= 
	`set
( ) 

67 if 
	`len
( 
name
) < 1 or 
	`len
( 
name
) > 63 : 

68 
result
. 
	`add
( 
HOSTNAME_LENGTH
) 

70 
regex
= 
re
. 
	`compile
( r'^[a-zA-Z0-9.-]+$' ) 

71 if not 
regex
. 
	`search
( 
name
) : 

72 
result
. 
	`add
( 
HOSTNAME_BADCHAR
) 

73 if 
name
. 
	`startswith
( '-' ) or 
name
. 
	`endswith
( '-' ) : 

74 
result
. 
	`add
( 
HOSTNAME_BADHYPHEN
) 

75 if '..' in 
name
or 
name
. 
	`startswith
( '.' ) or 
name
. 
	`endswith
( '.' ) : 

76 
result
. 
	`add
( 
HOSTNAME_BADDOTS
) 

78 return 
	`sorted
( 
result
) 

78 
	}


	@ubiquity/filteredcommand.py

21 import 
	~<sys


22 import 
	~<os


23 import 
	~<types


24 import 
	~<signal


25 import 
	~<subprocess


26 import 
	~<re


27 import 
	~<syslog


29 import 
	~<debconf


30 from 
ubiquity
. 
debconfcommunicator
import 
	~<DebconfCommunicator


32 from 
ubiquity
. 
debconffilter
import 
	~<DebconfFilter


34 from 
ubiquity
import 
	~<misc


37 
PACKAGE
= 'ubiquity' 

40 
DEBCONF_IO_IN
= 1 

41 
DEBCONF_IO_OUT
= 2 

42 
DEBCONF_IO_ERR
= 4 

43 
DEBCONF_IO_HUP
= 8 

45 class 
	cFilteredCommand
( object ) : 

46 def 
	$__init__
( 
self
, 
frontend
, 
db
= None ) : 

47 
self
. 
frontend
= 
frontend


49 
self
. 
db
= 
db


50 
self
. 
done
= False 

51 
self
. 
current_question
= None 

52 
self
. 
succeeded
= False 

54 
	}


54 @ 
classmethod


55 def 
	$debug_enabled
( 
self
) : 

56 return ( 'UBIQUITY_DEBUG_CORE' in 
os
. 
environ
and 

57 
os
. 
environ
[ 'UBIQUITY_DEBUG_CORE' ] == '1' ) 

59 
	}


59 @ 
classmethod


60 def 
	$debug
( 
self
, 
fmt
, * 
args
) : 

61 if 
self
. 
	`debug_enabled
( ) : 

62 import 
	~<time


64 
time_str
= 
time
. 
	`ctime
( ) [ 4 : 19 ] 

65 
message
= 
fmt
% 
args


66 print >> 
sys
. 
stderr
, '%s %s: %s' % ( 
time_str
, 
PACKAGE
, 
message
) 

68 
	}


68 def 
	$start
( 
self
, 
auto_process
= False ) : 

69 
self
. 
status
= None 

70 
self
. 
db
= 
	`DebconfCommunicator
( 
PACKAGE
, 
cloexec
= True ) 

71 
prep
= 
self
. 
	`prepare
( ) 

72 
self
. 
command
= [ 'log-output' , '-t' , 'ubiquity' , '--pass-stdout' ] 

73 if 
	`isinstance
( 
prep
[ 0 ] , 
types
. 
StringTypes
) : 

74 
self
. 
command
. 
	`append
( 
prep
[ 0 ] ) 

76 
self
. 
command
. 
	`extend
( 
prep
[ 0 ] ) 

77 
question_patterns
= 
prep
[ 1 ] 

78 if 
	`len
( 
prep
) > 2 : 

79 
env
= 
prep
[ 2 ] 

81 
env
= { } 

83 
self
. 
ui_loop_level
= 0 

85 
self
. 
	`debug
( "Starting up '%s' for %s.%s" , 
self
. 
command
, 

86 
self
. 
__class__
. 
__module__
, 
self
. 
__class__
. 
__name__
) 

87 
self
. 
	`debug
( "Watching for question patterns %s" , 

88 ', ' . 
	`join
( 
question_patterns
) ) 

90 
widgets
= { } 

91 for 
pattern
in 
question_patterns
: 

92 
widgets
[ 
pattern
] = 
self


93 
self
. 
dbfilter
= 
	`DebconfFilter
( 
self
. 
db
, 
widgets
) 

97 if 
auto_process
: 

98 
self
. 
dbfilter
. 
	`start
( 
self
. 
command
, 
blocking
= False , 
extra_env
= 
env
) 

105 
self
. 
frontend
. 
	`watch_debconf_fd
( 

106 
self
. 
dbfilter
. 
subout_fd
, 
self
. 
process_input
) 

108 
self
. 
dbfilter
. 
	`start
( 
self
. 
command
, 
blocking
= True , 
extra_env
= 
env
) 

110 
	}


110 def 
	$process_line
( 
self
) : 

112 return 
self
. 
dbfilter
. 
	`process_line
( ) 

113 except 
Exception
: 

114 import 
	~<traceback


115 print >> 
sys
. 
stderr
, 'Exception caught in process_line:' 

116 
traceback
. 
	`print_exc
( 
file
= 
sys
. 
stderr
) 

119 
	}


119 def 
	$wait
( 
self
) : 

120 
ret
= 
self
. 
dbfilter
. 
	`wait
( ) 

122 if 
ret
is None : 

123 
self
. 
	`debug
( "%s not running?" , 
self
. 
command
) 

126 
self
. 
	`debug
( "%s exited with code %d" , 
self
. 
command
, 
ret
) 

128 
self
. 
	`cleanup
( ) 

130 
self
. 
db
. 
	`shutdown
( ) 

132 return 
ret


134 
	}


134 def 
	$cleanup
( 
self
) : 

137 
	}


137 def 
	$run_command
( 
self
, 
auto_process
= False ) : 

140 if 
self
. 
frontend
is None : 

141 
prep
= 
self
. 
	`prepare
( ) 

142 
self
. 
command
= [ 'log-output' , '-t' , 'ubiquity' , '--pass-stdout' ] 

143 if 
	`isinstance
( 
prep
[ 0 ] , 
types
. 
StringTypes
) : 

144 
self
. 
command
. 
	`append
( 
prep
[ 0 ] ) 

146 
self
. 
command
. 
	`extend
( 
prep
[ 0 ] ) 

147 
self
. 
	`debug
( "Starting up '%s' for %s.%s" , 
self
. 
command
, 

148 
self
. 
__class__
. 
__module__
, 
self
. 
__class__
. 
__name__
) 

149 if 
	`len
( 
prep
) > 2 : 

150 
env
= 
prep
[ 2 ] 

152 
env
= { } 

154 def 
	$subprocess_setup
( ) : 

155 for 
key
, 
value
in 
env
. 
	`iteritems
( ) : 

156 
os
. 
environ
[ 
key
] = 
value


157 
os
. 
environ
[ 'LC_COLLATE' ] = 'C' 

162 
signal
. 
	`signal
( 
signal
. 
SIGPIPE
, 
signal
. 
SIG_DFL
) 

164 
	}


164 
ret
= 
subprocess
. 
	`call
( 
self
. 
command
, 
preexec_fn
= 
subprocess_setup
) 

165 if 
ret
!= 0 : 

166 
self
. 
	`debug
( "%s exited with code %d" , 
self
. 
command
, 
ret
) 

167 return 
ret


169 
self
. 
	`start
( 
auto_process
= 
auto_process
) 

170 if 
auto_process
: 

171 
self
. 
	`enter_ui_loop
( ) 

172 if 
self
. 
status
is None : 

173 
self
. 
status
= 
self
. 
	`wait
( ) 

175 while 
self
. 
	`process_line
( ) : 

177 
self
. 
status
= 
self
. 
	`wait
( ) 

178 return 
self
. 
status


180 def 
	$process_input
( 
self
, 
source
, 
condition
) : 

181 if 
source
!= 
self
. 
dbfilter
. 
subout_fd
: 

184 
call_again
= True 

186 if 
condition
& 
DEBCONF_IO_IN
: 

187 if not 
self
. 
	`process_line
( ) : 

188 
call_again
= False 

190 if ( 
condition
& 
DEBCONF_IO_ERR
) or ( 
condition
& 
DEBCONF_IO_HUP
) : 

191 
call_again
= False 

193 if not 
call_again
: 

196 
self
. 
status
= 
self
. 
	`wait
( ) 

197 
self
. 
	`exit_ui_loops
( ) 

198 
self
. 
frontend
. 
	`debconffilter_done
( 
self
) 

200 return 
call_again


202 
	}


202 def 
	$question_type
( 
self
, 
question
) : 

204 return 
self
. 
db
. 
	`metaget
( 
question
, 'Type' ) 

205 except 
debconf
. 
DebconfError
: 

210 
	}


210 def 
	$split_choices
( 
self
, 
text
) : 

211 
textlen
= 
	`len
( 
text
) 

212 
index
= 0 

213 
items
= [ ] 

214 
item
= '' 

216 while 
index
< 
textlen
: 

217 if 
text
[ 
index
] == '\\' and 
index
+ 1 < 
textlen
: 

218 if 
text
[ 
index
+ 1 ] == ',' or 
text
[ 
index
+ 1 ] == ' ' : 

219 
item
+= 
text
[ 
index
+ 1 ] 

220 
index
+= 1 

221 elif 
text
[ 
index
] == ',' : 

222 
items
. 
	`append
( 
item
. 
	`strip
( ) ) 

223 
item
= '' 

225 
item
+= 
text
[ 
index
] 

226 
index
+= 1 

228 if 
item
!= '' : 

229 
items
. 
	`append
( 
item
. 
	`strip
( ) ) 

231 return 
items


233 
	}


233 def 
	$choices_untranslated
( 
self
, 
question
) : 

234 
choices
= 
	`unicode
( 
self
. 
db
. 
	`metaget
( 
question
, 'choices-c' ) , 

236 return 
self
. 
	`split_choices
( 
choices
) 

238 
	}


238 def 
	$choices
( 
self
, 
question
) : 

239 
choices
= 
	`unicode
( 
self
. 
db
. 
	`metaget
( 
question
, 'choices' ) , 

241 return 
self
. 
	`split_choices
( 
choices
) 

243 
	}


243 def 
	$choices_display_map
( 
self
, 
question
) : 

250 
_map
= { } 

251 
choices
= 
self
. 
	`choices
( 
question
) 

252 
choices_c
= 
self
. 
	`choices_untranslated
( 
question
) 

253 for 
i
in 
	`range
( 
	`len
( 
choices
) ) : 

254 
_map
[ 
choices
[ 
i
] ] = 
choices_c
[ 
i
] 

255 return 
_map


257 
	}


257 def 
	$description
( 
self
, 
question
) : 

258 return 
	`unicode
( 
self
. 
db
. 
	`metaget
( 
question
, 'description' ) , 

261 
	}


261 def 
	$extended_description
( 
self
, 
question
) : 

262 return 
	`unicode
( 
self
. 
db
. 
	`metaget
( 
question
, 'extended_description' ) , 

265 
	}


265 def 
	$translate_to_c
( 
self
, 
question
, 
value
) : 

266 
choices
= 
self
. 
	`choices
( 
question
) 

267 
choices_c
= 
self
. 
	`choices_untranslated
( 
question
) 

268 for 
i
in 
	`range
( 
	`len
( 
choices
) ) : 

269 if 
choices
[ 
i
] == 
value
: 

270 return 
choices_c
[ 
i
] 

271 raise 
ValueError
, 
value


273 
	}


273 def 
	$value_index
( 
self
, 
question
) : 

274 
value
= 
self
. 
db
. 
	`get
( 
question
) 

275 
choices_c
= 
self
. 
	`choices_untranslated
( 
question
) 

276 for 
i
in 
	`range
( 
	`len
( 
choices_c
) ) : 

277 if 
choices_c
[ 
i
] == 
value
: 

278 return 
i


279 raise 
ValueError
, 
value


281 
	}


281 def 
	$preseed
( 
self
, 
name
, 
value
, 
seen
= True ) : 

282 
value
= 
misc
. 
	`debconf_escape
( 
value
) 

283 
value
= 
value
. 
	`encode
( "UTF-8" , "ignore" ) 

285 
self
. 
db
. 
	`set
( 
name
, 
value
) 

286 except 
debconf
. 
DebconfError
: 

287 
self
. 
db
. 
	`register
( 'debian-installer/dummy' , 
name
) 

288 
self
. 
db
. 
	`set
( 
name
, 
value
) 

289 
self
. 
db
. 
	`subst
( 
name
, 'ID' , 
name
) 

291 if 
seen
: 

292 
self
. 
db
. 
	`fset
( 
name
, 'seen' , 'true' ) 

294 
	}


294 def 
	$preseed_bool
( 
self
, 
name
, 
value
, 
seen
= True ) : 

295 if 
value
: 

296 
self
. 
	`preseed
( 
name
, 'true' , 
seen
) 

298 
self
. 
	`preseed
( 
name
, 'false' , 
seen
) 

301 
	}


301 def 
	$preseed_as_c
( 
self
, 
name
, 
value
, 
seen
= True ) : 

302 
self
. 
	`preseed
( 
name
, 
self
. 
	`translate_to_c
( 
name
, 
value
) , 
seen
) 

307 
	}


307 def 
	$enter_ui_loop
( 
self
) : 

308 
self
. 
ui_loop_level
+= 1 

309 
self
. 
frontend
. 
	`run_main_loop
( ) 

312 
	}


312 def 
	$exit_ui_loops
( 
self
) : 

313 while 
self
. 
ui_loop_level
> 0 : 

314 
self
. 
ui_loop_level
-= 1 

315 
self
. 
frontend
. 
	`quit_main_loop
( ) 

322 
	}


322 def 
	$ok_handler
( 
self
) : 

323 
self
. 
succeeded
= True 

324 
self
. 
done
= True 

325 
self
. 
	`exit_ui_loops
( ) 

332 
	}


332 def 
	$cancel_handler
( 
self
) : 

333 
self
. 
succeeded
= False 

334 
self
. 
done
= True 

335 
self
. 
	`exit_ui_loops
( ) 

337 
	}


337 def 
	$error
( 
self
, 
priority
, 
question
) : 

338 
self
. 
succeeded
= False 

339 
self
. 
done
= False 

348 
	}


348 def 
	$run
( 
self
, 
priority
, 
question
) : 

349 if not 
self
. 
frontend
. 
installing
: 

351 while 
self
. 
frontend
. 
progress_position
. 
	`depth
( ) != 0 : 

352 
self
. 
frontend
. 
	`debconf_progress_stop
( ) 

354 
self
. 
current_question
= 
question


355 if not 
self
. 
done
: 

356 
self
. 
succeeded
= False 

357 
n
= 
self
. 
__class__
. 
__name__


358 
self
. 
frontend
. 
	`set_page
( 
n
) 

359 
self
. 
	`enter_ui_loop
( ) 

360 return 
self
. 
succeeded


364 
	}


364 def 
	$progress_start
( 
self
, 
progress_min
, 
progress_max
, 
progress_title
) : 

365 
self
. 
frontend
. 
	`debconf_progress_start
( 

366 
progress_min
, 
progress_max
, 
self
. 
	`description
( 
progress_title
) ) 

367 
self
. 
frontend
. 
	`refresh
( ) 

369 
	}


369 def 
	$progress_set
( 
self
, 
progress_title
, 
progress_val
) : 

370 
ret
= 
self
. 
frontend
. 
	`debconf_progress_set
( 
progress_val
) 

371 
self
. 
frontend
. 
	`refresh
( ) 

372 return 
ret


374 
	}


374 def 
	$progress_step
( 
self
, 
progress_title
, 
progress_inc
) : 

375 
ret
= 
self
. 
frontend
. 
	`debconf_progress_step
( 
progress_inc
) 

376 
self
. 
frontend
. 
	`refresh
( ) 

377 return 
ret


379 
	}


379 def 
	$progress_info
( 
self
, 
progress_title
, 
progress_info
) : 

381 
ret
= 
self
. 
frontend
. 
	`debconf_progress_info
( 

382 
self
. 
	`description
( 
progress_info
) ) 

383 
self
. 
frontend
. 
	`refresh
( ) 

384 return 
ret


385 except 
debconf
. 
DebconfError
: 

389 
	}


389 def 
	$progress_stop
( 
self
, 
progress_title
) : 

390 
self
. 
frontend
. 
	`debconf_progress_stop
( ) 

391 
self
. 
frontend
. 
	`refresh
( ) 

393 
	}


393 def 
	$progress_region
( 
self
, 
progress_title
, 

394 
progress_region_start
, 
progress_region_end
) : 

395 
self
. 
frontend
. 
	`debconf_progress_region
( 
progress_region_start
, 

396 
progress_region_end
) 

398 
	}


398 if 
__name__
== '__main__' : 

399 
fc
= 
	`FilteredCommand
( ) 

400 
fc
. 
	`run
( 
sys
. 
argv
[ 1 ] ) 

	@ubiquity/timezone_map.py

22 import 
	~<math


23 import 
	~<cairo


24 import 
	~<gtk


25 import 
	~<glib


26 from 
gtk
import 
	~<gdk


27 import 
	~<gobject


28 import 
	~<os


29 import 
	~<datetime


30 from 
ubiquity
. 
segmented_bar
import 
	~<CairoExtensions


36 
color_codes
= { 

94 def 
	$convert_longitude_to_x
( 
longitude
, 
map_width
) : 

95 
xdeg_offset
= - 6 

96 
x
= ( 
map_width
* ( 180.0 + 
longitude
) / 360.0 ) + ( 
map_width
* 
xdeg_offset
/ 180.0 ) 

97 
x
= 
x
% 
map_width


98 return 
x


113 
	}


113 def 
	$convert_latitude_to_y
( 
latitude
, 
map_height
) : 

114 
bottom_lat
= - 59 

115 
top_lat
= 81 

116 
top_per
= 
top_lat
/ 180.0 

117 
y
= 1.25 * 
math
. 
	`log
( 
math
. 
	`tan
( 
math
. 
pi
/ 4.0 + 0.4 * 
math
. 
	`radians
( 
latitude
) ) ) 

118 
full_range
= 4.6068250867599998 

119 
top_offset
= 
full_range
* 
top_per


120 
map_range
= 
	`abs
( 1.25 * 
math
. 
	`log
( 
math
. 
	`tan
( 
math
. 
pi
/ 4.0 + 0.4 * 
math
. 
	`radians
( 
bottom_lat
) ) ) - 
top_offset
) 

121 
y
= 
	`abs
( 
y
- 
top_offset
) 

122 
y
= 
y
/ 
map_range


123 
y
= 
y
* 
map_height


124 return 
y


126 
	}


126 class 
	cTimezoneMap
( 
gtk
. 
Widget
) : 

127 
__gtype_name__
= 'TimezoneMap' 

128 
__gsignals__
= { 

129 'city-selected' : ( 
gobject
. 
SIGNAL_RUN_FIRST
, 

130 
gobject
. 
TYPE_NONE
, 

131 ( 
gobject
. 
TYPE_STRING
, ) ) 

134 def 
	$__init__
( 
self
, 
database
, 
image_path
) : 

135 
gtk
. 
Widget
. 
	`__init__
( 
self
) 

136 
self
. 
tzdb
= 
database


137 
self
. 
image_path
= 
image_path


138 
self
. 
orig_background
= 

139 
gtk
. 
gdk
. 
	`pixbuf_new_from_file
( 
os
. 
path
. 
	`join
( 
self
. 
image_path
, 

141 
self
. 
orig_color_map
= 

142 
gtk
. 
gdk
. 
	`pixbuf_new_from_file
( 
os
. 
path
. 
	`join
( 
self
. 
image_path
, 

144 
self
. 
	`connect
( 'button-press-event' , 
self
. 
button_press
) 

145 
self
. 
	`connect
( 'map-event' , 
self
. 
mapped
) 

146 
self
. 
	`connect
( 'unmap-event' , 
self
. 
unmapped
) 

147 
self
. 
selected_offset
= None 

149 
self
. 
selected
= None 

150 
self
. 
update_timeout
= None 

152 
self
. 
distances
= [ ] 

153 
self
. 
previous_click
= ( - 1 , - 1 ) 

154 
self
. 
dist_pos
= 0 

156 
	}


156 def 
	$do_size_request
( 
self
, 
requisition
) : 

159 
screen_height
= 
gtk
. 
gdk
. 
	`get_default_root_window
( ) . 
	`get_screen
( ) . 
	`get_height
( ) 

163 if 
screen_height
> 
self
. 
orig_background
. 
	`get_height
( ) + 300 : 

164 
width
= 
self
. 
orig_background
. 
	`get_width
( ) 

165 
height
= 
self
. 
orig_background
. 
	`get_height
( ) 

167 
width
= 
self
. 
orig_background
. 
	`get_width
( ) / 2 

168 
height
= 
self
. 
orig_background
. 
	`get_height
( ) / 2 

169 
requisition
. 
width
= 
width


170 
requisition
. 
height
= 
height


171 
gtk
. 
Widget
. 
	`do_size_request
( 
self
, 
requisition
) 

173 
	}


173 def 
	$do_size_allocate
( 
self
, 
allocation
) : 

174 
self
. 
background
= 
self
. 
orig_background
. 
	`scale_simple
( 
allocation
. 
width
, 

175 
allocation
. 
height
, 
gtk
. 
gdk
. 
INTERP_BILINEAR
) 

177 
color_map
= 
self
. 
orig_color_map
. 
	`scale_simple
( 
allocation
. 
width
, 

178 
allocation
. 
height
, 
gtk
. 
gdk
. 
INTERP_BILINEAR
) 

179 
self
. 
visible_map_pixels
= 
color_map
. 
	`get_pixels
( ) 

180 
self
. 
visible_map_rowstride
= 
color_map
. 
	`get_rowstride
( ) 

181 
gtk
. 
Widget
. 
	`do_size_allocate
( 
self
, 
allocation
) 

183 
	}


183 def 
	$do_realize
( 
self
) : 

184 
self
. 
	`set_flags
( 
self
. 
	`flags
( ) | 
gtk
. 
REALIZED
) 

185 
self
. 
window
= 
gdk
. 
	`Window
( 

186 
self
. 
	`get_parent_window
( ) , 

187 
width
= 
self
. 
allocation
. 
width
, 

188 
height
= 
self
. 
allocation
. 
height
, 

189 
window_type
= 
gdk
. 
WINDOW_CHILD
, 

190 
wclass
= 
gdk
. 
INPUT_OUTPUT
, 

191 
event_mask
= 
self
. 
	`get_events
( ) | 

192 
gdk
. 
EXPOSURE_MASK
| 

193 
gdk
. 
BUTTON_PRESS_MASK
) 

194 
self
. 
window
. 
	`set_user_data
( 
self
) 

195 
self
. 
style
. 
	`attach
( 
self
. 
window
) 

196 
self
. 
style
. 
	`set_background
( 
self
. 
window
, 
gtk
. 
STATE_NORMAL
) 

197 
self
. 
window
. 
	`move_resize
( * 
self
. 
allocation
) 

198 
cursor
= 
gtk
. 
gdk
. 
	`Cursor
( 
gtk
. 
gdk
. 
HAND2
) 

199 
self
. 
window
. 
	`set_cursor
( 
cursor
) 

201 
	}


201 def 
	$do_expose_event
( 
self
, 
event
) : 

202 
cr
= 
self
. 
window
. 
	`cairo_create
( ) 

203 
cr
. 
	`set_source_pixbuf
( 
self
. 
background
, 0 , 0 ) 

204 
cr
. 
	`paint
( ) 

210 
pixbuf
= None 

211 if 
self
. 
selected_offset
!= None : 

213 
pixbuf
= 
gtk
. 
gdk
. 
	`pixbuf_new_from_file
( 
os
. 
path
. 
	`join
( 
self
. 
image_path
, 

214 'timezone_%s.png' % 
self
. 
selected_offset
) ) 

215 
pixbuf
= 
pixbuf
. 
	`scale_simple
( 
self
. 
allocation
. 
width
, 

216 
self
. 
allocation
. 
height
, 
gtk
. 
gdk
. 
INTERP_BILINEAR
) 

217 
cr
. 
	`set_source_pixbuf
( 
pixbuf
, 0 , 0 ) 

218 
cr
. 
	`paint
( ) 

219 except 
glib
. 
GError
, 
e
: 

220 print 'Error setting the time zone band highlight:' , 
	`str
( 
e
) 

224 
height
= 
self
. 
background
. 
	`get_height
( ) 

225 
width
= 
self
. 
background
. 
	`get_width
( ) 

227 
only_draw_selected
= True 

228 for 
loc
in 
self
. 
tzdb
. 
locations
: 

229 if not ( 
self
. 
selected
and 
loc
. 
zone
== 
self
. 
selected
) : 

231 
pointx
= 
	`convert_longitude_to_x
( 
loc
. 
longitude
, 
width
) 

232 
pointy
= 
	`convert_latitude_to_y
( 
loc
. 
latitude
, 
height
) 

234 
cr
. 
	`set_source_color
( 
gtk
. 
gdk
. 
	`color_parse
( '#1e1e1e' ) ) 

235 
cr
. 
	`arc
( 
pointx
, 
pointy
, 4.5 , 0 , 2 * 
math
. 
pi
) 

236 
cr
. 
	`set_line_width
( 1.5 ) 

237 
cr
. 
	`fill_preserve
( ) 

238 
cr
. 
	`set_source_color
( 
gtk
. 
gdk
. 
	`color_parse
( 'white' ) ) 

239 
cr
. 
	`stroke
( ) 

242 
now
= 
datetime
. 
datetime
. 
	`now
( 
loc
. 
info
) 

243 
time_text
= 
now
. 
	`strftime
( '%X' ) 

244 
cr
. 
	`select_font_face
( 'Sans' , 
cairo
. 
FONT_SLANT_NORMAL
, 
cairo
. 
FONT_WEIGHT_NORMAL
) 

245 
cr
. 
	`set_font_size
( 12.0 ) 

246 
xbearing
, 
ybearing
, 
width
, 
height
, 
xadvance
, 
yadvance
= 

247 
cr
. 
	`text_extents
( 
time_text
) 

248 
newy
= 
pointy
- ( 
ybearing
/ 2 ) 

249 if 
pointx
+ 
width
+ 10 > 
self
. 
allocation
. 
width
: 

250 
newx
= 
pointx
- 12 - 
width
- 4 

252 
newx
= 
pointx
+ 12 

253 
cr
. 
	`move_to
( 
newx
, 
newy
) 

254 
cr
. 
	`set_source_color
( 
gtk
. 
gdk
. 
	`color_parse
( '#1e1e1e' ) ) 

255 
CairoExtensions
. 
	`rounded_rectangle
( 
cr
, 
newx
- 5 , 
newy
+ 
ybearing
- 6 , 
width
+ 10 , 
height
+ 12 , 
height
/ 6 ) 

256 
cr
. 
	`fill_preserve
( ) 

257 
cr
. 
	`stroke
( ) 

258 
cr
. 
	`set_source_color
( 
gtk
. 
gdk
. 
	`color_parse
( 'white' ) ) 

259 
cr
. 
	`move_to
( 
newx
, 
newy
) 

260 
cr
. 
	`show_text
( 
time_text
) 

261 
cr
. 
	`stroke
( ) 

263 
	}


263 def 
	$timeout
( 
self
) : 

264 
self
. 
	`queue_draw
( ) 

267 
	}


267 def 
	$mapped
( 
self
, 
widget
, 
event
) : 

268 if 
self
. 
update_timeout
is None : 

269 
self
. 
update_timeout
= 
gobject
. 
	`timeout_add
( 1000 , 
self
. 
timeout
) 

271 
	}


271 def 
	$unmapped
( 
self
, 
widget
, 
event
) : 

272 if 
self
. 
update_timeout
is not None : 

273 
gobject
. 
	`source_remove
( 
self
. 
update_timeout
) 

274 
self
. 
update_timeout
= None 

276 
	}


276 def 
	$select_city
( 
self
, 
city
) : 

277 
self
. 
selected
= 
city


278 for 
loc
in 
self
. 
tzdb
. 
locations
: 

279 if 
loc
. 
zone
== 
city
: 

280 
offset
= ( 
loc
. 
raw_utc_offset
. 
days
* 24 ) + 

281 ( 
loc
. 
raw_utc_offset
. 
seconds
/ 60.0 / 60.0 ) 

282 
self
. 
selected_offset
= 
	`str
( 
offset
) 

283 
self
. 
	`queue_draw
( ) 

285 
	}


285 def 
	$button_press
( 
self
, 
widget
, 
event
) : 

286 
x
= 
	`int
( 
event
. 
x
) 

287 
y
= 
	`int
( 
event
. 
y
) 

289 
o
= None 

291 
pixels
= 
self
. 
visible_map_pixels


292 
rowstride
= 
self
. 
visible_map_rowstride


293 
c
= [ ] 

294 
c
. 
	`append
( 
	`ord
( 
pixels
[ ( 
rowstride
* 
y
+ 
x
* 4 ) ] ) ) 

295 
c
. 
	`append
( 
	`ord
( 
pixels
[ ( 
rowstride
* 
y
+ 
x
* 4 ) + 1 ] ) ) 

296 
c
. 
	`append
( 
	`ord
( 
pixels
[ ( 
rowstride
* 
y
+ 
x
* 4 ) + 2 ] ) ) 

297 
c
. 
	`append
( 
	`ord
( 
pixels
[ ( 
rowstride
* 
y
+ 
x
* 4 ) + 3 ] ) ) 

298 for 
offset
in 
color_codes
: 

299 if 
color_codes
[ 
offset
] == 
c
: 

300 
o
= 
offset


302 except 
IndexError
: 

304 if not 
o
: 

307 
self
. 
selected_offset
= 
o


310 if ( 
x
, 
y
) == 
self
. 
previous_click
and 
self
. 
distances
: 

311 
zone
= 
self
. 
distances
[ 
self
. 
dist_pos
] [ 1 ] . 
zone


312 
self
. 
dist_pos
= ( 
self
. 
dist_pos
+ 1 ) % 
	`len
( 
self
. 
distances
) 

314 
self
. 
distances
= [ ] 

315 
height
= 
self
. 
background
. 
	`get_height
( ) 

316 
width
= 
self
. 
background
. 
	`get_width
( ) 

317 for 
loc
in 
self
. 
tzdb
. 
locations
: 

318 
offset
= ( 
loc
. 
raw_utc_offset
. 
days
* 24 ) + 

319 ( 
loc
. 
raw_utc_offset
. 
seconds
/ 60.0 / 60.0 ) 

320 if 
	`str
( 
offset
) != 
self
. 
selected_offset
: 

322 
pointx
= 
	`convert_longitude_to_x
( 
loc
. 
longitude
, 
width
) 

323 
pointy
= 
	`convert_latitude_to_y
( 
loc
. 
latitude
, 
height
) 

324 
dx
= 
pointx
- 
x


325 
dy
= 
pointy
- 
y


326 
dist
= 
dx
* 
dx
+ 
dy
* 
dy


327 
self
. 
distances
. 
	`append
( ( 
dist
, 
loc
) ) 

328 
self
. 
distances
. 
	`sort
( ) 

333 
self
. 
previous_click
= ( 
x
, 
y
) 

334 
self
. 
dist_pos
= 0 

335 
zone
= 
self
. 
distances
[ 0 ] [ 1 ] . 
zone


336 
self
. 
	`emit
( 'city-selected' , 
zone
) 

337 
self
. 
	`queue_draw
( ) 

339 
	}


339 
gobject
. 
	`type_register
( 
TimezoneMap
) 

	@ubiquity/parted_server.py

23 import 
	~<os


24 import 
	~<shutil


26 
devices
= '/var/lib/partman/devices' 

27 
infifo
= '/var/lib/partman/infifo' 

28 
outfifo
= '/var/lib/partman/outfifo' 

29 
stopfifo
= '/var/lib/partman/stopfifo' 

30 
logfile
= '/var/log/partman' 

32 class 
	cPartedServerError
( 
Exception
) : 

42 def 
	$__init__
( 
self
, 
exctype
, 
parted_error
, 
options
) : 

43 
Exception
. 
	`__init__
( 
self
, 
exctype
, 
parted_error
, 
options
) 

44 
self
. 
exctype
= 
exctype


45 
self
. 
parted_error
= 
parted_error


46 
self
. 
options
= 
	`list
( 
options
) 

48 
	}


48 class 
	cPartedServer
( object ) : 

49 def 
	$__init__
( 
self
) : 

50 
self
. 
inf
= None 

51 
self
. 
outf
= None 

52 
self
. 
current_disk
= None 

54 
	}


54 def 
	$__del__
( 
self
) : 

55 if 
self
. 
inf
is not None or 
self
. 
outf
is not None : 

56 
self
. 
	`close_dialog
( ) 

58 
	}


58 def 
	$log
( 
self
, * 
args
) : 

59 
f
= 
	`open
( 
logfile
, 'a' ) 

60 print >> 
f
, ' ' . 
	`join
( 
args
) 

61 
f
. 
	`close
( ) 

63 
	}


63 def 
	$write_line
( 
self
, * 
args
) : 

64 
self
. 
	`log
( 'IN:' , * 
args
) 

65 
self
. 
inf
. 
	`write
( ' ' . 
	`join
( 
args
) + '\n' ) 

66 
self
. 
inf
. 
	`flush
( ) 

68 
	}


68 def 
	$read_line
( 
self
, 
count
= 0 ) : 

69 
line
= 
self
. 
outf
. 
	`readline
( ) . 
	`rstrip
( '\n' ) 

72 if 
count
== 0 : 

73 
ret
= [ '' ] 

75 
ret
= [ '' ] * 
count


76 
count
-= 1 

77 
pieces
= 
line
. 
	`split
( None , 
count
) 

78 
ret
[ 0 : 
	`len
( 
pieces
) ] = 
pieces


79 return 
ret


81 
	}


81 def 
	$read_paragraph
( 
self
) : 

82 
paragraph
= '' 

84 
line
= 
self
. 
	`read_line
( ) [ 0 ] 

85 if 
line
== '' : 

87 
self
. 
	`log
( 'paragraph: %s' % 
line
) 

88 
paragraph
+= 
line


89 
paragraph
+= '\n' 

90 return 
paragraph


92 
	}


92 def 
	$read_list
( 
self
) : 

93 
ret
= [ ] 

95 
item
= 
self
. 
	`read_line
( ) [ 0 ] 

96 if 
item
== '' : 

98 
self
. 
	`log
( 'option: %s' % 
item
) 

99 
ret
. 
	`append
( 
item
) 

100 return 
ret


105 
	}


105 def 
	$error_handler
( 
self
) : 

107 
exception_type
= 
self
. 
	`read_line
( ) [ 0 ] 

108 if 
exception_type
== 'OK' : 

110 
self
. 
	`log
( 'error_handler: exception with type %s' % 
exception_type
) 

111 if 
exception_type
== 'Timer' : 

113 ( 
frac
, 
state
) = 
self
. 
	`read_line
( 2 ) 

114 if 
frac
== 'ready' : 

117 
self
. 
	`log
( 'error_handler: reading message' ) 

118 
message
= 
self
. 
	`read_paragraph
( ) 

119 
self
. 
	`log
( 'error_handler: reading options' ) 

120 
options
= 
self
. 
	`read_list
( ) 

121 if ( 
exception_type
== 'Information' or 

122 
exception_type
== 'Warning' ) : 

125 raise 
	`PartedServerError
( 
exception_type
, 
message
, 
options
) 

127 
	}


127 def 
	$sync_server
( 
self
) : 

128 
	`open
( 
stopfifo
, 'w' ) . 
	`close
( ) 

130 
	}


130 def 
	$open_dialog
( 
self
, 
command
, * 
args
) : 

131 
self
. 
inf
= 
	`open
( 
infifo
, 'w' ) 

132 
self
. 
	`write_line
( 
command
, 
self
. 
current_disk
, * 
args
) 

133 
self
. 
outf
= 
	`open
( 
outfifo
, 'r' ) 

134 
self
. 
	`error_handler
( ) 

136 
	}


136 def 
	$close_dialog
( 
self
) : 

137 if 
self
. 
outf
is not None : 

138 
self
. 
outf
. 
	`close
( ) 

139 if 
self
. 
inf
is not None : 

140 
self
. 
inf
. 
	`close
( ) 

141 
self
. 
	`sync_server
( ) 

142 
	`open
( 
outfifo
, 'w' ) . 
	`close
( ) 

143 
self
. 
	`sync_server
( ) 

144 
self
. 
inf
= 
	`open
( 
infifo
, 'r' ) 

145 
self
. 
inf
. 
	`readlines
( ) 

146 
self
. 
inf
. 
	`close
( ) 

147 
self
. 
	`sync_server
( ) 

148 
self
. 
outf
= None 

149 
self
. 
inf
= None 

152 
	}


152 def 
	$disks
( 
self
) : 

153 
disks
= 
os
. 
	`listdir
( 
devices
) 

154 
disks
. 
	`sort
( ) 

155 return 
disks


159 
	}


159 def 
	$select_disk
( 
self
, 
disk
) : 

160 
self
. 
current_disk
= 
disk


162 
	}


162 def 
	$device_entry
( 
self
, 
name
) : 

163 return 
os
. 
path
. 
	`join
( 
devices
, 
self
. 
current_disk
, 
name
) 

165 
	}


165 def 
	$readline_device_entry
( 
self
, 
name
) : 

166 
entryfile
= 
	`open
( 
self
. 
	`device_entry
( 
name
) ) 

167 
line
= 
entryfile
. 
	`readline
( ) . 
	`rstrip
( '\n' ) 

168 
entryfile
. 
	`close
( ) 

169 return 
line


171 
	}


171 def 
	$part_entry
( 
self
, 
partition
, 
name
) : 

172 return 
os
. 
path
. 
	`join
( 
devices
, 
self
. 
current_disk
, 
partition
, 
name
) 

174 
	}


174 def 
	$has_part_entry
( 
self
, 
partition
, 
name
) : 

175 return 
os
. 
path
. 
	`isfile
( 
self
. 
	`part_entry
( 
partition
, 
name
) ) 

177 
	}


177 def 
	$readline_part_entry
( 
self
, 
partition
, 
name
) : 

178 
entryfile
= 
	`open
( 
self
. 
	`part_entry
( 
partition
, 
name
) ) 

179 
line
= 
entryfile
. 
	`readline
( ) . 
	`rstrip
( '\n' ) 

180 
entryfile
. 
	`close
( ) 

181 return 
line


183 
	}


183 def 
	$write_part_entry
( 
self
, 
partition
, 
name
, 
text
) : 

184 
entryfile
= 
	`open
( 
self
. 
	`part_entry
( 
partition
, 
name
) , 'w' ) 

185 
entryfile
. 
	`write
( 
text
) 

186 
entryfile
. 
	`close
( ) 

188 
	}


188 def 
	$remove_part_entry
( 
self
, 
partition
, 
name
) : 

189 
entry
= 
self
. 
	`part_entry
( 
partition
, 
name
) 

191 if 
os
. 
path
. 
	`isdir
( 
entry
) : 

192 
shutil
. 
	`rmtree
( 
entry
) 

194 
os
. 
	`unlink
( 
entry
) 

195 except 
OSError
: 

198 
	}


198 def 
	$mkdir_part_entry
( 
self
, 
partition
, 
name
) : 

199 
entry
= 
self
. 
	`part_entry
( 
partition
, 
name
) 

200 if not 
os
. 
path
. 
	`isdir
( 
entry
) : 

201 
os
. 
	`mkdir
( 
entry
) 

203 
	}


203 def 
	$partitions
( 
self
) : 

204 
partitions
= [ ] 

205 
self
. 
	`open_dialog
( 'PARTITIONS' ) 

207 ( 
p_num
, 
p_id
, 
p_size
, 
p_type
, 

208 
p_fs
, 
p_path
, 
p_name
) = 
self
. 
	`read_line
( 7 ) 

209 if 
p_id
== '' : 

211 
partitions
. 
	`append
( ( 
p_num
, 
p_id
, 
p_size
, 
p_type
, 

212 
p_fs
, 
p_path
, 
p_name
) ) 

213 
self
. 
	`close_dialog
( ) 

214 return 
partitions


216 
	}


216 def 
	$partition_info
( 
self
, 
partition
) : 

217 
self
. 
	`open_dialog
( 'PARTITION_INFO' , 
partition
) 

218 ( 
p_num
, 
p_id
, 
p_size
, 
p_type
, 
p_fs
, 
p_path
, 
p_name
) = 
self
. 
	`read_line
( 7 ) 

219 
self
. 
	`close_dialog
( ) 

220 if 
p_id
== '' : 

222 return ( 
p_num
, 
p_id
, 
p_size
, 
p_type
, 
p_fs
, 
p_path
, 
p_name
) 

222 
	}


	@ubiquity/osextras.py

23 import 
	~<os


25 def 
	$_resolve_link_root
( 
root
, 
path
) : 

27 
paths_seen
= 
	`set
( ) 

28 
fullpath
= 
os
. 
path
. 
	`join
( 
root
, 
path
[ 1 : ] ) 

29 while 
os
. 
path
. 
	`islink
( 
fullpath
) : 

30 if 
path
in 
paths_seen
: 

33 
paths_seen
. 
	`add
( 
path
) 

35 
resolved
= 
os
. 
	`readlink
( 
fullpath
) 

36 if not 
os
. 
path
. 
	`isabs
( 
resolved
) : 

37 
dir
= 
os
. 
path
. 
	`dirname
( 
path
) 

38 
path
= 
os
. 
path
. 
	`normpath
( 
os
. 
path
. 
	`join
( 
dir
, 
resolved
) ) 

40 
path
= 
os
. 
path
. 
	`normpath
( 
resolved
) 

41 
fullpath
= 
os
. 
path
. 
	`join
( 
root
, 
path
[ 1 : ] ) 

42 return 
path


44 
	}


44 def 
	$_realpath_root_recurse
( 
root
, 
filename
) : 

46 
bits
= [ '/' ] + 
filename
. 
	`split
( '/' ) [ 1 : ] 

48 for 
i
in 
	`range
( 2 , 
	`len
( 
bits
) + 1 ) : 

49 
component
= 
os
. 
path
. 
	`join
( * 
bits
[ 0 : 
i
] ) 

50 
fullcomponent
= 
os
. 
path
. 
	`join
( 
root
, 
component
[ 1 : ] ) 

52 if 
os
. 
path
. 
	`islink
( 
fullcomponent
) : 

53 
resolved
= 
	`_resolve_link_root
( 
root
, 
component
) 

54 if 
resolved
is None : 

57 return 
os
. 
path
. 
	`abspath
( 
os
. 
path
. 
	`join
( 
component
, * 
bits
[ 
i
: ] ) ) 

59 
newpath
= 
os
. 
path
. 
	`join
( 
resolved
, * 
bits
[ 
i
: ] ) 

60 return 
	`_realpath_root_recurse
( 
root
, 
newpath
) 

62 return 
os
. 
path
. 
	`abspath
( 
filename
) 

64 
	}


64 def 
	$realpath_root
( 
root
, 
filename
) : 

67 
chrooted_filename
= 
	`_realpath_root_recurse
( 
root
, 
filename
) 

68 if 
chrooted_filename
. 
	`startswith
( '/' ) : 

69 
chrooted_filename
= 
chrooted_filename
[ 1 : ] 

70 return 
os
. 
path
. 
	`join
( 
root
, 
chrooted_filename
) 

73 
	}


73 def 
	$find_on_path_root
( 
root
, 
command
) : 

75 if 'PATH' not in 
os
. 
environ
: 

77 
path
= 
os
. 
environ
[ 'PATH' ] 

78 for 
element
in 
path
. 
	`split
( 
os
. 
pathsep
) : 

79 if not 
element
: 

81 
filename
= 
	`realpath_root
( 
root
, 
os
. 
path
. 
	`join
( 
element
, 
command
) ) 

82 if 
os
. 
path
. 
	`isfile
( 
filename
) and 
os
. 
	`access
( 
filename
, 
os
. 
X_OK
) : 

87 
	}


87 def 
	$find_on_path
( 
command
) : 

89 if 'PATH' not in 
os
. 
environ
: 

91 
path
= 
os
. 
environ
[ 'PATH' ] 

92 for 
element
in 
path
. 
	`split
( 
os
. 
pathsep
) : 

93 if not 
element
: 

95 
filename
= 
os
. 
path
. 
	`join
( 
element
, 
command
) 

96 if 
os
. 
path
. 
	`isfile
( 
filename
) and 
os
. 
	`access
( 
filename
, 
os
. 
X_OK
) : 

98 return False 

98 
	}


	@ubiquity/segmented_bar.py

33 import 
	~<gobject


34 from 
gtk
import 
	~<gdk


35 import 
	~<gtk


36 import 
	~<math


37 import 
	~<cairo


38 import 
	~<pango


39 import 
	~<pangocairo


40 from 
ubiquity
. 
misc
import 
	~<format_size


41 from 
ubiquity
. 
misc
import 
	~<find_in_os_prober


43 class 
	cColor
: 

44 def 
	$__init__
( 
self
, 
r
, 
g
, 
b
, 
a
= 1.0 ) : 

45 
self
. 
r
= 
r


46 
self
. 
g
= 
g


47 
self
. 
b
= 
b


48 
self
. 
a
= 
a


50 
	}


50 class 
	cCairoCorners
: 

51 
none
= 0 

52 
top_left
= 1 

53 
top_right
= 2 

54 
bottom_left
= 4 

55 
bottom_right
= 8 

56 
all
= 15 

58 class 
	cCairoExtensions
: 

59 @ 
staticmethod


60 def 
	$modula
( 
number
, 
divisor
) : 

61 return 
	`int
( ( 
number
% 
divisor
) + ( 
number
- 
	`int
( 
number
) ) ) 

63 
	}


63 @ 
staticmethod


64 def 
	$gdk_color_to_cairo_color
( 
color
, 
alpha
= 1.0 ) : 

65 return 
	`Color
( ( 
color
. 
red
>> 8 ) / 255.0 , 

66 ( 
color
. 
green
>> 8 ) / 255.0 , 

67 ( 
color
. 
blue
>> 8 ) / 255.0 , 

68 
alpha
) 

70 
	}


70 @ 
staticmethod


71 def 
	$color_from_hsb
( 
hue
, 
saturation
, 
brightness
) : 

72 
hue_shift
= [ 0 , 0 , 0 ] 

73 
color_shift
= [ 0 , 0 , 0 ] 

74 if 
brightness
<= 0.5 : 

75 
m2
= 
brightness
* ( 1 + 
saturation
) 

77 
m2
= 
brightness
+ 
saturation
- 
brightness
* 
saturation


78 
m1
= 2 * 
brightness
- 
m2


79 
hue_shift
[ 0 ] = 
hue
+ 120 

80 
hue_shift
[ 1 ] = 
hue


81 
hue_shift
[ 2 ] = 
hue
- 120 

82 
color_shift
[ 0 ] = 
brightness


83 
color_shift
[ 1 ] = 
brightness


84 
color_shift
[ 2 ] = 
brightness


85 if 
saturation
== 0 : 

86 
i
= 3 

88 
i
= 0 

89 while 
i
< 3 : 

90 
m3
= 
hue_shift
[ 
i
] 

91 if 
m3
> 360 : 

92 
m3
= 
CairoExtensions
. 
	`modula
( 
m3
, 360 ) 

93 elif 
m3
< 0 : 

94 
m3
= 360 - 
CairoExtensions
. 
	`modula
( 
	`abs
( 
m3
) , 360 ) 

96 if 
m3
< 60 : 

97 
color_shift
[ 
i
] = 
m1
+ ( 
m2
- 
m1
) * 
m3
/ 60 

98 elif 
m3
< 180 : 

99 
color_shift
[ 
i
] = 
m2


100 elif 
m3
< 240 : 

101 
color_shift
[ 
i
] = 
m1
+ ( 
m2
- 
m1
) * ( 240 - 
m3
) / 60 

103 
color_shift
[ 
i
] = 
m1


104 
i
= 
i
+ 1 

106 return 
	`Color
( 
color_shift
[ 0 ] , 
color_shift
[ 1 ] , 
color_shift
[ 2 ] ) 

108 
	}


108 @ 
staticmethod


109 def 
	$hsb_from_color
( 
color
) : 

110 
red
= 
color
. 
r


111 
green
= 
color
. 
g


112 
blue
= 
color
. 
b


113 
hue
= 0 

114 
saturation
= 0 

115 
brightness
= 0 

117 if 
red
> 
green
: 

118 
ma
= 
	`max
( 
red
, 
blue
) 

119 
mi
= 
	`min
( 
green
, 
blue
) 

121 
ma
= 
	`max
( 
green
, 
blue
) 

122 
mi
= 
	`min
( 
red
, 
blue
) 

124 
brightness
= ( 
ma
+ 
mi
) / 2 

126 if 
	`abs
( 
ma
- 
mi
) < 0.0001 : 

127 
hue
= 0 

128 
saturation
= 0 

130 if 
brightness
<= 0.5 : 

131 
saturation
= ( 
ma
- 
mi
) / ( 
ma
+ 
mi
) 

133 
saturation
= ( 
ma
- 
mi
) / ( 2 - 
ma
- 
mi
) 

134 
delta
= 
ma
- 
mi


135 if 
red
== 
max
: 

136 
hue
= ( 
green
- 
blue
) / 
delta


137 elif 
green
== 
max
: 

138 
hue
= 2 + ( 
blue
- 
red
) / 
delta


139 elif 
blue
== 
max
: 

140 
hue
= 4 + ( 
red
- 
green
) / 
delta


141 
hue
= 
hue
* 60 

142 if 
hue
< 0 : 

143 
hue
= 
hue
+ 360 

144 return ( 
hue
, 
saturation
, 
brightness
) 

146 
	}


146 @ 
staticmethod


147 def 
	$color_shade
( 
color
, 
ratio
) : 

150 return 
color


151 
h
, 
s
, 
b
= 
CairoExtensions
. 
	`hsb_from_color
( 
color
) 

152 
b
= 
	`max
( 
	`min
( 
b
* 
ratio
, 1 ) , 0 ) 

153 
s
= 
	`max
( 
	`min
( 
s
* 
ratio
, 1 ) , 0 ) 

154 
c
= 
CairoExtensions
. 
	`color_from_hsb
( 
h
, 
s
, 
b
) 

155 
c
. 
a
= 
color
. 
a


156 return 
c


158 
	}


158 @ 
staticmethod


159 def 
	$rgba_to_color
( 
color
) : 

162 
a
= ( ( 
color
>> 24 ) & 0xff ) / 255.0 

163 
b
= ( ( 
color
>> 16 ) & 0xff ) / 255.0 

164 
c
= ( ( 
color
>> 8 ) & 0xff ) / 255.0 

165 
d
= ( 
color
& 0x000000ff ) / 255.0 

166 return 
	`Color
( 
a
, 
b
, 
c
, 
d
) 

168 
	}


168 @ 
staticmethod


169 def 
	$rgb_to_color
( 
color
) : 

172 
r
, 
g
, 
b
= 
color
[ : 2 ] , 
color
[ 2 : 4 ] , 
color
[ 4 : ] 

173 
r
, 
g
, 
b
= [ ( 
	`int
( 
n
, 16 ) / 255.0 ) for 
n
in ( 
r
, 
g
, 
b
) ] 

174 return 
	`Color
( 
r
, 
g
, 
b
) 

177 
	}


177 @ 
staticmethod


178 def 
	$rounded_rectangle
( 
cr
, 
x
, 
y
, 
w
, 
h
, 
r
, 
corners
= 
CairoCorners
. 
all
, 
top_bottom_falls_through
= False ) : 

179 if 
top_bottom_falls_through
and 
corners
== 
CairoCorners
. 
none
: 

180 
cr
. 
	`move_to
( 
x
, 
y
- 
r
) 

181 
cr
. 
	`line_to
( 
x
, 
y
+ 
h
+ 
r
) 

182 
cr
. 
	`move_to
( 
x
+ 
w
, 
y
- 
r
) 

183 
cr
. 
	`line_to
( 
x
+ 
w
, 
y
+ 
h
+ 
r
) 

184 elif 
r
< 0.0001 or 
corners
== 
CairoCorners
. 
none
: 

185 
cr
. 
	`rectangle
( 
x
, 
y
, 
w
, 
h
) 

187 if ( 
corners
& ( 
CairoCorners
. 
top_left
| 
CairoCorners
. 
top_right
) ) == 0 and 
top_bottom_falls_through
: 

188 
y
= 
y
- 
r


189 
h
= 
h
+ 
r


190 
cr
. 
	`move_to
( 
x
+ 
w
, 
y
) 

192 if ( 
corners
& 
CairoCorners
. 
top_left
) != 0 : 

193 
cr
. 
	`move_to
( 
x
+ 
r
, 
y
) 

195 
cr
. 
	`move_to
( 
x
, 
y
) 

197 if ( 
corners
& 
CairoCorners
. 
top_right
) != 0 : 

198 
cr
. 
	`arc
( 
x
+ 
w
- 
r
, 
y
+ 
r
, 
r
, 
math
. 
pi
* 1.5 , 
math
. 
pi
* 2 ) 

200 
cr
. 
	`line_to
( 
x
+ 
w
, 
y
) 

202 if ( 
corners
& ( 
CairoCorners
. 
bottom_left
| 
CairoCorners
. 
bottom_right
) ) == 0 and 
top_bottom_falls_through
: 

203 
h
= 
h
+ 
r


204 
cr
. 
	`line_to
( 
x
+ 
w
, 
y
+ 
h
) 

205 
cr
. 
	`move_to
( 
x
, 
y
+ 
h
) 

206 
cr
. 
	`line_to
( 
x
, 
y
+ 
r
) 

207 
cr
. 
	`arc
( 
x
+ 
r
, 
y
+ 
r
, 
r
, 
math
. 
pi
, 
math
. 
pi
* 1.5 ) 

209 if ( 
corners
& 
CairoCorners
. 
bottom_right
) != 0 : 

210 
cr
. 
	`arc
( 
x
+ 
w
- 
r
, 
y
+ 
h
- 
r
, 
r
, 0 , 
math
. 
pi
* 0.5 ) 

212 
cr
. 
	`line_to
( 
x
+ 
w
, 
y
+ 
h
) 

214 if ( 
corners
& 
CairoCorners
. 
bottom_left
) != 0 : 

215 
cr
. 
	`arc
( 
x
+ 
r
, 
y
+ 
h
- 
r
, 
r
, 
math
. 
pi
* 0.5 , 
math
. 
pi
) 

217 
cr
. 
	`line_to
( 
x
, 
y
+ 
h
) 

219 if ( 
corners
& 
CairoCorners
. 
top_left
) != 0 : 

220 
cr
. 
	`arc
( 
x
+ 
r
, 
y
+ 
r
, 
r
, 
math
. 
pi
, 
math
. 
pi
* 1.5 ) 

222 
cr
. 
	`line_to
( 
x
, 
y
) 

224 
	}


224 class 
	cSegmentedBar
( 
gtk
. 
Widget
) : 

225 
__gtype_name__
= 'SegmentedBar' 

226 def 
	$__init__
( 
self
) : 

227 
gtk
. 
Widget
. 
	`__init__
( 
self
) 

230 
self
. 
segments
= [ ] 

231 
self
. 
layout_width
= 0 

232 
self
. 
layout_height
= 0 

235 
self
. 
bar_height
= 26 

236 
self
. 
bar_label_spacing
= 8 

237 
self
. 
segment_label_spacing
= 16 

238 
self
. 
segment_box_size
= 12 

239 
self
. 
segment_box_spacing
= 6 

240 
self
. 
h_padding
= 0 

242 
self
. 
show_labels
= True 

243 
self
. 
reflect
= True 

244 
self
. 
remainder_color
= 'eeeeee' 

246 
self
. 
disk_size
= 0 

248 
	}


248 def 
	$add_segment
( 
self
, 
title
, 
size
, 
color
, 
show_in_bar
= True ) : 

249 
self
. 
	`do_size_allocate
( 
self
. 
	`get_allocation
( ) ) 

250 
self
. 
disk_size
+= 
size


251 
self
. 
segments
. 
	`append
( 
self
. 
	`Segment
( 
title
, 
size
, 
color
, 
show_in_bar
) ) 

252 
self
. 
	`queue_draw
( ) 

254 
	}


254 def 
	$remove_segment
( 
self
, 
title
) : 

256 for 
segment
in 
self
. 
segments
: 

257 if 
segment
. 
title
== 
title
: 

258 
self
. 
segments
. 
	`remove
( 
segment
) 

259 
self
. 
disk_size
-= 
size


260 
self
. 
	`queue_draw
( ) 

263 
	}


263 def 
	$remove_all
( 
self
) : 

264 
self
. 
segments
= [ ] 

265 
self
. 
disk_size
= 0 

266 
self
. 
	`queue_draw
( ) 

268 
	}


268 def 
	$add_segment_rgb
( 
self
, 
title
, 
size
, 
rgb_color
) : 

269 
self
. 
	`add_segment
( 
title
, 
size
, 
CairoExtensions
. 
	`rgb_to_color
( 
rgb_color
) ) 

271 
	}


271 def 
	$do_size_request
( 
self
, 
requisition
) : 

272 
requisition
. 
width
= 200 

273 
requisition
. 
height
= 0 

275 
	}


275 def 
	$do_realize
( 
self
) : 

276 
self
. 
	`set_flags
( 
self
. 
	`flags
( ) | 
gtk
. 
REALIZED
) 

277 
self
. 
window
= 
gdk
. 
	`Window
( 

278 
self
. 
	`get_parent_window
( ) , 

279 
width
= 
self
. 
allocation
. 
width
, 

280 
height
= 
self
. 
allocation
. 
height
, 

281 
window_type
= 
gdk
. 
WINDOW_CHILD
, 

282 
wclass
= 
gdk
. 
INPUT_OUTPUT
, 

283 
event_mask
= 
self
. 
	`get_events
( ) | 

284 
gdk
. 
EXPOSURE_MASK
) 

285 
self
. 
window
. 
	`set_user_data
( 
self
) 

286 
self
. 
style
. 
	`attach
( 
self
. 
window
) 

287 
self
. 
style
. 
	`set_background
( 
self
. 
window
, 
gtk
. 
STATE_NORMAL
) 

288 
self
. 
window
. 
	`move_resize
( * 
self
. 
allocation
) 

297 
	}


297 def 
	$compute_layout_size
( 
self
) : 

298 
layout
= None 

299 
self
. 
layout_height
= 0 

300 
self
. 
layout_width
= 0 

302 for 
i
in 
	`range
( 
	`len
( 
self
. 
segments
) ) : 

303 
layout
= 
self
. 
	`create_adapt_layout
( 
layout
, False , True ) 

304 
title
= 
self
. 
segments
[ 
i
] . 
title


305 
layout
. 
	`set_text
( 
title
) 

306 
aw
, 
ah
= 
layout
. 
	`get_pixel_size
( ) 

308 
layout
= 
self
. 
	`create_adapt_layout
( 
layout
, True , False ) 

309 
layout
. 
	`set_text
( 
self
. 
segments
[ 
i
] . 
subtitle
) 

310 
bw
, 
bh
= 
layout
. 
	`get_pixel_size
( ) 

312 
w
= 
	`max
( 
aw
, 
bw
) 

313 
h
= 
ah
+ 
bh


315 
self
. 
segments
[ 
i
] . 
layout_width
= 
w


316 
self
. 
segments
[ 
i
] . 
layout_height
= 
	`max
( 
h
, 
self
. 
segment_box_size
* 2 ) 

318 if 
i
< ( 
	`len
( 
self
. 
segments
) - 1 ) : 

319 
self
. 
layout_width
= 
self
. 
layout_width
+ 

320 
self
. 
segments
[ 
i
] . 
layout_width
+ 
self
. 
segment_box_size
+ 

321 
self
. 
segment_box_spacing
+ 
self
. 
segment_label_spacing


323 
self
. 
layout_width
= 
self
. 
layout_width
+ 

324 
self
. 
segments
[ 
i
] . 
layout_width
+ 
self
. 
segment_box_size
+ 

325 
self
. 
segment_box_spacing
+ 0 

326 
self
. 
layout_height
= 
	`max
( 
self
. 
layout_height
, 
self
. 
segments
[ 
i
] . 
layout_height
) 

328 
	}


328 def 
	$do_size_allocate
( 
self
, 
allocation
) : 

329 if 
self
. 
reflect
: 

330 
bar_height
= 
	`int
( 
math
. 
	`ceil
( 
self
. 
bar_height
* 1.75 ) ) 

332 
bar_height
= 
self
. 
bar_height


334 if 
self
. 
show_labels
: 

335 
self
. 
	`compute_layout_size
( ) 

336 
h
= 
	`max
( 
self
. 
bar_height
+ 
self
. 
bar_label_spacing
+ 
self
. 
layout_height
, 
bar_height
) 

337 
w
= 
self
. 
layout_width
+ ( 2 * 
self
. 
h_padding
) 

338 
self
. 
	`set_size_request
( 
w
, 
h
) 

340 
self
. 
	`set_size_request
( 
bar_height
, 
self
. 
bar_height
+ ( 2 * 
self
. 
h_padding
) ) 

341 
gtk
. 
Widget
. 
	`do_size_allocate
( 
self
, 
allocation
) 

343 
	}


343 def 
	$render_bar_segments
( 
self
, 
cr
, 
w
, 
h
, 
r
) : 

344 
grad
= 
cairo
. 
	`LinearGradient
( 0 , 0 , 
w
, 0 ) 

345 
last
= 0.0 

347 for 
segment
in 
self
. 
segments
: 

348 
percent
= 
segment
. 
size
/ 
	`float
( 
self
. 
disk_size
) 

349 if 
percent
> 0 : 

350 
grad
. 
	`add_color_stop_rgb
( 
last
, 
segment
. 
color
. 
r
, 
segment
. 
color
. 
g
, 
segment
. 
color
. 
b
) 

351 
last
= 
last
+ 
percent


352 
grad
. 
	`add_color_stop_rgb
( 
last
, 
segment
. 
color
. 
r
, 
segment
. 
color
. 
g
, 
segment
. 
color
. 
b
) 

354 
CairoExtensions
. 
	`rounded_rectangle
( 
cr
, 0 , 0 , 
w
, 
h
, 
r
, 
corners
= 
CairoCorners
. 
none
) 

355 
cr
. 
	`set_source
( 
grad
) 

356 
cr
. 
	`fill_preserve
( ) 

358 
grad
= 
cairo
. 
	`LinearGradient
( 0 , 0 , 0 , 
h
) 

359 
grad
. 
	`add_color_stop_rgba
( 0.0 , 1 , 1 , 1 , 0.125 ) 

360 
grad
. 
	`add_color_stop_rgba
( 0.35 , 1 , 1 , 1 , 0.255 ) 

361 
grad
. 
	`add_color_stop_rgba
( 1 , 0 , 0 , 0 , 0.4 ) 

363 
cr
. 
	`set_source
( 
grad
) 

364 
cr
. 
	`fill
( ) 

366 
	}


366 def 
	$make_segment_gradient
( 
self
, 
h
, 
color
, 
diag
= False ) : 

367 
grad
= 
cairo
. 
	`LinearGradient
( 0 , 0 , 0 , 
h
) 

368 
c
= 
CairoExtensions
. 
	`color_shade
( 
color
, 1.1 ) 

369 
grad
. 
	`add_color_stop_rgba
( 0.0 , 
c
. 
r
, 
c
. 
g
, 
c
. 
b
, 
c
. 
a
) 

370 
c
= 
CairoExtensions
. 
	`color_shade
( 
color
, 1.2 ) 

371 
grad
. 
	`add_color_stop_rgba
( 0.35 , 
c
. 
r
, 
c
. 
g
, 
c
. 
b
, 
c
. 
a
) 

372 
c
= 
CairoExtensions
. 
	`color_shade
( 
color
, 0.8 ) 

373 
grad
. 
	`add_color_stop_rgba
( 1 , 
c
. 
r
, 
c
. 
g
, 
c
. 
b
, 
c
. 
a
) 

374 return 
grad


376 
	}


376 def 
	$render_bar_strokes
( 
self
, 
cr
, 
w
, 
h
, 
r
) : 

377 
stroke
= 
self
. 
	`make_segment_gradient
( 
h
, 
CairoExtensions
. 
	`rgba_to_color
( 0x00000040 ) ) 

378 
seg_sep_light
= 
self
. 
	`make_segment_gradient
( 
h
, 
CairoExtensions
. 
	`rgba_to_color
( 0xffffff20 ) ) 

379 
seg_sep_dark
= 
self
. 
	`make_segment_gradient
( 
h
, 
CairoExtensions
. 
	`rgba_to_color
( 0x00000020 ) ) 

381 
cr
. 
	`set_line_width
( 1 ) 

382 
seg_w
= 20 

383 if 
seg_w
> 
r
: 

384 
x
= 
seg_w


386 
x
= 
r


388 while 
x
<= 
w
- 
r
: 

389 
cr
. 
	`move_to
( 
x
- 0.5 , 1 ) 

390 
cr
. 
	`line_to
( 
x
- 0.5 , 
h
- 1 ) 

391 
cr
. 
	`set_source
( 
seg_sep_light
) 

392 
cr
. 
	`stroke
( ) 

394 
cr
. 
	`move_to
( 
x
+ 0.5 , 1 ) 

395 
cr
. 
	`line_to
( 
x
+ 0.5 , 
h
- 1 ) 

396 
cr
. 
	`set_source
( 
seg_sep_dark
) 

397 
cr
. 
	`stroke
( ) 

398 
x
= 
x
+ 
seg_w


400 
CairoExtensions
. 
	`rounded_rectangle
( 
cr
, 0.5 , 0.5 , 
w
- 1 , 
h
- 1 , 
r
, 
corners
= 
CairoCorners
. 
none
) 

401 
cr
. 
	`set_source
( 
stroke
) 

402 
cr
. 
	`stroke
( ) 

404 
	}


404 def 
	$render_labels
( 
self
, 
cr
) : 

405 if 
	`len
( 
self
. 
segments
) == 0 : 

407 
text_color
= 
CairoExtensions
. 
	`gdk_color_to_cairo_color
( 
self
. 
	`get_style
( ) . 
fg
[ 
self
. 
state
] ) 

408 
box_stroke_color
= 
	`Color
( 0 , 0 , 0 , 0.6 ) 

409 
x
= 0 

410 
layout
= None 

412 for 
segment
in 
self
. 
segments
: 

413 
cr
. 
	`set_line_width
( 1 ) 

414 
cr
. 
	`rectangle
( 
x
+ 0.5 , 2 + 0.5 , 
self
. 
segment_box_size
- 1 , 
self
. 
segment_box_size
- 1 ) 

415 
grad
= 
self
. 
	`make_segment_gradient
( 
self
. 
segment_box_size
, 
segment
. 
color
, True ) 

416 
cr
. 
	`set_source
( 
grad
) 

417 
cr
. 
	`fill_preserve
( ) 

418 
cr
. 
	`set_source_rgba
( 
box_stroke_color
. 
r
, 
box_stroke_color
. 
g
, 
box_stroke_color
. 
b
, 
box_stroke_color
. 
a
) 

419 
cr
. 
	`stroke
( ) 

421 
x
= 
x
+ 
self
. 
segment_box_size
+ 
self
. 
segment_box_spacing


423 
layout
= 
self
. 
	`create_adapt_layout
( 
layout
, False , True ) 

424 
layout
. 
	`set_text
( 
segment
. 
title
) 

425 ( 
lw
, 
lh
) = 
layout
. 
	`get_pixel_size
( ) 

427 
cr
. 
	`move_to
( 
x
, 0 ) 

428 
text_color
. 
a
= 0.9 

429 
cr
. 
	`set_source_rgba
( 
text_color
. 
r
, 
text_color
. 
g
, 
text_color
. 
b
, 
text_color
. 
a
) 

430 
pc
= 
pangocairo
. 
	`CairoContext
( 
cr
) 

431 
pc
. 
	`show_layout
( 
layout
) 

432 
cr
. 
	`fill
( ) 

434 
layout
= 
self
. 
	`create_adapt_layout
( 
layout
, True , False ) 

435 
layout
. 
	`set_text
( 
segment
. 
subtitle
) 

437 
cr
. 
	`move_to
( 
x
, 
lh
) 

438 
text_color
. 
a
= 0.75 

439 
cr
. 
	`set_source_rgba
( 
text_color
. 
r
, 
text_color
. 
g
, 
text_color
. 
b
, 
text_color
. 
a
) 

440 
pc
= 
pangocairo
. 
	`CairoContext
( 
cr
) 

441 
pc
. 
	`show_layout
( 
layout
) 

442 
cr
. 
	`fill
( ) 

443 
x
= 
x
+ 
segment
. 
layout_width
+ 
self
. 
segment_label_spacing


445 
	}


445 def 
	$render_bar
( 
self
, 
w
, 
h
) : 

446 
s
= 
cairo
. 
	`ImageSurface
( 
cairo
. 
FORMAT_ARGB32
, 
w
, 
h
) 

447 
cr
= 
cairo
. 
	`Context
( 
s
) 

448 
self
. 
	`render_bar_segments
( 
cr
, 
w
, 
h
, 
h
/ 2 ) 

449 
self
. 
	`render_bar_strokes
( 
cr
, 
w
, 
h
, 
h
/ 2 ) 

450 
pattern
= 
cairo
. 
	`SurfacePattern
( 
s
) 

451 return 
pattern


453 
	}


453 def 
	$do_expose_event
( 
self
, 
event
) : 

454 if not 
	`isinstance
( 
event
. 
window
, 
gdk
. 
Window
) : 

459 return 
gtk
. 
Widget
. 
	`do_expose_event
( 
self
, 
event
) 

461 
cr
= 
self
. 
window
. 
	`cairo_create
( ) 

462 if 
self
. 
reflect
: 

463 
cr
. 
	`push_group
( ) 

464 
cr
. 
	`set_operator
( 
cairo
. 
OPERATOR_OVER
) 

465 
cr
. 
	`translate
( 
self
. 
allocation
. 
x
+ 
self
. 
h_padding
, 
self
. 
allocation
. 
y
) 

466 
cr
. 
	`rectangle
( 0 , 0 , 
self
. 
allocation
. 
width
- 
self
. 
h_padding
, 

467 
	`max
( 2 * 
self
. 
bar_height
, 

468 
self
. 
bar_height
+ 
self
. 
bar_label_spacing
+ 
self
. 
layout_height
) ) 

469 
cr
. 
	`clip
( ) 

471 
bar
= 
self
. 
	`render_bar
( 
self
. 
allocation
. 
width
- 2 * 
self
. 
h_padding
, 

472 
self
. 
bar_height
) 

474 
cr
. 
	`save
( ) 

475 
cr
. 
	`set_source
( 
bar
) 

476 
cr
. 
	`paint
( ) 

477 
cr
. 
	`restore
( ) 

479 if 
self
. 
reflect
: 

480 
cr
. 
	`save
( ) 

481 
cr
. 
	`rectangle
( 0 , 
self
. 
bar_height
, 
self
. 
allocation
. 
width
- 
self
. 
h_padding
, 
self
. 
bar_height
) 

482 
cr
. 
	`clip
( ) 

483 
matrix
= 
cairo
. 
	`Matrix
( 
xx
= 1 , 
yy
= - 1 ) 

484 
matrix
. 
	`translate
( 0 , - ( 2 * 
self
. 
bar_height
) + 1 ) 

485 
cr
. 
	`transform
( 
matrix
) 

486 
cr
. 
	`set_source
( 
bar
) 

488 
mask
= 
cairo
. 
	`LinearGradient
( 0 , 0 , 0 , 
self
. 
bar_height
) 

489 
c
= 
	`Color
( 0 , 0 , 0 , 0 ) 

490 
mask
. 
	`add_color_stop_rgba
( 0.25 , 
c
. 
r
, 
c
. 
g
, 
c
. 
b
, 
c
. 
a
) 

491 
c
= 
	`Color
( 0 , 0 , 0 , 0.125 ) 

492 
mask
. 
	`add_color_stop_rgba
( 0.5 , 
c
. 
r
, 
c
. 
g
, 
c
. 
b
, 
c
. 
a
) 

493 
c
= 
	`Color
( 0 , 0 , 0 , 0.4 ) 

494 
mask
. 
	`add_color_stop_rgba
( 0.75 , 
c
. 
r
, 
c
. 
g
, 
c
. 
b
, 
c
. 
a
) 

495 
c
= 
	`Color
( 0 , 0 , 0 , 0.7 ) 

496 
mask
. 
	`add_color_stop_rgba
( 1.0 , 
c
. 
r
, 
c
. 
g
, 
c
. 
b
, 
c
. 
a
) 

498 
cr
. 
	`mask
( 
mask
) 

499 
cr
. 
	`restore
( ) 

500 
cr
. 
	`pop_group_to_source
( ) 

501 
cr
. 
	`paint
( ) 

502 if 
self
. 
show_labels
: 

503 if 
self
. 
reflect
: 

504 
cr
. 
	`translate
( 
self
. 
allocation
. 
x
+ ( 
self
. 
allocation
. 
width
- 

505 
self
. 
layout_width
) / 2 , 
self
. 
allocation
. 
y
+ 

506 
self
. 
bar_height
+ 
self
. 
bar_label_spacing
) 

508 
cr
. 
	`translate
( - 
self
. 
h_padding
+ ( 
self
. 
allocation
. 
width
- 

509 
self
. 
layout_width
) / 2 , 
self
. 
bar_height
+ 

510 
self
. 
bar_label_spacing
) 

511 
self
. 
	`render_labels
( 
cr
) 

515 
	}


515 
pango_size_normal
= 0 

516 def 
	$create_adapt_layout
( 
self
, 
layout
, 
small
, 
bold
) : 

520 if not 
layout
: 

521 
context
= 
self
. 
	`create_pango_context
( ) 

522 
layout
= 
pango
. 
	`Layout
( 
context
) 

523 
fd
= 
layout
. 
	`get_context
( ) . 
	`get_font_description
( ) 

524 
self
. 
pango_size_normal
= 
fd
. 
	`get_size
( ) 

526 
fd
= 
layout
. 
	`get_context
( ) . 
	`get_font_description
( ) 

528 if 
small
: 

529 
fd
. 
	`set_size
( 
	`int
( 
fd
. 
	`get_size
( ) * 
pango
. 
SCALE_SMALL
) ) 

531 
fd
. 
	`set_size
( 
self
. 
pango_size_normal
) 

534 if 
bold
: 

535 
fd
. 
	`set_weight
( 
pango
. 
WEIGHT_BOLD
) 

537 
fd
. 
	`set_weight
( 
pango
. 
WEIGHT_NORMAL
) 

538 
layout
. 
	`context_changed
( ) 

539 return 
layout


541 
	}


541 class 
	cSegment
: 

542 def 
	$__init__
( 
self
, 
device
, 
size
, 
color
, 
show_in_bar
= True ) : 

543 
self
. 
device
= 
device


544 
self
. 
title
= '' 

545 if 
device
. 
	`startswith
( '/' ) : 

546 
self
. 
title
= 
	`find_in_os_prober
( 
device
) 

547 if 
self
. 
title
: 

548 
self
. 
title
= '%s (%s)' % ( 
self
. 
title
, 
device
) 

550 
self
. 
title
= 
device


551 
self
. 
	`set_size
( 
size
) 

552 
self
. 
color
= 
color


553 
self
. 
show_in_bar
= 
show_in_bar


555 
self
. 
layout_width
= 0 

556 
self
. 
layout_height
= 0 

558 
	}


558 def 
	$__eq__
( 
self
, 
obj
) : 

559 if 
self
. 
device
== 
obj
: 

564 
	}


564 def 
	$set_size
( 
self
, 
size
) : 

565 
self
. 
size
= 
size


566 if 
size
> 0 : 

567 
self
. 
subtitle
= 
	`format_size
( 
self
. 
size
) 

569 
self
. 
subtitle
= '' 

571 
	}


571 
gobject
. 
	`type_register
( 
SegmentedBar
) 

573 class 
	cSegmentedBarSlider
( 
SegmentedBar
) : 

574 
__gtype_name__
= 'SegmentedBarSlider' 

576 def 
	$__init__
( 
self
) : 

577 
SegmentedBar
. 
	`__init__
( 
self
) 

578 
self
. 
slider_size
= 16 

579 
self
. 
resize
= - 1 

580 
self
. 
device
= None 

581 
self
. 
	`connect
( 'motion-notify-event' , 
self
. 
motion_notify_event
) 

583 
self
. 
part_size
= 0 

585 
	}


585 def 
	$set_device
( 
self
, 
device
) : 

586 
self
. 
device
= 
device


588 
	}


588 def 
	$add_segment_rgb
( 
self
, 
title
, 
percent
, 
rgb_color
) : 

589 
SegmentedBar
. 
	`add_segment_rgb
( 
self
, 
title
, 
percent
, 
rgb_color
) 

590 
i
= 0 

591 for 
s
in 
self
. 
segments
: 

592 if 
self
. 
device
== 
s
: 

593 
self
. 
resize
= 
i


595 
i
= 
i
+ 1 

599 if 
self
. 
resize
!= - 1 and 
	`len
( 
self
. 
segments
) > 
self
. 
resize
+ 1 : 

600 
sum
= 
self
. 
segments
[ 
self
. 
resize
] . 
size
+ 
self
. 
segments
[ 
self
. 
resize
+ 1 ] . 
size


601 
midpoint
= ( 
self
. 
max_size
+ 
self
. 
min_size
) / 2 

602 
self
. 
segments
[ 
self
. 
resize
] . 
	`set_size
( 
midpoint
) 

603 
self
. 
segments
[ 
self
. 
resize
+ 1 ] . 
	`set_size
( 
sum
- 
midpoint
) 

604 
self
. 
	`queue_draw
( ) 

606 
	}


606 def 
	$motion_notify_event
( 
self
, 
widget
, 
event
) : 

607 if 
event
. 
is_hint
: 

608 
x
, 
y
, 
state
= 
event
. 
window
. 
	`get_pointer
( ) 

610 
x
= 
event
. 
x


611 
y
= 
event
. 
y


612 
state
= 
event
. 
state


614 if not ( 
state
& 
gtk
. 
gdk
. 
BUTTON1_MASK
) or 
self
. 
resize
== - 1 : 

617 
i
= 0 

618 
resize_part_start
= 0 

619 while 
i
< 
self
. 
resize
: 

620 
resize_part_start
+= 
self
. 
segments
[ 
i
] . 
size


621 
i
+= 1 

622 
sum
= 
self
. 
segments
[ 
self
. 
resize
] . 
size
+ 

623 
self
. 
segments
[ 
self
. 
resize
+ 1 ] . 
size


624 
b
= 
x
/ 
	`float
( 
self
. 
allocation
. 
width
- 
self
. 
h_padding
) 

627 if 
self
. 
min_size
!= - 1 : 

628 
a
= ( ( 
self
. 
min_size
+ 
resize_part_start
) / 

629 
	`float
( 
self
. 
disk_size
) ) 

630 if 
b
< 
a
: 

631 
self
. 
segments
[ 
self
. 
resize
] . 
	`set_size
( 
self
. 
min_size
) 

632 
self
. 
segments
[ 
self
. 
resize
+ 1 ] . 
	`set_size
( 
sum
- 
self
. 
min_size
) 

633 
self
. 
	`queue_draw
( ) 

640 if 
self
. 
max_size
!= - 1 : 

641 
a
= ( ( 
self
. 
max_size
+ 
resize_part_start
) / 

642 
	`float
( 
self
. 
disk_size
) ) 

643 if 
b
> 
a
: 

644 
self
. 
segments
[ 
self
. 
resize
] . 
	`set_size
( 
self
. 
max_size
) 

645 
self
. 
segments
[ 
self
. 
resize
+ 1 ] . 
	`set_size
( 
sum
- 
self
. 
max_size
) 

646 
self
. 
	`queue_draw
( ) 

652 
s
= ( 
b
- ( 
resize_part_start
/ 
	`float
( 
self
. 
disk_size
) ) ) * 
self
. 
disk_size


653 
self
. 
segments
[ 
self
. 
resize
] . 
	`set_size
( 
s
) 

654 
self
. 
segments
[ 
self
. 
resize
+ 1 ] . 
	`set_size
( 
sum
- 
s
) 

656 
self
. 
	`queue_draw
( ) 

658 
	}


658 def 
	$set_min
( 
self
, 
m
) : 

659 
self
. 
min_size
= 
m


661 
	}


661 def 
	$set_max
( 
self
, 
m
) : 

662 
self
. 
max_size
= 
m


664 
	}


664 def 
	$set_part_size
( 
self
, 
size
) : 

665 
self
. 
part_size
= 
size


667 
	}


667 def 
	$get_size
( 
self
) : 

668 return 
	`int
( 
self
. 
segments
[ 
self
. 
resize
] . 
size
) 

670 
	}


670 def 
	$do_realize
( 
self
) : 

671 
self
. 
	`set_flags
( 
self
. 
	`flags
( ) | 
gtk
. 
REALIZED
) 

672 
self
. 
window
= 
gdk
. 
	`Window
( 

673 
self
. 
	`get_parent_window
( ) , 

674 
width
= 
self
. 
allocation
. 
width
, 

675 
height
= 
self
. 
allocation
. 
height
, 

676 
window_type
= 
gdk
. 
WINDOW_CHILD
, 

677 
wclass
= 
gdk
. 
INPUT_OUTPUT
, 

678 
event_mask
= 
self
. 
	`get_events
( ) | 

679 
gdk
. 
EXPOSURE_MASK
| 

680 
gdk
. 
BUTTON1_MOTION_MASK
| 

681 
gdk
. 
BUTTON_PRESS_MASK
| 

682 
gdk
. 
POINTER_MOTION_MASK
| 

683 
gdk
. 
POINTER_MOTION_HINT_MASK
) 

684 
self
. 
window
. 
	`set_user_data
( 
self
) 

685 
self
. 
style
. 
	`attach
( 
self
. 
window
) 

686 
self
. 
style
. 
	`set_background
( 
self
. 
window
, 
gtk
. 
STATE_NORMAL
) 

687 
self
. 
window
. 
	`move_resize
( * 
self
. 
allocation
) 

689 
	}


689 def 
	$render_slider
( 
self
, 
cr
, 
w
, 
h
, 
r
) : 

690 
i
= 0 

691 
size
= 0.0 

692 while 
i
<= 
self
. 
resize
: 

693 
size
+= 
self
. 
segments
[ 
i
] . 
size


694 
i
+= 1 

695 
t
= 
size
/ 
	`float
( 
self
. 
disk_size
) 

696 
p
= ( 
t
* 
w
) - ( ( 
self
. 
slider_size
/ 
w
) / 2 ) 

698 
grad
= 
cairo
. 
	`LinearGradient
( 0 , 0 , 0 , 
h
) 

699 
c
= 
CairoExtensions
. 
	`rgb_to_color
( 'f4f1ef' ) 

700 
grad
. 
	`add_color_stop_rgb
( 0 , 
c
. 
r
, 
c
. 
g
, 
c
. 
b
) 

701 
c
= 
CairoExtensions
. 
	`rgb_to_color
( 'f2efec' ) 

702 
grad
. 
	`add_color_stop_rgb
( 0.5 , 
c
. 
r
, 
c
. 
g
, 
c
. 
b
) 

703 
c
= 
CairoExtensions
. 
	`rgb_to_color
( 'ece7e2' ) 

704 
grad
. 
	`add_color_stop_rgb
( 0.5 , 
c
. 
r
, 
c
. 
g
, 
c
. 
b
) 

705 
c
= 
CairoExtensions
. 
	`rgb_to_color
( 'e8e2dc' ) 

706 
grad
. 
	`add_color_stop_rgb
( 1 , 
c
. 
r
, 
c
. 
g
, 
c
. 
b
) 

707 
CairoExtensions
. 
	`rounded_rectangle
( 
cr
, 
p
- ( 
self
. 
slider_size
/ 2 ) , 0 , 

708 
self
. 
slider_size
, 
h
, 
r
/ 2 , 
corners
= 
CairoCorners
. 
all
) 

709 
cr
. 
	`set_source
( 
grad
) 

710 
cr
. 
	`fill_preserve
( ) 

711 
c
= 
CairoExtensions
. 
	`rgb_to_color
( '9f9890' ) 

712 
cr
. 
	`set_source_rgb
( 
c
. 
r
, 
c
. 
g
, 
c
. 
b
) 

713 
cr
. 
	`set_line_width
( 1 ) 

716 
cr
. 
	`move_to
( 
p
- 2 , ( 
h
/ 4 ) ) 

717 
cr
. 
	`line_to
( 
p
- 2 , 
h
- ( 
h
/ 4 ) ) 

718 
cr
. 
	`move_to
( 
p
+ 2 , ( 
h
/ 4 ) ) 

719 
cr
. 
	`line_to
( 
p
+ 2 , 
h
- ( 
h
/ 4 ) ) 

720 
cr
. 
	`stroke
( ) 

722 
	}


722 def 
	$render_bar
( 
self
, 
w
, 
h
) : 

723 
s
= 
cairo
. 
	`ImageSurface
( 
cairo
. 
FORMAT_ARGB32
, 
w
, 
h
) 

724 
cr
= 
cairo
. 
	`Context
( 
s
) 

725 
self
. 
	`render_bar_segments
( 
cr
, 
w
, 
h
, 
h
/ 2 ) 

726 
self
. 
	`render_bar_strokes
( 
cr
, 
w
, 
h
, 
h
/ 2 ) 

727 if 
self
. 
resize
!= - 1 : 

728 
self
. 
	`render_slider
( 
cr
, 
w
, 
h
, 
h
/ 2 ) 

729 
pattern
= 
cairo
. 
	`SurfacePattern
( 
s
) 

730 return 
pattern


732 
	}


732 
gobject
. 
	`type_register
( 
SegmentedBarSlider
) 

733 

	@ubiquity/gconftool.py

23 import 
	~<os


24 import 
	~<subprocess


26 from 
ubiquity
import 
	~<osextras


27 from 
ubiquity
import 
	~<misc


29 
_cached_gconftool_exists
= None 

30 def 
	$_gconftool_exists
( ) : 

31 global 
_cached_gconftool_exists


32 if 
_cached_gconftool_exists
is not None : 

33 return 
_cached_gconftool_exists


35 
_cached_gconftool_exists
= 
osextras
. 
	`find_on_path
( 'gconftool-2' ) 

36 return 
_cached_gconftool_exists


38 
	}


38 def 
	$_gconf_dir
( ) : 

39 if 'SUDO_USER' in 
os
. 
environ
: 

40 
d
= 
os
. 
path
. 
	`expanduser
( '~%s/.gconf' % 
os
. 
environ
[ 'SUDO_USER' ] ) 

42 
d
= 
os
. 
path
. 
	`expanduser
( '~/.gconf' ) 

43 return 'xml:readwrite:%s' % 
d


45 
	}


45 def 
	$get
( 
key
) : 

46 if not 
	`_gconftool_exists
( ) : 

49 
subp
= 
subprocess
. 
	`Popen
( [ 'gconftool-2' , '--config-source' , 
	`_gconf_dir
( ) , 

50 '--get' , 
key
] , 

51 
stdout
= 
subprocess
. 
PIPE
, 
stderr
= 
subprocess
. 
PIPE
, 

52 
preexec_fn
= 
misc
. 
drop_all_privileges
) 

53 return 
subp
. 
	`communicate
( ) [ 0 ] . 
	`rstrip
( '\n' ) 

55 
	}


55 def 
	$get_list
( 
key
) : 

56 if not 
	`_gconftool_exists
( ) : 

59 
gconf_dir
= 
	`_gconf_dir
( ) 

60 
subp
= 
subprocess
. 
	`Popen
( [ 'gconftool-2' , '--config-source' , 
gconf_dir
, 

61 '--get-list-size' , 
key
] , 

62 
stdout
= 
subprocess
. 
PIPE
, 
stderr
= 
subprocess
. 
PIPE
, 

63 
preexec_fn
= 
misc
. 
drop_all_privileges
) 

64 
size
= 
subp
. 
	`communicate
( ) [ 0 ] . 
	`rstrip
( '\n' ) 

66 
size
= 
	`int
( 
size
) 

67 except 
ValueError
: 

68 
size
= 0 

70 
elements
= [ ] 

71 for 
i
in 
	`range
( 
size
) : 

72 
subp
= 
subprocess
. 
	`Popen
( [ 'gconftool-2' , '--config-source' , 
gconf_dir
, 

73 '--get-list-element' , 
key
, 
	`str
( 
i
) ] , 

74 
stdout
= 
subprocess
. 
PIPE
, 
stderr
= 
subprocess
. 
PIPE
, 

75 
preexec_fn
= 
misc
. 
drop_all_privileges
) 

76 
elements
. 
	`append
( 
subp
. 
	`communicate
( ) [ 0 ] . 
	`rstrip
( '\n' ) ) 

78 return 
elements


80 
	}


80 def 
	$set
( 
key
, 
keytype
, 
value
) : 

81 if not 
	`_gconftool_exists
( ) : 

84 
subprocess
. 
	`call
( [ 'gconftool-2' , '--set' , 
key
, '--type' , 
keytype
, 
value
] , 

85 
preexec_fn
= 
misc
. 
drop_all_privileges
) 

87 
	}


87 def 
	$unset
( 
key
) : 

88 if not 
	`_gconftool_exists
( ) : 

91 
subprocess
. 
	`call
( [ 'gconftool-2' , '--unset' , 
key
] , 

92 
preexec_fn
= 
misc
. 
drop_all_privileges
) 

92 
	}


	@ubiquity/tz.py

20 import 
	~<os


21 import 
	~<datetime


22 import 
	~<time


23 import 
	~<xml
. 
	~<dom
. 
	~<minidom


26 
TZ_DATA_FILE
= '/usr/share/zoneinfo/zone.tab' 

27 
ISO_3166_FILE
= '/usr/share/xml/iso-codes/iso_3166.xml' 

29 def 
	$_seconds_since_epoch
( 
dt
) : 

31 return 
	`int
( 
dt
. 
	`replace
( 
tzinfo
= None ) . 
	`strftime
( '%s' ) ) 

34 
	}


34 class 
	cSystemTzInfo
( 
datetime
. 
tzinfo
) : 

35 def 
	$__init__
( 
self
, 
tz
= None ) : 

36 
self
. 
tz
= 
tz


38 
	}


38 def 
	$_select_tz
( 
self
) : 

39 
tzbackup
= None 

40 if 'TZ' in 
os
. 
environ
: 

41 
tzbackup
= 
os
. 
environ
[ 'TZ' ] 

42 if 
self
. 
tz
is not None : 

43 
os
. 
environ
[ 'TZ' ] = 
self
. 
tz


44 
time
. 
	`tzset
( ) 

45 return 
tzbackup


47 
	}


47 def 
	$_restore_tz
( 
self
, 
tzbackup
) : 

48 if 
tzbackup
is None : 

49 if 'TZ' in 
os
. 
environ
: 

50 del 
os
. 
environ
[ 'TZ' ] 

52 
os
. 
environ
[ 'TZ' ] = 
tzbackup


53 
time
. 
	`tzset
( ) 

55 
	}


55 def 
	$utcoffset
( 
self
, 
dt
) : 

56 
tzbackup
= 
self
. 
	`_select_tz
( ) 

58 if 
time
. 
daylight
== 0 : 

60 
dstminutes
= - 
time
. 
timezone
/ 60 

62 
localtime
= 
time
. 
	`localtime
( 
	`_seconds_since_epoch
( 
dt
) ) 

63 if 
localtime
. 
tm_isdst
!= 1 : 

65 
dstminutes
= - 
time
. 
timezone
/ 60 

68 
dstminutes
= - 
time
. 
altzone
/ 60 

69 return 
datetime
. 
	`timedelta
( 
minutes
= 
	`int
( 
dstminutes
) ) 

71 
self
. 
	`_restore_tz
( 
tzbackup
) 

73 
	}


73 def 
	$rawutcoffset
( 
self
, 
dt
) : 

74 
tzbackup
= 
self
. 
	`_select_tz
( ) 

76 
dstminutes
= - 
time
. 
timezone
/ 60 

77 return 
datetime
. 
	`timedelta
( 
minutes
= 
	`int
( 
dstminutes
) ) 

79 
self
. 
	`_restore_tz
( 
tzbackup
) 

81 
	}


81 def 
	$dst
( 
self
, 
dt
) : 

82 
tzbackup
= 
self
. 
	`_select_tz
( ) 

84 if 
time
. 
daylight
== 0 : 

87 return 
datetime
. 
	`timedelta
( 0 ) 

89 
localtime
= 
time
. 
	`localtime
( 
	`_seconds_since_epoch
( 
dt
) ) 

90 if 
localtime
. 
tm_isdst
!= 1 : 

92 return 
datetime
. 
	`timedelta
( 0 ) 

94 
dstminutes
= ( 
time
. 
timezone
- 
time
. 
altzone
) / 60 

95 return 
datetime
. 
	`timedelta
( 
minutes
= 
	`int
( 
dstminutes
) ) 

97 
self
. 
	`_restore_tz
( 
tzbackup
) 

99 
	}


99 def 
	$tzname
( 
self
, 
dt
) : 

100 return 
self
. 
tz


102 
	}


102 def 
	$tzname_letters
( 
self
, 
dt
) : 

103 
tzbackup
= 
self
. 
	`_select_tz
( ) 

105 
localtime
= 
time
. 
	`localtime
( 
	`_seconds_since_epoch
( 
dt
) ) 

106 return 
time
. 
	`strftime
( '%Z' , 
localtime
) 

108 
self
. 
	`_restore_tz
( 
tzbackup
) 

111 
	}


111 class 
	cIso3166
( object ) : 

112 def 
	$__init__
( 
self
) : 

113 
self
. 
names
= { } 

114 
document
= 
xml
. 
dom
. 
minidom
. 
	`parse
( 
ISO_3166_FILE
) 

115 
entries
= 
document
. 
	`getElementsByTagName
( 'iso_3166_entries' ) [ 0 ] 

116 
self
. 
	`handle_entries
( 
entries
) 

118 
	}


118 def 
	$handle_entries
( 
self
, 
entries
) : 

119 for 
entry
in 
entries
. 
	`getElementsByTagName
( 'iso_3166_entry' ) : 

120 
self
. 
	`handle_entry
( 
entry
) 

122 
	}


122 def 
	$handle_entry
( 
self
, 
entry
) : 

123 if ( 
entry
. 
	`hasAttribute
( 'alpha_2_code' ) and 

124 ( 
entry
. 
	`hasAttribute
( 'common_name' ) or 
entry
. 
	`hasAttribute
( 'name' ) ) ) : 

125 
alpha_2_code
= 
entry
. 
	`getAttribute
( 'alpha_2_code' ) 

126 if 
entry
. 
	`hasAttribute
( 'common_name' ) : 

127 
name
= 
entry
. 
	`getAttribute
( 'common_name' ) 

129 
name
= 
entry
. 
	`getAttribute
( 'name' ) 

130 
self
. 
names
[ 
alpha_2_code
] = 
name


137 
	}


137 def 
	$_parse_position
( 
position
, 
wholedigits
) : 

138 if 
position
== '' or 
	`len
( 
position
) < 4 or 
wholedigits
> 9 : 

140 
wholestr
= 
position
[ : 
wholedigits
+ 1 ] 

141 
fractionstr
= 
position
[ 
wholedigits
+ 1 : ] 

142 
whole
= 
	`float
( 
wholestr
) 

143 
fraction
= 
	`float
( 
fractionstr
) 

144 if 
whole
>= 0.0 : 

145 return 
whole
+ 
fraction
/ 
	`pow
( 10.0 , 
	`len
( 
fractionstr
) ) 

147 return 
whole
- 
fraction
/ 
	`pow
( 10.0 , 
	`len
( 
fractionstr
) ) 

149 
	}


149 class 
	cLocation
( object ) : 

150 def 
	$__init__
( 
self
, 
zonetab_line
, 
iso3166
) : 

151 
bits
= 
zonetab_line
. 
	`rstrip
( ) . 
	`split
( '\t' , 3 ) 

152 
latlong
= 
bits
[ 1 ] 

153 
latlongsplit
= 
latlong
. 
	`find
( '-' , 1 ) 

154 if 
latlongsplit
== - 1 : 

155 
latlongsplit
= 
latlong
. 
	`find
( '+' , 1 ) 

156 if 
latlongsplit
!= - 1 : 

157 
latitude
= 
latlong
[ : 
latlongsplit
] 

158 
longitude
= 
latlong
[ 
latlongsplit
: ] 

160 
latitude
= 
latlong


161 
longitude
= '+0' 

163 
self
. 
country
= 
bits
[ 0 ] 

164 if 
self
. 
country
in 
iso3166
. 
names
: 

165 
self
. 
human_country
= 
iso3166
. 
names
[ 
self
. 
country
] 

167 
self
. 
human_country
= 
self
. 
country


168 
self
. 
zone
= 
bits
[ 2 ] 

169 if 
	`len
( 
bits
) > 3 : 

170 
self
. 
comment
= 
bits
[ 3 ] 

172 
self
. 
comment
= None 

173 
self
. 
latitude
= 
	`_parse_position
( 
latitude
, 2 ) 

174 
self
. 
longitude
= 
	`_parse_position
( 
longitude
, 3 ) 

177 
today
= 
datetime
. 
datetime
. 
	`today
( ) 

178 except 
ValueError
: 

183 
today
= 
datetime
. 
datetime
. 
	`fromtimestamp
( 0 ) 

184 
self
. 
info
= 
	`SystemTzInfo
( 
self
. 
zone
) 

185 
self
. 
utc_offset
= 
self
. 
info
. 
	`utcoffset
( 
today
) 

186 
self
. 
raw_utc_offset
= 
self
. 
info
. 
	`rawutcoffset
( 
today
) 

187 
self
. 
zone_letters
= 
self
. 
info
. 
	`tzname_letters
( 
today
) 

190 
	}


190 class 
	c_Database
( object ) : 

191 def 
	$__init__
( 
self
) : 

192 
self
. 
locations
= [ ] 

193 
iso3166
= 
	`Iso3166
( ) 

194 
tzdata
= 
	`open
( 
TZ_DATA_FILE
) 

195 for 
line
in 
tzdata
: 

196 if 
line
. 
	`startswith
( '#' ) : 

198 
self
. 
locations
. 
	`append
( 
	`Location
( 
line
, 
iso3166
) ) 

199 
tzdata
. 
	`close
( ) 

200 
self
. 
locations
. 
	`sort
( 
cmp
, lambda 
location
: 
location
. 
zone
) 

202 
	}


202 
_database
= None 

204 def 
	$Database
( ) : 

205 global 
_database


206 if not 
_database
: 

207 
_database
= 
	`_Database
( ) 

208 return 
_database


208 
	}


	@scripts/install.py

22 import 
	~<sys


23 import 
	~<os


24 import 
	~<platform


25 import 
	~<errno


26 import 
	~<stat


27 import 
	~<re


28 import 
	~<textwrap


29 import 
	~<shutil


30 import 
	~<subprocess


31 import 
	~<time


32 import 
	~<struct


33 import 
	~<socket


34 import 
	~<fcntl


35 import 
	~<traceback


36 import 
	~<syslog


37 import 
	~<signal


38 import 
	~<gzip


39 import 
	~<debconf


40 import 
	~<warnings


41 
warnings
. 
	`filterwarnings
( "ignore" , "apt API not stable yet" , 
FutureWarning
) 

42 import 
	~<apt_pkg


43 from 
apt
. 
cache
import 
	~<Cache


44 from 
apt
. 
progress
import 
	~<FetchProgress
, 
	~<InstallProgress


45 from 
hashlib
import 
	~<md5


47 
sys
. 
path
. 
	`insert
( 0 , '/usr/lib/ubiquity' ) 

49 from 
ubiquity
import 
	~<misc


50 from 
ubiquity
import 
	~<osextras


51 from 
ubiquity
. 
components
import 
	~<language_apply
, 
	~<apt_setup
, 
	~<timezone_apply
, 

52 
clock_setup
, 
console_setup_apply
, 

53 
usersetup_apply
, 
hw_detect
, 
check_kernels
, 

54 
migrationassistant_apply


56 def 
	$debconf_disconnect
( ) : 

59 
os
. 
environ
[ 'DEBIAN_FRONTEND' ] = 'noninteractive' 

60 if 'DEBIAN_HAS_FRONTEND' in 
os
. 
environ
: 

61 del 
os
. 
environ
[ 'DEBIAN_HAS_FRONTEND' ] 

62 if 'DEBCONF_USE_CDEBCONF' in 
os
. 
environ
: 

64 del 
os
. 
environ
[ 'DEBCONF_USE_CDEBCONF' ] 

66 
	}


66 class 
	cDebconfFetchProgress
( 
FetchProgress
) : 

69 def 
	$__init__
( 
self
, 
db
, 
title
, 
info_starting
, 
info
) : 

70 
FetchProgress
. 
	`__init__
( 
self
) 

71 
self
. 
db
= 
db


72 
self
. 
title
= 
title


73 
self
. 
info_starting
= 
info_starting


74 
self
. 
info
= 
info


75 
self
. 
old_capb
= None 

76 
self
. 
eta
= 0.0 

78 
	}


78 def 
	$start
( 
self
) : 

79 
self
. 
db
. 
	`progress
( 'START' , 0 , 100 , 
self
. 
title
) 

80 if 
self
. 
info_starting
is not None : 

81 
self
. 
db
. 
	`progress
( 'INFO' , 
self
. 
info_starting
) 

82 
self
. 
old_capb
= 
self
. 
db
. 
	`capb
( ) 

83 
capb_list
= 
self
. 
old_capb
. 
	`split
( ) 

84 
capb_list
. 
	`append
( 'progresscancel' ) 

85 
self
. 
db
. 
	`capb
( ' ' . 
	`join
( 
capb_list
) ) 

89 
	}


89 def 
	$pulse
( 
self
) : 

90 
FetchProgress
. 
	`pulse
( 
self
) 

92 
self
. 
db
. 
	`progress
( 'SET' , 
	`int
( 
self
. 
percent
) ) 

93 except 
debconf
. 
DebconfError
: 

95 if 
self
. 
eta
!= 0.0 : 

96 
time_str
= "%d:%02d" % 
	`divmod
( 
	`int
( 
self
. 
eta
) , 60 ) 

97 
self
. 
db
. 
	`subst
( 
self
. 
info
, 'TIME' , 
time_str
) 

99 
self
. 
db
. 
	`progress
( 'INFO' , 
self
. 
info
) 

100 except 
debconf
. 
DebconfError
: 

104 
	}


104 def 
	$stop
( 
self
) : 

105 if 
self
. 
old_capb
is not None : 

106 
self
. 
db
. 
	`capb
( 
self
. 
old_capb
) 

107 
self
. 
old_capb
= None 

108 
self
. 
db
. 
	`progress
( 'STOP' ) 

110 
	}


110 class 
	cDebconfInstallProgress
( 
InstallProgress
) : 

113 def 
	$__init__
( 
self
, 
db
, 
title
, 
info
, 
error
= None ) : 

114 
InstallProgress
. 
	`__init__
( 
self
) 

115 
self
. 
db
= 
db


116 
self
. 
title
= 
title


117 
self
. 
info
= 
info


118 
self
. 
error_template
= 
error


119 
self
. 
started
= False 

123 
flags
= 
fcntl
. 
	`fcntl
( 
self
. 
statusfd
. 
	`fileno
( ) , 
fcntl
. 
F_GETFL
) 

124 
fcntl
. 
	`fcntl
( 
self
. 
statusfd
. 
	`fileno
( ) , 
fcntl
. 
F_SETFL
, 

125 
flags
& ~ 
os
. 
O_NONBLOCK
) 

127 
	}


127 def 
	$startUpdate
( 
self
) : 

128 
self
. 
db
. 
	`progress
( 'START' , 0 , 100 , 
self
. 
title
) 

129 
self
. 
started
= True 

131 
	}


131 def 
	$error
( 
self
, 
pkg
, 
errormsg
) : 

132 if 
self
. 
error_template
is not None : 

133 
self
. 
db
. 
	`subst
( 
self
. 
error_template
, 'PACKAGE' , 
pkg
) 

134 
self
. 
db
. 
	`subst
( 
self
. 
error_template
, 'MESSAGE' , 
errormsg
) 

135 
self
. 
db
. 
	`input
( 'critical' , 
self
. 
error_template
) 

136 
self
. 
db
. 
	`go
( ) 

138 
	}


138 def 
	$statusChange
( 
self
, 
pkg
, 
percent
, 
status
) : 

139 
self
. 
percent
= 
percent


140 
self
. 
status
= 
status


141 
self
. 
db
. 
	`progress
( 'SET' , 
	`int
( 
percent
) ) 

142 
self
. 
db
. 
	`subst
( 
self
. 
info
, 'DESCRIPTION' , 
status
) 

143 
self
. 
db
. 
	`progress
( 'INFO' , 
self
. 
info
) 

145 
	}


145 def 
	$alarm_handler
( * 
args
) : 

146 raise 
	`Exception
( "timeout" ) 

148 
	}


148 def 
	$updateInterface
( 
self
) : 

152 if 
self
. 
statusfd
is None : 

154 
signal
. 
	`signal
( 
signal
. 
SIGALRM
, 
alarm_handler
) 

156 while not 
self
. 
read
. 
	`endswith
( "\n" ) : 

163 
signal
. 
	`alarm
( 30 ) 

164 
r
= 
os
. 
	`read
( 
self
. 
statusfd
. 
	`fileno
( ) , 1 ) 

165 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, "r: %s" % 
r
) 

166 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, "3" ) 

167 except 
Exception
, 
e
: 

168 
self
. 
read
+= "\n" 

169 if not 
	`str
( 
e
) == 'timeout' : 

171 if not 
r
: 

173 
self
. 
read
+= 
r


174 except 
OSError
, ( 
err
, 
errstr
) : 

175 print 
errstr


176 if 
self
. 
read
. 
	`endswith
( "\n" ) : 

177 
s
= 
self
. 
read


178 ( 
status
, 
pkg
, 
percent
, 
status_str
) = 
s
. 
	`split
( ":" , 3 ) 

179 if 
status
== "pmerror" : 

180 
self
. 
	`error
( 
pkg
, 
status_str
) 

181 elif 
status
== "pmconffile" : 

184 
match
= 
re
. 
	`compile
( "\s*\'(.*)\'\s*\'(.*)\'.*" ) . 
	`match
( 
status_str
) 

185 if 
match
: 

186 
self
. 
	`conffile
( 
match
. 
	`group
( 1 ) , 
match
. 
	`group
( 2 ) ) 

188 
self
. 
	`statusChange
( 
pkg
, 
	`float
( 
percent
) , 
status_str
. 
	`strip
( ) ) 

189 
self
. 
read
= "" 

192 
	}


192 def 
	$run
( 
self
, 
pm
) : 

195 
child_pid
= 
self
. 
	`fork
( ) 

196 if 
child_pid
== 0 : 

198 
os
. 
	`close
( 
self
. 
writefd
) 

200 while 
self
. 
	`updateInterface
( ) : 

202 except ( 
KeyboardInterrupt
, 
SystemExit
) : 

205 for 
line
in 
traceback
. 
	`format_exc
( ) . 
	`split
( '\n' ) : 

206 
syslog
. 
	`syslog
( 
syslog
. 
LOG_WARNING
, 
line
) 

207 
os
. 
	`_exit
( 0 ) 

209 
self
. 
statusfd
. 
	`close
( ) 

213 
saved_stdin
= 
os
. 
	`dup
( 0 ) 

215 
null
= 
os
. 
	`open
( '/dev/null' , 
os
. 
O_RDONLY
) 

216 
os
. 
	`dup2
( 
null
, 0 ) 

217 
os
. 
	`close
( 
null
) 

218 except 
OSError
: 

220 
saved_stdout
= 
os
. 
	`dup
( 1 ) 

221 
os
. 
	`dup2
( 2 , 1 ) 

226 
saved_environ_keys
= ( 'DEBIAN_FRONTEND' , 'DEBIAN_HAS_FRONTEND' , 

228 
saved_environ
= { } 

229 for 
key
in 
saved_environ_keys
: 

230 if 
key
in 
os
. 
environ
: 

231 
saved_environ
[ 
key
] = 
os
. 
environ
[ 
key
] 

232 
os
. 
environ
[ 'DEBIAN_FRONTEND' ] = 'noninteractive' 

233 if 'DEBIAN_HAS_FRONTEND' in 
os
. 
environ
: 

234 del 
os
. 
environ
[ 'DEBIAN_HAS_FRONTEND' ] 

235 if 'DEBCONF_USE_CDEBCONF' in 
os
. 
environ
: 

237 del 
os
. 
environ
[ 'DEBCONF_USE_CDEBCONF' ] 

239 
res
= 
pm
. 
ResultFailed


241 
res
= 
pm
. 
	`DoInstall
( 
self
. 
writefd
) 

244 
os
. 
	`close
( 
self
. 
writefd
) 

247 ( 
pid
, 
status
) = 
os
. 
	`waitpid
( 
child_pid
, 0 ) 

248 if 
pid
!= 
child_pid
: 

250 if 
os
. 
	`WIFEXITED
( 
status
) or 
os
. 
	`WIFSIGNALED
( 
status
) : 

252 except 
OSError
: 

256 
os
. 
	`dup2
( 
saved_stdin
, 0 ) 

257 
os
. 
	`close
( 
saved_stdin
) 

258 
os
. 
	`dup2
( 
saved_stdout
, 1 ) 

259 
os
. 
	`close
( 
saved_stdout
) 

262 for 
key
in 
saved_environ_keys
: 

263 if 
key
in 
saved_environ
: 

264 
os
. 
environ
[ 
key
] = 
saved_environ
[ 
key
] 

265 elif 
key
in 
os
. 
environ
: 

266 del 
os
. 
environ
[ 
key
] 

268 return 
res


270 
	}


270 def 
	$finishUpdate
( 
self
) : 

271 if 
self
. 
started
: 

272 
self
. 
db
. 
	`progress
( 'STOP' ) 

273 
self
. 
started
= False 

275 
	}


275 class 
	cInstallStepError
( 
Exception
) : 

278 def 
	$__init__
( 
self
, 
message
) : 

279 
Exception
. 
	`__init__
( 
self
, 
message
) 

281 
	}


281 class 
	cInstall
: 

283 def 
	$__init__
( 
self
) : 

286 if 
os
. 
path
. 
	`isdir
( '/rofs' ) : 

287 
self
. 
source
= '/rofs' 

288 elif 
os
. 
path
. 
	`isdir
( '/UNIONFS' ) : 

291 
self
. 
source
= '/UNIONFS' 

293 
self
. 
source
= '/var/lib/ubiquity/source' 

294 
self
. 
target
= '/target' 

295 
self
. 
kernel_version
= 
platform
. 
	`release
( ) 

296 
self
. 
db
= 
debconf
. 
	`Debconf
( ) 

298 
self
. 
	`select_language_packs
( ) 

299 
use_restricted
= True 

301 if 
self
. 
db
. 
	`get
( 'apt-setup/restricted' ) == 'false' : 

302 
use_restricted
= False 

303 except 
debconf
. 
DebconfError
: 

305 if not 
use_restricted
: 

306 
self
. 
restricted_cache
= 
	`Cache
( ) 

307 
self
. 
blacklist
= { } 

308 if 
self
. 
db
. 
	`get
( 'ubiquity/install/generate-blacklist' ) == 'true' : 

309 
self
. 
db
. 
	`progress
( 'START' , 0 , 100 , 'ubiquity/install/title' ) 

310 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/blacklist' ) 

311 
self
. 
	`generate_blacklist
( ) 

313 
apt_pkg
. 
	`InitConfig
( ) 

314 
apt_pkg
. 
Config
. 
	`Set
( "Dir" , "/target" ) 

315 
apt_pkg
. 
Config
. 
	`Set
( "Dir::State::status" , "/target/var/lib/dpkg/status" ) 

316 
apt_pkg
. 
Config
. 
	`Set
( "APT::GPGV::TrustedKeyring" , 

318 
apt_pkg
. 
Config
. 
	`Set
( "Acquire::gpgv::Options::" , 

320 
apt_pkg
. 
Config
. 
	`Set
( "DPkg::Options::" , "--root=/target" ) 

323 
apt_pkg
. 
Config
. 
	`Clear
( "DPkg::Pre-Install-Pkgs" ) 

324 
apt_pkg
. 
	`InitSystem
( ) 

326 
	}


326 def 
	$excepthook
( 
self
, 
exctype
, 
excvalue
, 
exctb
) : 

330 if ( 
	`issubclass
( 
exctype
, 
KeyboardInterrupt
) or 

331 
	`issubclass
( 
exctype
, 
SystemExit
) ) : 

334 
tbtext
= '' . 
	`join
( 
traceback
. 
	`format_exception
( 
exctype
, 
excvalue
, 
exctb
) ) 

335 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, "Exception during installation:" ) 

336 for 
line
in 
tbtext
. 
	`split
( '\n' ) : 

337 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 
line
) 

338 
tbfile
= 
	`open
( '/var/lib/ubiquity/install.trace' , 'w' ) 

339 print >> 
tbfile
, 
tbtext


340 
tbfile
. 
	`close
( ) 

342 
sys
. 
	`exit
( 1 ) 

344 
	}


344 def 
	$run
( 
self
) : 

348 
self
. 
db
. 
	`progress
( 'START' , 0 , 100 , 'ubiquity/install/title' ) 

349 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/mounting_source' ) 

352 if 
self
. 
source
== '/var/lib/ubiquity/source' : 

353 
self
. 
	`mount_source
( ) 

355 
self
. 
db
. 
	`progress
( 'SET' , 1 ) 

356 
self
. 
db
. 
	`progress
( 'REGION' , 1 , 75 ) 

358 
self
. 
	`copy_all
( ) 

359 except 
EnvironmentError
, 
e
: 

360 if 
e
. 
errno
in ( 
errno
. 
ENOENT
, 
errno
. 
EIO
, 
errno
. 
EFAULT
, 

361 
errno
. 
ENOTDIR
, 
errno
. 
EROFS
) : 

362 if 
e
. 
filename
is None : 

363 
error_template
= 'cd_hd_fault' 

364 elif 
e
. 
filename
. 
	`startswith
( '/target' ) : 

365 
error_template
= 'hd_fault' 

367 
error_template
= 'cd_fault' 

368 
error_template
= ( 'ubiquity/install/copying_error/%s' % 

369 
error_template
) 

370 
self
. 
db
. 
	`subst
( 
error_template
, 'ERROR' , 
	`str
( 
e
) ) 

371 
self
. 
db
. 
	`input
( 'critical' , 
error_template
) 

372 
self
. 
db
. 
	`go
( ) 

375 
sys
. 
	`exit
( 3 ) 

376 elif 
e
. 
errno
== 
errno
. 
ENOSPC
: 

377 
error_template
= 'ubiquity/install/copying_error/no_space' 

378 
self
. 
db
. 
	`subst
( 
error_template
, 'ERROR' , 
	`str
( 
e
) ) 

379 
self
. 
db
. 
	`input
( 'critical' , 
error_template
) 

380 
self
. 
db
. 
	`go
( ) 

381 
sys
. 
	`exit
( 3 ) 

385 
self
. 
db
. 
	`progress
( 'SET' , 75 ) 

386 
self
. 
db
. 
	`progress
( 'REGION' , 75 , 76 ) 

387 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/locales' ) 

388 
self
. 
	`configure_locales
( ) 

390 
self
. 
db
. 
	`progress
( 'SET' , 76 ) 

391 
self
. 
db
. 
	`progress
( 'REGION' , 76 , 77 ) 

392 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/user' ) 

393 
self
. 
	`configure_user
( ) 

395 
self
. 
db
. 
	`progress
( 'SET' , 77 ) 

396 
self
. 
db
. 
	`progress
( 'REGION' , 77 , 78 ) 

397 
self
. 
	`run_target_config_hooks
( ) 

399 
self
. 
db
. 
	`progress
( 'SET' , 78 ) 

400 
self
. 
db
. 
	`progress
( 'REGION' , 78 , 79 ) 

401 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/network' ) 

402 
self
. 
	`configure_network
( ) 

404 
self
. 
db
. 
	`progress
( 'SET' , 79 ) 

405 
self
. 
db
. 
	`progress
( 'REGION' , 79 , 80 ) 

406 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/apt' ) 

407 
self
. 
	`configure_apt
( ) 

409 
self
. 
db
. 
	`progress
( 'SET' , 80 ) 

410 
self
. 
db
. 
	`progress
( 'REGION' , 80 , 85 ) 

413 
self
. 
	`install_language_packs
( ) 

414 except 
InstallStepError
: 

416 except 
IOError
: 

418 except 
SystemError
: 

421 
self
. 
db
. 
	`progress
( 'SET' , 85 ) 

422 
self
. 
db
. 
	`progress
( 'REGION' , 85 , 86 ) 

423 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/timezone' ) 

424 
self
. 
	`configure_timezone
( ) 

426 
self
. 
db
. 
	`progress
( 'SET' , 86 ) 

427 
self
. 
db
. 
	`progress
( 'REGION' , 86 , 87 ) 

428 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/keyboard' ) 

429 
self
. 
	`configure_keyboard
( ) 

431 
self
. 
db
. 
	`progress
( 'SET' , 87 ) 

432 
self
. 
db
. 
	`progress
( 'REGION' , 87 , 88 ) 

433 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/migrationassistant' ) 

434 
self
. 
	`configure_ma
( ) 

436 
self
. 
db
. 
	`progress
( 'SET' , 88 ) 

437 
self
. 
db
. 
	`progress
( 'REGION' , 88 , 89 ) 

438 
self
. 
	`remove_unusable_kernels
( ) 

440 
self
. 
db
. 
	`progress
( 'SET' , 89 ) 

441 
self
. 
db
. 
	`progress
( 'REGION' , 89 , 93 ) 

442 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/hardware' ) 

443 
self
. 
	`configure_hardware
( ) 

446 
apt_install_direct
= 
	`open
( '/var/lib/ubiquity/apt-install-direct' , 

448 
apt_install_direct
. 
	`close
( ) 

450 
self
. 
db
. 
	`progress
( 'SET' , 93 ) 

451 
self
. 
db
. 
	`progress
( 'REGION' , 93 , 94 ) 

452 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/bootloader' ) 

453 
self
. 
	`configure_bootloader
( ) 

455 
self
. 
db
. 
	`progress
( 'SET' , 94 ) 

456 
self
. 
db
. 
	`progress
( 'REGION' , 94 , 95 ) 

457 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/installing' ) 

458 
self
. 
	`install_extras
( ) 

460 
self
. 
db
. 
	`progress
( 'SET' , 95 ) 

461 
self
. 
db
. 
	`progress
( 'REGION' , 95 , 99 ) 

462 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/removing' ) 

463 
self
. 
	`remove_extras
( ) 

465 
self
. 
	`remove_broken_cdrom
( ) 

467 
self
. 
	`copy_dcd
( ) 

468 
self
. 
db
. 
	`progress
( 'SET' , 99 ) 

469 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/log_files' ) 

470 
self
. 
	`copy_logs
( ) 

472 
self
. 
db
. 
	`progress
( 'SET' , 100 ) 

474 
self
. 
	`cleanup
( ) 

476 
self
. 
db
. 
	`progress
( 'STOP' ) 

477 except ( 
KeyboardInterrupt
, 
SystemExit
) : 

483 
	}


483 def 
	$copy_file
( 
self
, 
sourcepath
, 
targetpath
, 
md5_check
) : 

484 
sourcefh
= None 

485 
targetfh
= None 

488 
sourcefh
= 
	`open
( 
sourcepath
, 'rb' ) 

489 
targetfh
= 
	`open
( 
targetpath
, 'wb' ) 

490 if 
md5_check
: 

491 
sourcehash
= 
	`md5
( ) 

493 
buf
= 
sourcefh
. 
	`read
( 16 * 1024 ) 

494 if not 
buf
: 

496 
targetfh
. 
	`write
( 
buf
) 

497 if 
md5_check
: 

498 
sourcehash
. 
	`update
( 
buf
) 

500 if not 
md5_check
: 

502 
targetfh
. 
	`close
( ) 

503 
targetfh
= 
	`open
( 
targetpath
, 'rb' ) 

504 if 
md5_check
: 

505 
targethash
= 
	`md5
( ) 

507 
buf
= 
targetfh
. 
	`read
( 16 * 1024 ) 

508 if not 
buf
: 

510 
targethash
. 
	`update
( 
buf
) 

511 if 
targethash
. 
	`digest
( ) != 
sourcehash
. 
	`digest
( ) : 

512 if 
targetfh
: 

513 
targetfh
. 
	`close
( ) 

514 if 
sourcefh
: 

515 
sourcefh
. 
	`close
( ) 

516 
error_template
= 'ubiquity/install/copying_error/md5' 

517 
self
. 
db
. 
	`subst
( 
error_template
, 'FILE' , 
targetpath
) 

518 
self
. 
db
. 
	`input
( 'critical' , 
error_template
) 

519 
self
. 
db
. 
	`go
( ) 

520 
response
= 
self
. 
db
. 
	`get
( 
error_template
) 

521 if 
response
== 'skip' : 

523 elif 
response
== 'abort' : 

524 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 

525 'MD5 failure on %s' % 
targetpath
) 

526 
sys
. 
	`exit
( 3 ) 

527 elif 
response
== 'retry' : 

532 if 
targetfh
: 

533 
targetfh
. 
	`close
( ) 

534 if 
sourcefh
: 

535 
sourcefh
. 
	`close
( ) 

537 
	}


537 def 
	$find_cd_kernel
( 
self
) : 

540 
release_bits
= 
os
. 
	`uname
( ) [ 2 ] . 
	`split
( '-' ) 

541 if 
	`len
( 
release_bits
) >= 3 : 

542 
subarch
= 
release_bits
[ 2 ] 

544 
subarch
= None 

546 for 
prefix
in ( 'vmlinux' , 'vmlinuz' ) : 

547 
kernel
= 
os
. 
path
. 
	`join
( '/cdrom/casper' , 
prefix
) 

548 if 
os
. 
path
. 
	`exists
( 
kernel
) : 

549 return 
kernel


551 if 
subarch
: 

552 
kernel
= 
os
. 
path
. 
	`join
( '/cdrom/casper' , 
subarch
, 
prefix
) 

553 if 
os
. 
path
. 
	`exists
( 
kernel
) : 

554 return 
kernel


556 
kernel
= 
os
. 
path
. 
	`join
( '/cdrom/casper' , 

557 '%s-%s' % ( 
prefix
, 
subarch
) ) 

558 if 
os
. 
path
. 
	`exists
( 
kernel
) : 

559 return 
kernel


564 
	}


564 def 
	$archdetect
( 
self
) : 

565 
archdetect
= 
subprocess
. 
	`Popen
( [ 'archdetect' ] , 
stdout
= 
subprocess
. 
PIPE
) 

566 
answer
= 
archdetect
. 
	`communicate
( ) [ 0 ] . 
	`strip
( ) 

568 return 
answer
. 
	`split
( '/' , 1 ) 

569 except 
ValueError
: 

570 return 
answer
, '' 

573 
	}


573 def 
	$generate_blacklist
( 
self
) : 

574 if ( 
os
. 
path
. 
	`exists
( "/cdrom/casper/filesystem.manifest-desktop" ) and 

575 
os
. 
path
. 
	`exists
( "/cdrom/casper/filesystem.manifest" ) ) : 

576 
desktop_packages
= 
	`set
( ) 

577 
manifest
= 
	`open
( "/cdrom/casper/filesystem.manifest-desktop" ) 

578 for 
line
in 
manifest
: 

579 if 
line
. 
	`strip
( ) != '' and not 
line
. 
	`startswith
( '#' ) : 

580 
desktop_packages
. 
	`add
( 
line
. 
	`split
( ) [ 0 ] ) 

581 
manifest
. 
	`close
( ) 

582 
live_packages
= 
	`set
( ) 

583 
manifest
= 
	`open
( "/cdrom/casper/filesystem.manifest" ) 

584 for 
line
in 
manifest
: 

585 if 
line
. 
	`strip
( ) != '' and not 
line
. 
	`startswith
( '#' ) : 

586 
live_packages
. 
	`add
( 
line
. 
	`split
( ) [ 0 ] ) 

587 
manifest
. 
	`close
( ) 

588 
difference
= 
live_packages
- 
desktop_packages


590 
difference
= 
	`set
( ) 

592 
cache
= 
	`Cache
( ) 

594 
use_restricted
= True 

596 if 
self
. 
db
. 
	`get
( 'apt-setup/restricted' ) == 'false' : 

597 
use_restricted
= False 

598 except 
debconf
. 
DebconfError
: 

600 if not 
use_restricted
: 

601 for 
pkg
in 
cache
. 
	`keys
( ) : 

602 if ( 
cache
[ 
pkg
] . 
isInstalled
and 

603 
cache
[ 
pkg
] . 
section
. 
	`startswith
( 'restricted/' ) ) : 

604 
difference
. 
	`add
( 
pkg
) 

607 
keep
= 
self
. 
	`query_recorded_installed
( ) 

608 
arch
, 
subarch
= 
self
. 
	`archdetect
( ) 

614 if 
arch
in ( 'amd64' , 'i386' , 'lpia' ) : 

615 
keep
. 
	`add
( 'grub' ) 

616 
keep
. 
	`add
( 'grub-pc' ) 

617 elif ( 
arch
== 'armel' and 

618 
subarch
in ( 'imx51' , 'iop32x' , 'ixp4xx' , 'orion5x' ) ) : 

619 
keep
. 
	`add
( 'flash-kernel' ) 

620 elif 
arch
== 'powerpc' and 
subarch
!= 'ps3' : 

621 
keep
. 
	`add
( 'yaboot' ) 

622 
keep
. 
	`add
( 'hfsutils' ) 

624 
difference
-= 
self
. 
	`expand_dependencies_simple
( 
cache
, 
keep
, 
difference
) 

626 if 
	`len
( 
difference
) == 0 : 

627 del 
cache


628 
self
. 
blacklist
= { } 

631 
confirmed_remove
= 
	`set
( ) 

632 for 
pkg
in 
	`sorted
( 
difference
) : 

633 if 
pkg
in 
confirmed_remove
: 

635 
would_remove
= 
self
. 
	`get_remove_list
( 
cache
, [ 
pkg
] , 
recursive
= True ) 

636 if 
would_remove
<= 
difference
: 

637 
confirmed_remove
|= 
would_remove


641 for 
removedpkg
in 
would_remove
: 

642 
cachedpkg
= 
self
. 
	`get_cache_pkg
( 
cache
, 
removedpkg
) 

643 
cachedpkg
. 
	`markKeep
( ) 

644 
difference
= 
confirmed_remove


645 
difference
= 
	`set
( 
	`filter
( 

646 lambda 
x
: not 
os
. 
path
. 
	`exists
( '/var/lib/dpkg/info/%s.prerm' % 
x
) , 

647 
difference
) ) 

648 
cmd
= [ 'dpkg' , '-L' ] 

649 
cmd
. 
	`extend
( 
difference
) 

650 
subp
= 
subprocess
. 
	`Popen
( 
cmd
, 
stdout
= 
subprocess
. 
PIPE
, 
stderr
= 
subprocess
. 
PIPE
) 

651 
res
= 
subp
. 
	`communicate
( ) [ 0 ] . 
	`splitlines
( ) 

652 
u
= { } 

653 for 
x
in 
res
: 

654 
u
[ 
x
] = 1 

655 
self
. 
blacklist
= 
u


657 
	}


657 def 
	$copy_all
( 
self
) : 

662 
files
= [ ] 

663 
total_size
= 0 

665 
self
. 
db
. 
	`progress
( 'START' , 0 , 100 , 'ubiquity/install/title' ) 

666 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/scanning' ) 

671 
walklen
= 0 

672 for 
entry
in 
os
. 
	`walk
( 
self
. 
source
) : 

673 
walklen
+= 1 

674 
walkpos
= 0 

675 
walkprogress
= 0 

677 for 
dirpath
, 
dirnames
, 
filenames
in 
os
. 
	`walk
( 
self
. 
source
) : 

678 
walkpos
+= 1 

679 if 
	`int
( 
	`float
( 
walkpos
) / 
walklen
* 10 ) != 
walkprogress
: 

680 
walkprogress
= 
	`int
( 
	`float
( 
walkpos
) / 
walklen
* 10 ) 

681 
self
. 
db
. 
	`progress
( 'SET' , 
walkprogress
) 

683 
sourcepath
= 
dirpath
[ 
	`len
( 
self
. 
source
) + 1 : ] 

685 for 
name
in 
dirnames
+ 
filenames
: 

686 
relpath
= 
os
. 
path
. 
	`join
( 
sourcepath
, 
name
) 

687 
fqpath
= 
os
. 
path
. 
	`join
( 
dirpath
, 
name
) 

690 if 
relpath
!= "etc/fstab" : 

691 
total_size
+= 
os
. 
	`lstat
( 
fqpath
) . 
st_size


692 
files
. 
	`append
( 
relpath
) 

694 
self
. 
db
. 
	`progress
( 'SET' , 10 ) 

695 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/copying' ) 

705 
copy_progress
= 0 

706 
copied_size
, 
counter
= 0 , 0 

707 
directory_times
= [ ] 

708 
time_start
= 
time
. 
	`time
( ) 

709 
times
= [ ( 
time_start
, 
copied_size
) ] 

710 
long_enough
= False 

711 
time_last_update
= 
time_start


712 if 
self
. 
db
. 
	`get
( 'ubiquity/install/md5_check' ) == 'false' : 

713 
md5_check
= False 

715 
md5_check
= True 

717 
old_umask
= 
os
. 
	`umask
( 0 ) 

718 for 
path
in 
files
: 

719 
sourcepath
= 
os
. 
path
. 
	`join
( 
self
. 
source
, 
path
) 

720 
targetpath
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 
path
) 

721 
st
= 
os
. 
	`lstat
( 
sourcepath
) 

722 
mode
= 
stat
. 
	`S_IMODE
( 
st
. 
st_mode
) 

723 if 
stat
. 
	`S_ISLNK
( 
st
. 
st_mode
) : 

724 if 
os
. 
path
. 
	`lexists
( 
targetpath
) : 

725 
os
. 
	`unlink
( 
targetpath
) 

726 
linkto
= 
os
. 
	`readlink
( 
sourcepath
) 

727 
os
. 
	`symlink
( 
linkto
, 
targetpath
) 

728 elif 
stat
. 
	`S_ISDIR
( 
st
. 
st_mode
) : 

729 if not 
os
. 
path
. 
	`isdir
( 
targetpath
) : 

730 
os
. 
	`mkdir
( 
targetpath
, 
mode
) 

731 elif 
stat
. 
	`S_ISCHR
( 
st
. 
st_mode
) : 

732 
os
. 
	`mknod
( 
targetpath
, 
stat
. 
S_IFCHR
| 
mode
, 
st
. 
st_rdev
) 

733 elif 
stat
. 
	`S_ISBLK
( 
st
. 
st_mode
) : 

734 
os
. 
	`mknod
( 
targetpath
, 
stat
. 
S_IFBLK
| 
mode
, 
st
. 
st_rdev
) 

735 elif 
stat
. 
	`S_ISFIFO
( 
st
. 
st_mode
) : 

736 
os
. 
	`mknod
( 
targetpath
, 
stat
. 
S_IFIFO
| 
mode
) 

737 elif 
stat
. 
	`S_ISSOCK
( 
st
. 
st_mode
) : 

738 
os
. 
	`mknod
( 
targetpath
, 
stat
. 
S_IFSOCK
| 
mode
) 

739 elif 
stat
. 
	`S_ISREG
( 
st
. 
st_mode
) : 

740 if '/%s' % 
path
in 
self
. 
blacklist
: 

741 
syslog
. 
	`syslog
( 'Not copying %s' % 
path
) 

743 if 
os
. 
path
. 
	`exists
( 
targetpath
) : 

744 
os
. 
	`unlink
( 
targetpath
) 

745 
self
. 
	`copy_file
( 
sourcepath
, 
targetpath
, 
md5_check
) 

747 
copied_size
+= 
st
. 
st_size


748 
os
. 
	`lchown
( 
targetpath
, 
st
. 
st_uid
, 
st
. 
st_gid
) 

749 if not 
stat
. 
	`S_ISLNK
( 
st
. 
st_mode
) : 

750 
os
. 
	`chmod
( 
targetpath
, 
mode
) 

751 if 
stat
. 
	`S_ISDIR
( 
st
. 
st_mode
) : 

752 
directory_times
. 
	`append
( ( 
targetpath
, 
st
. 
st_atime
, 
st
. 
st_mtime
) ) 

754 elif not 
stat
. 
	`S_ISLNK
( 
st
. 
st_mode
) : 

755 
os
. 
	`utime
( 
targetpath
, ( 
st
. 
st_atime
, 
st
. 
st_mtime
) ) 

757 if 
	`int
( ( 
copied_size
* 90 ) / 
total_size
) != 
copy_progress
: 

758 
copy_progress
= 
	`int
( ( 
copied_size
* 90 ) / 
total_size
) 

759 
self
. 
db
. 
	`progress
( 'SET' , 10 + 
copy_progress
) 

761 
time_now
= 
time
. 
	`time
( ) 

762 if ( 
time_now
- 
times
[ - 1 ] [ 0 ] ) >= 0.5 : 

763 
times
. 
	`append
( ( 
time_now
, 
copied_size
) ) 

764 if not 
long_enough
and 
time_now
- 
times
[ 0 ] [ 0 ] >= 10 : 

765 
long_enough
= True 

766 if 
long_enough
and 
time_now
- 
time_last_update
>= 2 : 

767 
time_last_update
= 
time_now


768 while ( 
time_now
- 
times
[ 0 ] [ 0 ] > 60 and 

769 
time_now
- 
times
[ 1 ] [ 0 ] >= 60 ) : 

770 
times
. 
	`pop
( 0 ) 

771 
speed
= ( ( 
times
[ - 1 ] [ 1 ] - 
times
[ 0 ] [ 1 ] ) / 

772 ( 
times
[ - 1 ] [ 0 ] - 
times
[ 0 ] [ 0 ] ) ) 

773 if 
speed
!= 0 : 

774 
time_remaining
= 
	`int
( ( 
total_size
- 
copied_size
) / 
speed
) 

775 if 
time_remaining
< 60 : 

776 
self
. 
db
. 
	`progress
( 

781 for 
dirtime
in 
directory_times
: 

782 ( 
directory
, 
atime
, 
mtime
) = 
dirtime


784 
os
. 
	`utime
( 
directory
, ( 
atime
, 
mtime
) ) 

785 except 
OSError
: 

792 
bootdir
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 'boot' ) 

793 
kernel
= 
self
. 
	`find_cd_kernel
( ) 

794 if 
kernel
: 

795 
prefix
= 
os
. 
path
. 
	`basename
( 
kernel
) . 
	`split
( '-' , 1 ) [ 0 ] 

796 
release
= 
os
. 
	`uname
( ) [ 2 ] 

797 
target_kernel
= 
os
. 
path
. 
	`join
( 
bootdir
, '%s-%s' % ( 
prefix
, 
release
) ) 

798 if 
os
. 
path
. 
	`exists
( 
target_kernel
) : 

799 
os
. 
	`unlink
( 
target_kernel
) 

800 
self
. 
	`copy_file
( 
kernel
, 
target_kernel
, 
md5_check
) 

801 
os
. 
	`lchown
( 
target_kernel
, 0 , 0 ) 

802 
os
. 
	`chmod
( 
target_kernel
, 0644 ) 

803 
st
= 
os
. 
	`lstat
( 
kernel
) 

804 
os
. 
	`utime
( 
target_kernel
, ( 
st
. 
st_atime
, 
st
. 
st_mtime
) ) 

806 
os
. 
	`umask
( 
old_umask
) 

808 
self
. 
db
. 
	`progress
( 'SET' , 100 ) 

809 
self
. 
db
. 
	`progress
( 'STOP' ) 

812 
	}


812 def 
	$copy_dcd
( 
self
) : 

816 
dcd
= '/cdrom/.disk/ubuntu_dist_channel' 

817 if 
os
. 
path
. 
	`exists
( 
dcd
) : 

818 
shutil
. 
	`copy
( 
dcd
, 

819 
os
. 
path
. 
	`join
( 
self
. 
target
, 'var/lib/ubuntu_dist_channel' ) ) 

821 
	}


821 def 
	$copy_logs
( 
self
) : 

824 
target_dir
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 'var/log/installer' ) 

825 if not 
os
. 
path
. 
	`exists
( 
target_dir
) : 

826 
os
. 
	`makedirs
( 
target_dir
) 

828 for 
log_file
in ( '/var/log/syslog' , '/var/log/partman' , 

830 
target_log_file
= 
os
. 
path
. 
	`join
( 
target_dir
, 

831 
os
. 
path
. 
	`basename
( 
log_file
) ) 

832 if 
os
. 
path
. 
	`isfile
( 
log_file
) : 

833 if not 
misc
. 
	`execute
( 'cp' , '-a' , 
log_file
, 
target_log_file
) : 

834 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 

836 
os
. 
	`chmod
( 
target_log_file
, 
stat
. 
S_IRUSR
| 
stat
. 
S_IWUSR
) 

838 
status
= 
	`open
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 'var/lib/dpkg/status' ) ) 

839 
status_gz
= 
gzip
. 
	`open
( 
os
. 
path
. 
	`join
( 
target_dir
, 

842 
data
= 
status
. 
	`read
( 65536 ) 

843 if not 
data
: 

845 
status_gz
. 
	`write
( 
data
) 

846 
status_gz
. 
	`close
( ) 

847 
status
. 
	`close
( ) 

848 except 
IOError
: 

851 if 
self
. 
db
. 
	`get
( 'oem-config/enable' ) == 'true' : 

852 
oem_id
= 
self
. 
db
. 
	`get
( 'oem-config/id' ) 

853 
oem_id_file
= 
	`open
( 

854 
os
. 
path
. 
	`join
( 
self
. 
target
, 'var/log/installer/oem-id' ) , 'w' ) 

855 print >> 
oem_id_file
, 
oem_id


856 
oem_id_file
. 
	`close
( ) 

857 except ( 
debconf
. 
DebconfError
, 
IOError
) : 

861 
	}


861 def 
	$mount_one_image
( 
self
, 
fsfile
, 
mountpoint
= None ) : 

862 if 
os
. 
path
. 
	`splitext
( 
fsfile
) [ 1 ] == '.cloop' : 

863 
blockdev_prefix
= 'cloop' 

864 elif 
os
. 
path
. 
	`splitext
( 
fsfile
) [ 1 ] == '.squashfs' : 

865 
blockdev_prefix
= 'loop' 

867 if 
blockdev_prefix
== '' : 

868 raise 
	`InstallStepError
( "No source device found for %s" % 
fsfile
) 

870 
dev
= '' 

871 
sysloops
= 
	`filter
( lambda 
x
: 
x
. 
	`startswith
( 
blockdev_prefix
) , 

872 
os
. 
	`listdir
( '/sys/block' ) ) 

873 
sysloops
. 
	`sort
( ) 

874 for 
sysloop
in 
sysloops
: 

876 
sysloopf
= 
	`open
( 
os
. 
path
. 
	`join
( '/sys/block' , 
sysloop
, 'size' ) ) 

877 
sysloopsize
= 
sysloopf
. 
	`readline
( ) . 
	`strip
( ) 

878 
sysloopf
. 
	`close
( ) 

879 if 
sysloopsize
== '0' : 

880 
devnull
= 
	`open
( '/dev/null' ) 

881 if 
osextras
. 
	`find_on_path
( 'udevadm' ) : 

882 
udevinfo_cmd
= [ 'udevadm' , 'info' ] 

884 
udevinfo_cmd
= [ 'udevinfo' ] 

885 
udevinfo_cmd
. 
	`extend
( 

886 [ '-q' , 'name' , '-p' , 
os
. 
path
. 
	`join
( '/block' , 
sysloop
) ] ) 

887 
udevinfo
= 
subprocess
. 
	`Popen
( 

888 
udevinfo_cmd
, 
stdout
= 
subprocess
. 
PIPE
, 
stderr
= 
devnull
) 

889 
devbase
= 
udevinfo
. 
	`communicate
( ) [ 0 ] 

890 
devnull
. 
	`close
( ) 

891 if 
udevinfo
. 
returncode
!= 0 : 

892 
devbase
= 
sysloop


893 
dev
= '/dev/%s' % 
devbase


898 if 
dev
== '' : 

899 raise 
	`InstallStepError
( "No loop device available for %s" % 
fsfile
) 

901 
misc
. 
	`execute
( 'losetup' , 
dev
, 
fsfile
) 

902 if 
mountpoint
is None : 

903 
mountpoint
= '/var/lib/ubiquity/%s' % 
sysloop


904 if not 
os
. 
path
. 
	`isdir
( 
mountpoint
) : 

905 
os
. 
	`mkdir
( 
mountpoint
) 

906 if not 
misc
. 
	`execute
( 'mount' , 
dev
, 
mountpoint
) : 

907 
misc
. 
	`execute
( 'losetup' , '-d' , 
dev
) 

908 
misc
. 
	`execute
( 'mount' , '-o' , 'loop' , 
fsfile
, 
mountpoint
) 

909 
dev
= 'unused' 

911 return ( 
dev
, 
mountpoint
) 

913 
	}


913 def 
	$mount_source
( 
self
) : 

916 
self
. 
devs
= [ ] 

917 
self
. 
mountpoints
= [ ] 

919 if not 
os
. 
path
. 
	`isdir
( 
self
. 
source
) : 

920 
syslog
. 
	`syslog
( 'mkdir %s' % 
self
. 
source
) 

921 
os
. 
	`mkdir
( 
self
. 
source
) 

923 
fs_preseed
= 
self
. 
db
. 
	`get
( 'ubiquity/install/filesystem-images' ) 

925 if 
fs_preseed
== '' : 

927 
mounts
= 
	`open
( '/proc/mounts' ) 

928 for 
line
in 
mounts
: 

929 ( 
device
, 
fstype
) = 
line
. 
	`split
( ) [ 1 : 3 ] 

930 if 
fstype
== 'squashfs' and 
os
. 
path
. 
	`exists
( 
device
) : 

931 
misc
. 
	`execute
( 'mount' , '--bind' , 
device
, 
self
. 
source
) 

932 
self
. 
mountpoints
. 
	`append
( 
self
. 
source
) 

933 
mounts
. 
	`close
( ) 

935 
mounts
. 
	`close
( ) 

938 
fsfiles
= [ '/cdrom/casper/filesystem.cloop' , 

943 for 
fsfile
in 
fsfiles
: 

944 if 
fsfile
!= '' and 
os
. 
path
. 
	`isfile
( 
fsfile
) : 

945 
dev
, 
mountpoint
= 
self
. 
	`mount_one_image
( 
fsfile
, 
self
. 
source
) 

946 
self
. 
devs
. 
	`append
( 
dev
) 

947 
self
. 
mountpoints
. 
	`append
( 
mountpoint
) 

949 elif 
	`len
( 
fs_preseed
. 
	`split
( ) ) == 1 : 

951 if not 
os
. 
path
. 
	`isfile
( 
fs_preseed
) : 

952 raise 
	`InstallStepError
( 

953 "Preseeded filesystem image %s not found" % 
fs_preseed
) 

955 
dev
, 
mountpoint
= 
self
. 
	`mount_one_image
( 
fsfile
, 
self
. 
source
) 

956 
self
. 
devs
. 
	`append
( 
dev
) 

957 
self
. 
mountpoints
. 
	`append
( 
mountpoint
) 

961 for 
fsfile
in 
fs_preseed
. 
	`split
( ) : 

962 if not 
os
. 
path
. 
	`isfile
( 
fsfile
) : 

963 raise 
	`InstallStepError
( 

964 "Preseeded filesystem image %s not found" % 
fsfile
) 

966 
dev
, 
mountpoint
= 
self
. 
	`mount_one_image
( 
fsfile
) 

967 
self
. 
devs
. 
	`append
( 
dev
) 

968 
self
. 
mountpoints
. 
	`append
( 
mountpoint
) 

970 assert 
self
. 
devs


971 assert 
self
. 
mountpoints


973 
misc
. 
	`execute
( 'mount' , '-t' , 'unionfs' , '-o' , 

974 'dirs=' + ':' . 
	`join
( 
	`map
( lambda 
x
: '%s=ro' % 
x
, 

975 
self
. 
mountpoints
) ) , 

976 'unionfs' , 
self
. 
source
) 

977 
self
. 
mountpoints
. 
	`append
( 
self
. 
source
) 

979 
	}


979 def 
	$umount_source
( 
self
) : 

982 
devs
= 
self
. 
devs


983 
devs
. 
	`reverse
( ) 

984 
mountpoints
= 
self
. 
mountpoints


985 
mountpoints
. 
	`reverse
( ) 

987 for 
mountpoint
in 
mountpoints
: 

988 if not 
misc
. 
	`execute
( 'umount' , 
mountpoint
) : 

989 raise 
	`InstallStepError
( "Failed to unmount %s" % 
mountpoint
) 

990 for 
dev
in 
devs
: 

991 if ( 
dev
!= '' and 
dev
!= 'unused' and 

992 not 
misc
. 
	`execute
( 'losetup' , '-d' , 
dev
) ) : 

993 raise 
	`InstallStepError
( 

994 "Failed to detach loopback device %s" % 
dev
) 

997 
	}


997 def 
	$chroot_setup
( 
self
, 
x11
= False ) : 

999 
policy_rc_d
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 'usr/sbin/policy-rc.d' ) 

1000 
f
= 
	`open
( 
policy_rc_d
, 'w' ) 

1001 print >> 
f
, 

1004 
f
. 
	`close
( ) 

1005 
os
. 
	`chmod
( 
policy_rc_d
, 0755 ) 

1007 
start_stop_daemon
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 'sbin/start-stop-daemon' ) 

1008 if 
os
. 
path
. 
	`exists
( 
start_stop_daemon
) : 

1009 
os
. 
	`rename
( 
start_stop_daemon
, '%s.REAL' % 
start_stop_daemon
) 

1010 
f
= 
	`open
( 
start_stop_daemon
, 'w' ) 

1011 print >> 
f
, 

1016 
f
. 
	`close
( ) 

1017 
os
. 
	`chmod
( 
start_stop_daemon
, 0755 ) 

1019 if not 
os
. 
path
. 
	`exists
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 'proc/cmdline' ) ) : 

1020 
self
. 
	`chrex
( 'mount' , '-t' , 'proc' , 'proc' , '/proc' ) 

1021 if not 
os
. 
path
. 
	`exists
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 'sys/devices' ) ) : 

1022 
self
. 
	`chrex
( 'mount' , '-t' , 'sysfs' , 'sysfs' , '/sys' ) 

1024 if 
x11
and 'DISPLAY' in 
os
. 
environ
: 

1025 if 'SUDO_USER' in 
os
. 
environ
: 

1026 
xauthority
= 
os
. 
path
. 
	`expanduser
( '~%s/.Xauthority' % 

1027 
os
. 
environ
[ 'SUDO_USER' ] ) 

1029 
xauthority
= 
os
. 
path
. 
	`expanduser
( '~/.Xauthority' ) 

1030 if 
os
. 
path
. 
	`exists
( 
xauthority
) : 

1031 
shutil
. 
	`copy
( 
xauthority
, 

1032 
os
. 
path
. 
	`join
( 
self
. 
target
, 'root/.Xauthority' ) ) 

1034 if not 
os
. 
path
. 
	`isdir
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 'tmp/.X11-unix' ) ) : 

1035 
os
. 
	`mkdir
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 'tmp/.X11-unix' ) ) 

1036 
misc
. 
	`execute
( 'mount' , '--bind' , '/tmp/.X11-unix' , 

1037 
os
. 
path
. 
	`join
( 
self
. 
target
, 'tmp/.X11-unix' ) ) 

1039 
	}


1039 def 
	$chroot_cleanup
( 
self
, 
x11
= False ) : 

1041 if 
x11
and 'DISPLAY' in 
os
. 
environ
: 

1042 
misc
. 
	`execute
( 'umount' , 
os
. 
path
. 
	`join
( 
self
. 
target
, 'tmp/.X11-unix' ) ) 

1044 
os
. 
	`rmdir
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 'tmp/.X11-unix' ) ) 

1045 except 
OSError
: 

1048 
os
. 
	`unlink
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 'root/.Xauthority' ) ) 

1049 except 
OSError
: 

1052 
self
. 
	`chrex
( 'umount' , '/sys' ) 

1053 
self
. 
	`chrex
( 'umount' , '/proc' ) 

1055 
start_stop_daemon
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 'sbin/start-stop-daemon' ) 

1056 
os
. 
	`rename
( '%s.REAL' % 
start_stop_daemon
, 
start_stop_daemon
) 

1058 
policy_rc_d
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 'usr/sbin/policy-rc.d' ) 

1059 
os
. 
	`unlink
( 
policy_rc_d
) 

1062 
	}


1062 def 
	$run_target_config_hooks
( 
self
) : 

1067 
hookdir
= '/usr/lib/ubiquity/target-config' 

1069 if 
os
. 
path
. 
	`isdir
( 
hookdir
) : 

1071 
hooks
= 
	`filter
( lambda 
entry
: '.' not in 
entry
, 
os
. 
	`listdir
( 
hookdir
) ) 

1072 
self
. 
db
. 
	`progress
( 'START' , 0 , 
	`len
( 
hooks
) , 'ubiquity/install/title' ) 

1073 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/target_hooks' ) 

1074 for 
hookentry
in 
hooks
: 

1075 
hook
= 
os
. 
path
. 
	`join
( 
hookdir
, 
hookentry
) 

1076 if not 
os
. 
	`access
( 
hook
, 
os
. 
X_OK
) : 

1077 
self
. 
db
. 
	`progress
( 'STEP' , 1 ) 

1080 
subprocess
. 
	`call
( [ 'log-output' , '-t' , 'ubiquity' , 

1081 '--pass-stdout' , 
hook
] ) 

1082 
self
. 
db
. 
	`progress
( 'STEP' , 1 ) 

1083 
self
. 
db
. 
	`progress
( 'STOP' ) 

1086 
	}


1086 def 
	$configure_locales
( 
self
) : 

1088 
dbfilter
= 
language_apply
. 
	`LanguageApply
( None ) 

1089 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1090 if 
ret
!= 0 : 

1091 raise 
	`InstallStepError
( "LanguageApply failed with code %d" % 
ret
) 

1096 
self
. 
	`chrex
( 'fontconfig-voodoo' , '--auto' , '--force' , '--quiet' ) 

1099 
	}


1099 def 
	$configure_apt
( 
self
) : 

1108 
apt_conf_tc
= 
	`open
( 
os
. 
path
. 
	`join
( 

1109 
self
. 
target
, 'etc/apt/apt.conf.d/00trustcdrom' ) , 'w' ) 

1110 print >> 
apt_conf_tc
, 'APT::Authentication::TrustCDROM "true";' 

1111 
apt_conf_tc
. 
	`close
( ) 

1115 
apt_conf_itc
= 
	`open
( 
os
. 
path
. 
	`join
( 

1116 
self
. 
target
, 'etc/apt/apt.conf.d/00IgnoreTimeConflict' ) , 'w' ) 

1117 print >> 
apt_conf_itc
, 

1119 
apt_conf_itc
. 
	`close
( ) 

1122 if 
self
. 
db
. 
	`get
( 'debian-installer/allow_unauthenticated' ) == 'true' : 

1123 
apt_conf_au
= 
	`open
( 

1124 
os
. 
path
. 
	`join
( 
self
. 
target
, 

1127 print >> 
apt_conf_au
, 'APT::Get::AllowUnauthenticated "true";' 

1128 print >> 
apt_conf_au
, 

1130 
apt_conf_au
. 
	`close
( ) 

1131 except 
debconf
. 
DebconfError
: 

1135 
target_cdrom
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 'cdrom' ) 

1136 
misc
. 
	`execute
( 'umount' , 
target_cdrom
) 

1137 if not 
os
. 
path
. 
	`exists
( 
target_cdrom
) : 

1138 
os
. 
	`mkdir
( 
target_cdrom
) 

1139 
misc
. 
	`execute
( 'mount' , '--bind' , '/cdrom' , 
target_cdrom
) 

1143 
apt_conf_nmc
= 
	`open
( 
os
. 
path
. 
	`join
( 

1144 
self
. 
target
, 'etc/apt/apt.conf.d/00NoMountCDROM' ) , 'w' ) 

1145 print >> 
apt_conf_nmc
, 
textwrap
. 
	`dedent
( 

1154 
apt_conf_nmc
. 
	`close
( ) 

1159 
shutil
. 
	`rmtree
( 

1160 
os
. 
path
. 
	`join
( 
self
. 
target
, 'var/lib/apt-xapian-index' ) , 

1161 
ignore_errors
= True ) 

1162 except 
OSError
: 

1165 
dbfilter
= 
apt_setup
. 
	`AptSetup
( None , 
self
. 
db
) 

1166 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1167 if 
ret
!= 0 : 

1168 raise 
	`InstallStepError
( "AptSetup failed with code %d" % 
ret
) 

1171 
	}


1171 def 
	$get_cache_pkg
( 
self
, 
cache
, 
pkg
) : 

1174 return 
cache
[ 
pkg
] 

1175 except 
KeyError
: 

1179 
	}


1179 def 
	$record_installed
( 
self
, 
pkgs
) : 

1183 
record_file
= "/var/lib/ubiquity/apt-installed" 

1184 if not 
os
. 
path
. 
	`exists
( 
os
. 
path
. 
	`dirname
( 
record_file
) ) : 

1185 
os
. 
	`makedirs
( 
os
. 
path
. 
	`dirname
( 
record_file
) ) 

1186 
record
= 
	`open
( 
record_file
, "a" ) 

1188 for 
pkg
in 
pkgs
: 

1189 print >> 
record
, 
pkg


1191 
record
. 
	`close
( ) 

1194 
	}


1194 def 
	$query_recorded_installed
( 
self
) : 

1195 
apt_installed
= 
	`set
( ) 

1196 if 
os
. 
path
. 
	`exists
( "/var/lib/ubiquity/apt-installed" ) : 

1197 
record_file
= 
	`open
( "/var/lib/ubiquity/apt-installed" ) 

1198 for 
line
in 
record_file
: 

1199 
apt_installed
. 
	`add
( 
line
. 
	`strip
( ) ) 

1200 
record_file
. 
	`close
( ) 

1201 return 
apt_installed


1204 
	}


1204 def 
	$mark_install
( 
self
, 
cache
, 
pkg
) : 

1205 
cachedpkg
= 
self
. 
	`get_cache_pkg
( 
cache
, 
pkg
) 

1206 if 
cachedpkg
is not None and not 
cachedpkg
. 
isInstalled
: 

1207 
apt_error
= False 

1209 
cachedpkg
. 
	`markInstall
( ) 

1210 except 
SystemError
: 

1211 
apt_error
= True 

1212 if 
cache
. 
_depcache
. 
BrokenCount
> 0 or 
apt_error
: 

1213 
brokenpkgs
= 
self
. 
	`broken_packages
( 
cache
) 

1214 while 
brokenpkgs
: 

1215 for 
brokenpkg
in 
brokenpkgs
: 

1216 
self
. 
	`get_cache_pkg
( 
cache
, 
brokenpkg
) . 
	`markKeep
( ) 

1217 
new_brokenpkgs
= 
self
. 
	`broken_packages
( 
cache
) 

1218 if 
brokenpkgs
== 
new_brokenpkgs
: 

1220 
brokenpkgs
= 
new_brokenpkgs


1221 assert 
cache
. 
_depcache
. 
BrokenCount
== 0 

1224 
	}


1224 def 
	$select_language_packs
( 
self
) : 

1226 
keep_packages
= 
self
. 
db
. 
	`get
( 'ubiquity/keep-installed' ) 

1227 
keep_packages
= 
keep_packages
. 
	`replace
( ',' , '' ) . 
	`split
( ) 

1228 
syslog
. 
	`syslog
( 'keeping packages due to preseeding: %s' % 

1229 ' ' . 
	`join
( 
keep_packages
) ) 

1230 
self
. 
	`record_installed
( 
keep_packages
) 

1231 except 
debconf
. 
DebconfError
: 

1234 
langpacks
= [ ] 

1236 
langpack_db
= 
self
. 
db
. 
	`get
( 'pkgsel/language-packs' ) 

1237 
langpacks
= 
langpack_db
. 
	`replace
( ',' , '' ) . 
	`split
( ) 

1238 except 
debconf
. 
DebconfError
: 

1240 if not 
langpacks
: 

1242 
langpack_db
= 
self
. 
db
. 
	`get
( 'localechooser/supported-locales' ) 

1243 
langpack_set
= 
	`set
( ) 

1244 for 
locale
in 
langpack_db
. 
	`replace
( ',' , '' ) . 
	`split
( ) : 

1245 
langpack_set
. 
	`add
( 
locale
. 
	`split
( '_' ) [ 0 ] ) 

1246 
langpacks
= 
	`sorted
( 
langpack_set
) 

1247 except 
debconf
. 
DebconfError
: 

1249 if not 
langpacks
: 

1250 
langpack_db
= 
self
. 
db
. 
	`get
( 'debian-installer/locale' ) 

1251 
langpacks
= [ 
langpack_db
. 
	`split
( '_' ) [ 0 ] ] 

1252 
syslog
. 
	`syslog
( 'keeping language packs for: %s' % ' ' . 
	`join
( 
langpacks
) ) 

1255 
lppatterns
= 
self
. 
db
. 
	`get
( 'pkgsel/language-pack-patterns' ) . 
	`split
( ) 

1256 except 
debconf
. 
DebconfError
: 

1259 
to_install
= [ ] 

1260 for 
lp
in 
langpacks
: 

1265 
to_install
. 
	`append
( 'language-pack-%s' % 
lp
) 

1267 for 
pattern
in 
lppatterns
: 

1268 
to_install
. 
	`append
( 
pattern
. 
	`replace
( '$LL' , 
lp
) ) 

1270 
to_install
. 
	`append
( 'language-support-%s' % 
lp
) 

1276 
cache
= 
	`Cache
( ) 

1277 
to_install
= [ 
lp
for 
lp
in 
to_install


1278 if 
self
. 
	`get_cache_pkg
( 
cache
, 
lp
) is not None ] 

1279 del 
cache


1281 
self
. 
	`record_installed
( 
to_install
) 

1282 
self
. 
langpacks
= 
to_install


1284 
	}


1284 def 
	$install_language_packs
( 
self
) : 

1285 
self
. 
	`do_install
( 
self
. 
langpacks
) 

1287 
cache
= 
	`Cache
( ) 

1288 
incomplete
= False 

1289 for 
pkg
in 
self
. 
langpacks
: 

1290 
cachedpkg
= 
self
. 
	`get_cache_pkg
( 
cache
, 
pkg
) 

1291 if 
cachedpkg
is None or not 
cachedpkg
. 
isInstalled
: 

1292 
incomplete
= True 

1294 if 
incomplete
: 

1295 
language_support_dir
= 

1296 
os
. 
path
. 
	`join
( 
self
. 
target
, 'usr/share/language-support' ) 

1297 
update_notifier_dir
= 

1298 
os
. 
path
. 
	`join
( 
self
. 
target
, 'var/lib/update-notifier/user.d' ) 

1299 for 
note
in ( 'incomplete-language-support-gnome.note' , 

1301 
notepath
= 
os
. 
path
. 
	`join
( 
language_support_dir
, 
note
) 

1302 if 
os
. 
path
. 
	`exists
( 
notepath
) : 

1303 if not 
os
. 
path
. 
	`exists
( 
update_notifier_dir
) : 

1304 
os
. 
	`makedirs
( 
update_notifier_dir
) 

1305 
shutil
. 
	`copy
( 
notepath
, 

1306 
os
. 
path
. 
	`join
( 
update_notifier_dir
, 
note
) ) 

1310 
	}


1310 def 
	$configure_timezone
( 
self
) : 

1313 
dbfilter
= 
timezone_apply
. 
	`TimezoneApply
( None ) 

1314 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1315 if 
ret
!= 0 : 

1316 raise 
	`InstallStepError
( "TimezoneApply failed with code %d" % 
ret
) 

1318 
dbfilter
= 
clock_setup
. 
	`ClockSetup
( None ) 

1319 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1320 if 
ret
!= 0 : 

1321 raise 
	`InstallStepError
( "ClockSetup failed with code %d" % 
ret
) 

1324 
	}


1324 def 
	$configure_keyboard
( 
self
) : 

1327 
dbfilter
= 
console_setup_apply
. 
	`ConsoleSetupApply
( None ) 

1328 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1329 if 
ret
!= 0 : 

1330 raise 
	`InstallStepError
( 

1331 "ConsoleSetupApply failed with code %d" % 
ret
) 

1334 
	}


1334 def 
	$configure_user
( 
self
) : 

1339 
dbfilter
= 
usersetup_apply
. 
	`UserSetupApply
( None ) 

1340 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1341 if 
ret
!= 0 : 

1342 raise 
	`InstallStepError
( "UserSetupApply failed with code %d" % 
ret
) 

1344 
	}


1344 def 
	$configure_ma
( 
self
) : 

1348 if 'UBIQUITY_MIGRATION_ASSISTANT' in 
os
. 
environ
: 

1349 
dbfilter
= 
migrationassistant_apply
. 
	`MigrationAssistantApply
( None ) 

1350 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1351 if 
ret
!= 0 : 

1352 raise 
	`InstallStepError
( "MigrationAssistantApply failed with code %d" % 
ret
) 

1355 
	}


1355 def 
	$get_resume_partition
( 
self
) : 

1356 
biggest_size
= 0 

1357 
biggest_partition
= None 

1358 
swaps
= 
	`open
( '/proc/swaps' ) 

1359 for 
line
in 
swaps
: 

1360 
words
= 
line
. 
	`split
( ) 

1361 if 
words
[ 1 ] != 'partition' : 

1363 if not 
os
. 
path
. 
	`exists
( 
words
[ 0 ] ) : 

1365 if 
words
[ 0 ] . 
	`startswith
( '/dev/ramzswap' ) : 

1367 
size
= 
	`int
( 
words
[ 2 ] ) 

1368 if 
size
> 
biggest_size
: 

1369 
biggest_size
= 
size


1370 
biggest_partition
= 
words
[ 0 ] 

1371 
swaps
. 
	`close
( ) 

1372 return 
biggest_partition


1374 
	}


1374 def 
	$configure_hardware
( 
self
) : 

1379 
self
. 
	`chroot_setup
( ) 

1381 
dbfilter
= 
hw_detect
. 
	`HwDetect
( None , 
self
. 
db
) 

1382 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1383 if 
ret
!= 0 : 

1384 raise 
	`InstallStepError
( "HwDetect failed with code %d" % 
ret
) 

1386 
self
. 
	`chroot_cleanup
( ) 

1388 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/hardware' ) 

1390 
misc
. 
	`execute
( '/usr/lib/ubiquity/debian-installer-utils' 

1393 
resume
= 
self
. 
	`get_resume_partition
( ) 

1394 if 
resume
is not None : 

1395 
resume_uuid
= None 

1397 
resume_uuid
= 
subprocess
. 
	`Popen
( 

1398 [ 'vol_id' , '-u' , 
resume
] , 

1399 
stdout
= 
subprocess
. 
PIPE
) . 
	`communicate
( ) [ 0 ] . 
	`rstrip
( '\n' ) 

1400 except 
OSError
: 

1402 if 
resume_uuid
: 

1403 
resume
= "UUID=%s" % 
resume_uuid


1404 if 
os
. 
path
. 
	`exists
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 

1406 
configdir
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 

1408 elif 
os
. 
path
. 
	`exists
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 

1410 
configdir
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 

1413 
configdir
= None 

1414 if 
configdir
is not None : 

1415 
configfile
= 
	`open
( 
os
. 
path
. 
	`join
( 
configdir
, 'resume' ) , 'w' ) 

1416 print >> 
configfile
, "RESUME=%s" % 
resume


1417 
configfile
. 
	`close
( ) 

1420 
os
. 
	`unlink
( '/target/etc/usplash.conf' ) 

1421 except 
OSError
: 

1424 
modes
= 
self
. 
db
. 
	`get
( 'xserver-xorg/config/display/modes' ) 

1425 
self
. 
	`set_debconf
( 'xserver-xorg/config/display/modes' , 
modes
) 

1426 except 
debconf
. 
DebconfError
: 

1430 
os
. 
	`unlink
( '/target/etc/popularity-contest.conf' ) 

1431 except 
OSError
: 

1434 
participate
= 
self
. 
db
. 
	`get
( 'popularity-contest/participate' ) 

1435 
self
. 
	`set_debconf
( 'popularity-contest/participate' , 
participate
) 

1436 except 
debconf
. 
DebconfError
: 

1440 
os
. 
	`unlink
( '/target/etc/papersize' ) 

1441 except 
OSError
: 

1443 
subprocess
. 
	`call
( [ 'log-output' , '-t' , 'ubiquity' , 'chroot' , 
self
. 
target
, 

1445 
preexec_fn
= 
debconf_disconnect
, 
close_fds
= True ) 

1447 
self
. 
	`set_debconf
( 'libpaper/defaultpaper' , '' ) 

1448 except 
debconf
. 
DebconfError
: 

1452 
os
. 
	`unlink
( '/target/etc/ssl/certs/ssl-cert-snakeoil.pem' ) 

1453 except 
OSError
: 

1456 
os
. 
	`unlink
( '/target/etc/ssl/private/ssl-cert-snakeoil.key' ) 

1457 except 
OSError
: 

1460 
self
. 
	`chroot_setup
( 
x11
= True ) 

1461 
self
. 
	`chrex
( 'dpkg-divert' , '--package' , 'ubiquity' , '--rename' , 

1464 
os
. 
	`symlink
( '/bin/true' , '/target/usr/sbin/update-initramfs' ) 

1465 except 
OSError
: 

1468 
packages
= [ 'linux-image-' + 
self
. 
kernel_version
, 

1469 'linux-restricted-modules-' + 
self
. 
kernel_version
, 

1477 for 
package
in 
packages
: 

1478 
self
. 
	`reconfigure
( 
package
) 

1481 
os
. 
	`unlink
( '/target/usr/sbin/update-initramfs' ) 

1482 except 
OSError
: 

1484 
self
. 
	`chrex
( 'dpkg-divert' , '--package' , 'ubiquity' , '--rename' , 

1486 
self
. 
	`chrex
( 'update-initramfs' , '-c' , '-k' , 
os
. 
	`uname
( ) [ 2 ] ) 

1487 
self
. 
	`chroot_cleanup
( 
x11
= True ) 

1491 
bootdir
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 'boot' ) 

1492 if 
self
. 
db
. 
	`get
( 'base-installer/kernel/linux/link_in_boot' ) == 'true' : 

1493 
linkdir
= 
bootdir


1494 
linkprefix
= '' 

1496 
linkdir
= 
self
. 
target


1497 
linkprefix
= 'boot' 

1500 
re_symlink
= 
re
. 
	`compile
( 'vmlinu[xz]|initrd.img$' ) 

1501 for 
entry
in 
os
. 
	`listdir
( 
linkdir
) : 

1502 if 
re_symlink
. 
	`match
( 
entry
) is not None : 

1503 
filename
= 
os
. 
path
. 
	`join
( 
linkdir
, 
entry
) 

1504 if 
os
. 
path
. 
	`islink
( 
filename
) : 

1505 
os
. 
	`unlink
( 
filename
) 

1506 if 
linkdir
!= 
self
. 
target
: 

1510 for 
entry
in 
os
. 
	`listdir
( 
self
. 
target
) : 

1511 if 
re_symlink
. 
	`match
( 
entry
) is not None : 

1512 
filename
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 
entry
) 

1513 if 
os
. 
path
. 
	`islink
( 
filename
) : 

1514 
os
. 
	`unlink
( 
filename
) 

1519 
re_image
= 
re
. 
	`compile
( '(vmlinu[xz]|initrd.img)-' ) 

1520 for 
entry
in 
os
. 
	`listdir
( 
bootdir
) : 

1521 
match
= 
re_image
. 
	`match
( 
entry
) 

1522 if 
match
is not None : 

1523 
imagetype
= 
match
. 
	`group
( 1 ) 

1524 
linksrc
= 
os
. 
path
. 
	`join
( 
linkprefix
, 
entry
) 

1525 
linkdst
= 
os
. 
path
. 
	`join
( 
linkdir
, 
imagetype
) 

1526 if 
os
. 
path
. 
	`exists
( 
linkdst
) : 

1527 if 
entry
. 
	`endswith
( '-' + 
self
. 
kernel_version
) : 

1528 
os
. 
	`unlink
( 
linkdst
) 

1531 
os
. 
	`symlink
( 
linksrc
, 
linkdst
) 

1534 
	}


1534 def 
	$get_all_interfaces
( 
self
) : 

1536 
ifs
= [ ] 

1537 
ifs_file
= 
	`open
( '/proc/net/dev' ) 

1539 
ifs_file
. 
	`readline
( ) 

1540 
ifs_file
. 
	`readline
( ) 

1542 for 
line
in 
ifs_file
: 

1543 
name
= 
re
. 
	`match
( '(.*?(?::\d+)?):' , 
line
. 
	`strip
( ) ) . 
	`group
( 1 ) 

1544 if 
name
== 'lo' : 

1546 
ifs
. 
	`append
( 
name
) 

1548 
ifs_file
. 
	`close
( ) 

1549 return 
ifs


1552 
	}


1552 def 
	$configure_network
( 
self
) : 

1567 for 
path
in ( '/etc/network/interfaces' , '/etc/resolv.conf' ) : 

1568 if 
os
. 
path
. 
	`exists
( 
path
) : 

1569 
shutil
. 
	`copy2
( 
path
, 
os
. 
path
. 
	`join
( 
self
. 
target
, 
path
[ 1 : ] ) ) 

1572 
hostname
= 
self
. 
db
. 
	`get
( 'netcfg/get_hostname' ) 

1573 except 
debconf
. 
DebconfError
: 

1574 
hostname
= '' 

1576 
domain
= 
self
. 
db
. 
	`get
( 'netcfg/get_domain' ) 

1577 except 
debconf
. 
DebconfError
: 

1578 
domain
= '' 

1579 if 
hostname
== '' : 

1580 
hostname
= 'ubuntu' 

1582 
fp
= 
	`open
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 'etc/hostname' ) , 'w' ) 

1583 print >> 
fp
, 
hostname


1584 
fp
. 
	`close
( ) 

1586 
hosts
= 
	`open
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 'etc/hosts' ) , 'w' ) 

1587 print >> 
hosts
, "127.0.0.1\tlocalhost" 

1588 if 
domain
: 

1589 print >> 
hosts
, "127.0.1.1\t%s.%s\t%s" % ( 
hostname
, 
domain
, 

1590 
hostname
) 

1592 print >> 
hosts
, "127.0.1.1\t%s" % 
hostname


1593 print >> 
hosts
, 
textwrap
. 
	`dedent
( 

1602 
hosts
. 
	`close
( ) 

1604 
persistent_net
= '/etc/udev/rules.d/70-persistent-net.rules' 

1605 if 
os
. 
path
. 
	`exists
( 
persistent_net
) : 

1606 
shutil
. 
	`copy2
( 
persistent_net
, 

1607 
os
. 
path
. 
	`join
( 
self
. 
target
, 
persistent_net
[ 1 : ] ) ) 

1611 
SIOCGIFHWADDR
= 0x8927 

1613 
ARPHRD_ETHER
= 1 

1615 
if_names
= { } 

1616 
sock
= 
socket
. 
	`socket
( 
socket
. 
SOCK_DGRAM
) 

1617 
interfaces
= 
self
. 
	`get_all_interfaces
( ) 

1618 for 
i
in 
	`range
( 
	`len
( 
interfaces
) ) : 

1619 
if_names
[ 
interfaces
[ 
i
] ] = 
struct
. 
	`unpack
( 'H6s' , 

1620 
fcntl
. 
	`ioctl
( 
sock
. 
	`fileno
( ) , 
SIOCGIFHWADDR
, 

1621 
struct
. 
	`pack
( '256s' , 
interfaces
[ 
i
] ) ) [ 16 : 24 ] ) 

1622 
sock
. 
	`close
( ) 

1624 
iftab
= 
	`open
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 'etc/iftab' ) , 'w' ) 

1626 print >> 
iftab
, 
textwrap
. 
	`dedent
( 

1631 for 
i
in 
	`range
( 
	`len
( 
interfaces
) ) : 

1632 
dup
= False 

1633 
with_arp
= False 

1635 
if_name
= 
if_names
[ 
interfaces
[ 
i
] ] 

1636 if 
if_name
is None or 
if_name
[ 0 ] != 
ARPHRD_ETHER
: 

1639 for 
j
in 
	`range
( 
	`len
( 
interfaces
) ) : 

1640 if 
i
== 
j
or 
if_names
[ 
interfaces
[ 
j
] ] is None : 

1642 if 
if_name
[ 1 ] != 
if_names
[ 
interfaces
[ 
j
] ] [ 1 ] : 

1645 if 
if_names
[ 
interfaces
[ 
j
] ] [ 0 ] == 
ARPHRD_ETHER
: 

1646 
dup
= True 

1648 if 
dup
: 

1651 
line
= ( 
interfaces
[ 
i
] + " mac " + 

1652 ':' . 
	`join
( [ '%02x' % 
	`ord
( 
if_name
[ 1 ] [ 
c
] ) 

1653 for 
c
in 
	`range
( 6 ) ] ) ) 

1654 
line
+= " arp %d" % 
if_name
[ 0 ] 

1655 print >> 
iftab
, 
line


1657 
iftab
. 
	`close
( ) 

1660 
	}


1660 def 
	$configure_bootloader
( 
self
) : 

1663 
install_bootloader
= 
self
. 
db
. 
	`get
( 'ubiquity/install_bootloader' ) 

1664 if 
install_bootloader
== "true" : 

1665 
misc
. 
	`execute
( 'mount' , '--bind' , '/proc' , 
self
. 
target
+ '/proc' ) 

1666 
misc
. 
	`execute
( 'mount' , '--bind' , '/dev' , 
self
. 
target
+ '/dev' ) 

1668 
arch
, 
subarch
= 
self
. 
	`archdetect
( ) 

1671 if 
arch
in ( 'amd64' , 'i386' , 'lpia' ) : 

1672 from 
ubiquity
. 
components
import 
	~<grubinstaller


1673 
dbfilter
= 
grubinstaller
. 
	`GrubInstaller
( None ) 

1674 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1675 if 
ret
!= 0 : 

1676 raise 
	`InstallStepError
( 

1677 "GrubInstaller failed with code %d" % 
ret
) 

1678 elif ( 
arch
== 'armel' and 

1679 
subarch
in ( 'imx51' , 'iop32x' , 'ixp4xx' , 'orion5x' ) ) : 

1680 from 
ubiquity
. 
components
import 
	~<flash_kernel


1681 
dbfilter
= 
flash_kernel
. 
	`FlashKernel
( None ) 

1682 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1683 if 
ret
!= 0 : 

1684 raise 
	`InstallStepError
( 

1685 "FlashKernel failed with code %d" % 
ret
) 

1686 elif 
arch
== 'powerpc' and 
subarch
== 'ps3' : 

1687 from 
ubiquity
. 
components
import 
	~<kbootinstaller


1688 
dbfilter
= 
kbootinstaller
. 
	`KbootInstaller
( None ) 

1689 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1690 if 
ret
!= 0 : 

1691 raise 
	`InstallStepError
( 

1692 "KbootInstaller failed with code %d" % 
ret
) 

1693 elif 
arch
== 'powerpc' : 

1694 from 
ubiquity
. 
components
import 
	~<yabootinstaller


1695 
dbfilter
= 
yabootinstaller
. 
	`YabootInstaller
( None ) 

1696 
ret
= 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1697 if 
ret
!= 0 : 

1698 raise 
	`InstallStepError
( 

1699 "YabootInstaller failed with code %d" % 
ret
) 

1701 raise 
	`InstallStepError
( "No bootloader installer found" ) 

1702 except 
ImportError
: 

1703 raise 
	`InstallStepError
( "No bootloader installer found" ) 

1705 
misc
. 
	`execute
( 'umount' , '-f' , 
self
. 
target
+ '/proc' ) 

1706 
misc
. 
	`execute
( 'umount' , '-f' , 
self
. 
target
+ '/dev' ) 

1709 
	}


1709 def 
	$broken_packages
( 
self
, 
cache
) : 

1710 
expect_count
= 
cache
. 
_depcache
. 
BrokenCount


1711 
count
= 0 

1712 
brokenpkgs
= 
	`set
( ) 

1713 for 
pkg
in 
cache
. 
	`keys
( ) : 

1715 if 
cache
. 
_depcache
. 
	`IsInstBroken
( 
cache
. 
_cache
[ 
pkg
] ) : 

1716 
brokenpkgs
. 
	`add
( 
pkg
) 

1717 
count
+= 1 

1718 except 
KeyError
: 

1721 if 
count
>= 
expect_count
: 

1723 return 
brokenpkgs


1725 
	}


1725 def 
	$do_install
( 
self
, 
to_install
) : 

1726 if 
self
. 
langpacks
: 

1727 
self
. 
db
. 
	`progress
( 'START' , 0 , 10 , 'ubiquity/langpacks/title' ) 

1729 
self
. 
db
. 
	`progress
( 'START' , 0 , 10 , 'ubiquity/install/title' ) 

1730 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/find_installables' ) 

1732 
self
. 
db
. 
	`progress
( 'REGION' , 0 , 1 ) 

1733 
fetchprogress
= 
	`DebconfFetchProgress
( 

1734 
self
. 
db
, 'ubiquity/install/title' , 

1737 
cache
= 
	`Cache
( ) 

1739 if 
cache
. 
_depcache
. 
BrokenCount
> 0 : 

1740 
syslog
. 
	`syslog
( 

1742 'packages: %s' % ', ' . 
	`join
( 
self
. 
	`broken_packages
( 
cache
) ) ) 

1743 
self
. 
db
. 
	`progress
( 'STOP' ) 

1746 for 
pkg
in 
to_install
: 

1747 
self
. 
	`mark_install
( 
cache
, 
pkg
) 

1749 
self
. 
db
. 
	`progress
( 'SET' , 1 ) 

1750 
self
. 
db
. 
	`progress
( 'REGION' , 1 , 10 ) 

1751 if 
self
. 
langpacks
: 

1752 
fetchprogress
= 
	`DebconfFetchProgress
( 

1753 
self
. 
db
, 'ubiquity/langpacks/title' , None , 

1755 
installprogress
= 
	`DebconfInstallProgress
( 

1756 
self
. 
db
, 'ubiquity/langpacks/title' , 

1759 
fetchprogress
= 
	`DebconfFetchProgress
( 

1760 
self
. 
db
, 'ubiquity/install/title' , None , 

1762 
installprogress
= 
	`DebconfInstallProgress
( 

1763 
self
. 
db
, 'ubiquity/install/title' , 

1766 
self
. 
	`chroot_setup
( ) 

1767 
commit_error
= None 

1770 if not 
cache
. 
	`commit
( 
fetchprogress
, 
installprogress
) : 

1771 
fetchprogress
. 
	`stop
( ) 

1772 
installprogress
. 
	`finishUpdate
( ) 

1773 
self
. 
db
. 
	`progress
( 'STOP' ) 

1775 except 
IOError
, 
e
: 

1776 for 
line
in 
	`str
( 
e
) . 
	`split
( '\n' ) : 

1777 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 
line
) 

1778 
fetchprogress
. 
	`stop
( ) 

1779 
installprogress
. 
	`finishUpdate
( ) 

1780 
self
. 
db
. 
	`progress
( 'STOP' ) 

1782 except 
SystemError
, 
e
: 

1783 for 
line
in 
	`str
( 
e
) . 
	`split
( '\n' ) : 

1784 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 
line
) 

1785 
commit_error
= 
	`str
( 
e
) 

1787 
self
. 
	`chroot_cleanup
( ) 

1788 
self
. 
db
. 
	`progress
( 'SET' , 10 ) 

1790 
cache
. 
	`open
( None ) 

1791 if 
commit_error
or 
cache
. 
_depcache
. 
BrokenCount
> 0 : 

1792 if 
commit_error
is None : 

1793 
commit_error
= '' 

1794 
brokenpkgs
= 
self
. 
	`broken_packages
( 
cache
) 

1795 
syslog
. 
	`syslog
( 'broken packages after installation: ' 

1796 '%s' % ', ' . 
	`join
( 
brokenpkgs
) ) 

1797 
self
. 
db
. 
	`subst
( 'ubiquity/install/broken_install' , 'ERROR' , 

1798 
commit_error
) 

1799 
self
. 
db
. 
	`subst
( 'ubiquity/install/broken_install' , 'PACKAGES' , 

1800 ', ' . 
	`join
( 
brokenpkgs
) ) 

1801 
self
. 
db
. 
	`input
( 'critical' , 'ubiquity/install/broken_install' ) 

1802 
self
. 
db
. 
	`go
( ) 

1804 
self
. 
db
. 
	`progress
( 'STOP' ) 

1807 
	}


1807 def 
	$expand_dependencies_simple
( 
self
, 
cache
, 
keep
, 
to_remove
, 

1808 
recommends
= True ) : 

1815 
keys
= [ 'Pre-Depends' , 'Depends' ] 

1816 if 
recommends
: 

1817 
keys
. 
	`append
( 'Recommends' ) 

1819 
to_scan
= 
	`set
( 
keep
) 

1820 
to_scan_next
= 
	`set
( ) 

1821 
expanded
= 
	`set
( 
keep
) 

1822 while 
to_scan
: 

1823 for 
pkg
in 
to_scan
: 

1824 
cachedpkg
= 
self
. 
	`get_cache_pkg
( 
cache
, 
pkg
) 

1825 if 
cachedpkg
is None : 

1827 
ver
= 
cachedpkg
. 
_pkg
. 
CurrentVer


1828 if 
ver
is None : 

1830 for 
key
in 
keys
: 

1831 if 
key
in 
ver
. 
DependsList
: 

1832 for 
dep_or
in 
ver
. 
DependsList
[ 
key
] : 

1841 for 
dep
in 
dep_or
: 

1842 
depname
= 
dep
. 
TargetPkg
. 
Name


1843 
cacheddep
= 
self
. 
	`get_cache_pkg
( 
cache
, 
depname
) 

1844 if 
cacheddep
is None : 

1846 if 
cacheddep
. 
_pkg
. 
CurrentVer
is not None : 

1850 if 
depname
in 
expanded
or 
depname
not in 
to_remove
: 

1852 
expanded
. 
	`add
( 
depname
) 

1853 
to_scan_next
. 
	`add
( 
depname
) 

1854 
to_scan
= 
to_scan_next


1855 
to_scan_next
= 
	`set
( ) 

1857 return 
expanded


1860 
	}


1860 def 
	$get_remove_list
( 
self
, 
cache
, 
to_remove
, 
recursive
= False ) : 

1861 
to_remove
= 
	`set
( 
to_remove
) 

1862 
all_removed
= 
	`set
( ) 

1864 
removed
= 
	`set
( ) 

1865 for 
pkg
in 
to_remove
: 

1866 
cachedpkg
= 
self
. 
	`get_cache_pkg
( 
cache
, 
pkg
) 

1867 if 
cachedpkg
is not None and 
cachedpkg
. 
isInstalled
: 

1868 
apt_error
= False 

1870 
cachedpkg
. 
	`markDelete
( 
autoFix
= False , 
purge
= True ) 

1871 except 
SystemError
: 

1872 
apt_error
= True 

1873 if 
apt_error
: 

1874 
cachedpkg
. 
	`markKeep
( ) 

1875 elif 
cache
. 
_depcache
. 
BrokenCount
> 0 : 

1880 
brokenpkgs
= 
self
. 
	`broken_packages
( 
cache
) 

1881 
broken_removed
= 
	`set
( ) 

1882 while 
brokenpkgs
and ( 
recursive
or 

1883 
brokenpkgs
<= 
to_remove
) : 

1884 
broken_removed_inner
= 
	`set
( ) 

1885 for 
pkg2
in 
brokenpkgs
: 

1886 
cachedpkg2
= 
self
. 
	`get_cache_pkg
( 
cache
, 
pkg2
) 

1887 if 
cachedpkg2
is not None : 

1888 
broken_removed_inner
. 
	`add
( 
pkg2
) 

1890 
cachedpkg2
. 
	`markDelete
( 
autoFix
= False , 

1891 
purge
= True ) 

1892 except 
SystemError
: 

1893 
apt_error
= True 

1895 
broken_removed
|= 
broken_removed_inner


1896 if 
apt_error
or not 
broken_removed_inner
: 

1898 
brokenpkgs
= 
self
. 
	`broken_packages
( 
cache
) 

1899 if 
apt_error
or 
cache
. 
_depcache
. 
BrokenCount
> 0 : 

1902 for 
pkg2
in 
broken_removed
: 

1903 
self
. 
	`get_cache_pkg
( 
cache
, 
pkg2
) . 
	`markKeep
( ) 

1904 
cachedpkg
. 
	`markKeep
( ) 

1906 
removed
. 
	`add
( 
pkg
) 

1907 
removed
|= 
broken_removed


1909 
removed
. 
	`add
( 
pkg
) 

1910 assert 
cache
. 
_depcache
. 
BrokenCount
== 0 

1911 if not 
removed
: 

1913 
to_remove
-= 
removed


1914 
all_removed
|= 
removed


1915 return 
all_removed


1918 
	}


1918 def 
	$do_remove
( 
self
, 
to_remove
, 
recursive
= False ) : 

1919 
self
. 
db
. 
	`progress
( 'START' , 0 , 5 , 'ubiquity/install/title' ) 

1920 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/find_removables' ) 

1922 
fetchprogress
= 
	`DebconfFetchProgress
( 

1923 
self
. 
db
, 'ubiquity/install/title' , 

1926 
cache
= 
	`Cache
( ) 

1928 if 
cache
. 
_depcache
. 
BrokenCount
> 0 : 

1929 
syslog
. 
	`syslog
( 

1931 '%s' % ', ' . 
	`join
( 
self
. 
	`broken_packages
( 
cache
) ) ) 

1932 
self
. 
db
. 
	`progress
( 'STOP' ) 

1935 
self
. 
	`get_remove_list
( 
cache
, 
to_remove
, 
recursive
) 

1937 
self
. 
db
. 
	`progress
( 'SET' , 1 ) 

1938 
self
. 
db
. 
	`progress
( 'REGION' , 1 , 5 ) 

1939 
fetchprogress
= 
	`DebconfFetchProgress
( 

1940 
self
. 
db
, 'ubiquity/install/title' , None , 

1942 
installprogress
= 
	`DebconfInstallProgress
( 

1943 
self
. 
db
, 'ubiquity/install/title' , 'ubiquity/install/apt_info' , 

1945 
self
. 
	`chroot_setup
( ) 

1946 
commit_error
= None 

1949 if not 
cache
. 
	`commit
( 
fetchprogress
, 
installprogress
) : 

1950 
fetchprogress
. 
	`stop
( ) 

1951 
installprogress
. 
	`finishUpdate
( ) 

1952 
self
. 
db
. 
	`progress
( 'STOP' ) 

1954 except 
SystemError
, 
e
: 

1955 for 
line
in 
	`str
( 
e
) . 
	`split
( '\n' ) : 

1956 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 
line
) 

1957 
commit_error
= 
	`str
( 
e
) 

1959 
self
. 
	`chroot_cleanup
( ) 

1960 
self
. 
db
. 
	`progress
( 'SET' , 5 ) 

1962 
cache
. 
	`open
( None ) 

1963 if 
commit_error
or 
cache
. 
_depcache
. 
BrokenCount
> 0 : 

1964 if 
commit_error
is None : 

1965 
commit_error
= '' 

1966 
brokenpkgs
= 
self
. 
	`broken_packages
( 
cache
) 

1967 
syslog
. 
	`syslog
( 'broken packages after removal: ' 

1968 '%s' % ', ' . 
	`join
( 
brokenpkgs
) ) 

1969 
self
. 
db
. 
	`subst
( 'ubiquity/install/broken_remove' , 'ERROR' , 

1970 
commit_error
) 

1971 
self
. 
db
. 
	`subst
( 'ubiquity/install/broken_remove' , 'PACKAGES' , 

1972 ', ' . 
	`join
( 
brokenpkgs
) ) 

1973 
self
. 
db
. 
	`input
( 'critical' , 'ubiquity/install/broken_remove' ) 

1974 
self
. 
db
. 
	`go
( ) 

1976 
self
. 
db
. 
	`progress
( 'STOP' ) 

1979 
	}


1979 def 
	$remove_unusable_kernels
( 
self
) : 

1983 
self
. 
db
. 
	`progress
( 'START' , 0 , 5 , 'ubiquity/install/title' ) 

1985 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/find_removables' ) 

1988 
dbfilter
= 
check_kernels
. 
	`CheckKernels
( None ) 

1989 
dbfilter
. 
	`run_command
( 
auto_process
= True ) 

1991 
remove_kernels
= 
	`set
( ) 

1992 if 
os
. 
path
. 
	`exists
( "/var/lib/ubiquity/remove-kernels" ) : 

1993 
remove_kernels_file
= 
	`open
( "/var/lib/ubiquity/remove-kernels" ) 

1994 for 
line
in 
remove_kernels_file
: 

1995 
remove_kernels
. 
	`add
( 
line
. 
	`strip
( ) ) 

1996 
remove_kernels_file
. 
	`close
( ) 

1998 if 
	`len
( 
remove_kernels
) == 0 : 

1999 
self
. 
db
. 
	`progress
( 'STOP' ) 

2002 
self
. 
db
. 
	`progress
( 'SET' , 1 ) 

2003 
self
. 
db
. 
	`progress
( 'REGION' , 1 , 5 ) 

2005 
self
. 
	`do_remove
( 
remove_kernels
, 
recursive
= True ) 

2007 
self
. 
db
. 
	`progress
( 'STOP' ) 

2009 
self
. 
db
. 
	`progress
( 'SET' , 5 ) 

2010 
self
. 
db
. 
	`progress
( 'STOP' ) 

2013 
	}


2013 def 
	$install_extras
( 
self
) : 

2018 
sources_list
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 'etc/apt/sources.list' ) 

2019 
os
. 
	`rename
( 
sources_list
, "%s.apt-setup" % 
sources_list
) 

2020 
old_sources
= 
	`open
( "%s.apt-setup" % 
sources_list
) 

2021 
new_sources
= 
	`open
( 
sources_list
, 'w' ) 

2022 
found_cdrom
= False 

2023 for 
line
in 
old_sources
: 

2024 if 'cdrom:' in 
line
: 

2025 print >> 
new_sources
, 
line
, 

2026 
found_cdrom
= True 

2027 
new_sources
. 
	`close
( ) 

2028 
old_sources
. 
	`close
( ) 

2029 if not 
found_cdrom
: 

2030 
os
. 
	`rename
( "%s.apt-setup" % 
sources_list
, 
sources_list
) 

2032 
self
. 
	`do_install
( 
self
. 
	`query_recorded_installed
( ) ) 

2034 if 
found_cdrom
: 

2035 
os
. 
	`rename
( "%s.apt-setup" % 
sources_list
, 
sources_list
) 

2042 if 
self
. 
db
. 
	`get
( 'oem-config/enable' ) == 'true' : 

2043 if 
os
. 
path
. 
	`isdir
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 'home/oem' ) ) : 

2044 
	`open
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 'home/oem/.hwdb' ) , 

2045 'w' ) . 
	`close
( ) 

2047 for 
desktop_file
in ( 

2050 if 
os
. 
path
. 
	`exists
( 
os
. 
path
. 
	`join
( 
self
. 
target
, 

2051 
desktop_file
) ) : 

2052 
desktop_base
= 
os
. 
path
. 
	`basename
( 
desktop_file
) 

2053 
self
. 
	`chrex
( 'install' , '-d' , 

2056 
self
. 
	`chrex
( 'install' , '-o' , 'oem' , '-g' , 'oem' , 

2057 '/%s' % 
desktop_file
, 

2058 '/home/oem/Desktop/%s' % 
desktop_base
) 

2063 
di_locale
= 
self
. 
db
. 
	`get
( 'debian-installer/locale' ) 

2064 if 
di_locale
: 

2065 
self
. 
	`set_debconf
( 'debian-installer/locale' , 
di_locale
) 

2066 except 
debconf
. 
DebconfError
: 

2070 
	}


2070 def 
	$remove_extras
( 
self
) : 

2078 if ( 
os
. 
path
. 
	`exists
( "/cdrom/casper/filesystem.manifest-desktop" ) and 

2079 
os
. 
path
. 
	`exists
( "/cdrom/casper/filesystem.manifest" ) ) : 

2080 
desktop_packages
= 
	`set
( ) 

2081 
manifest
= 
	`open
( "/cdrom/casper/filesystem.manifest-desktop" ) 

2082 for 
line
in 
manifest
: 

2083 if 
line
. 
	`strip
( ) != '' and not 
line
. 
	`startswith
( '#' ) : 

2084 
desktop_packages
. 
	`add
( 
line
. 
	`split
( ) [ 0 ] ) 

2085 
manifest
. 
	`close
( ) 

2086 
live_packages
= 
	`set
( ) 

2087 
manifest
= 
	`open
( "/cdrom/casper/filesystem.manifest" ) 

2088 for 
line
in 
manifest
: 

2089 if 
line
. 
	`strip
( ) != '' and not 
line
. 
	`startswith
( '#' ) : 

2090 
live_packages
. 
	`add
( 
line
. 
	`split
( ) [ 0 ] ) 

2091 
manifest
. 
	`close
( ) 

2092 
difference
= 
live_packages
- 
desktop_packages


2094 
difference
= 
	`set
( ) 

2097 
keep
= 
self
. 
	`query_recorded_installed
( ) 

2099 
arch
, 
subarch
= 
self
. 
	`archdetect
( ) 

2101 if 
arch
in ( 'amd64' , 'i386' , 'lpia' ) : 

2102 if 'grub' not in 
keep
: 

2103 
difference
. 
	`add
( 'grub' ) 

2104 if 'grub-pc' not in 
keep
: 

2105 
difference
. 
	`add
( 'grub-pc' ) 

2106 if 'lilo' not in 
keep
: 

2107 
difference
. 
	`add
( 'lilo' ) 

2109 
cache
= 
	`Cache
( ) 

2110 
difference
-= 
self
. 
	`expand_dependencies_simple
( 
cache
, 
keep
, 
difference
) 

2111 del 
cache


2113 if 
	`len
( 
difference
) == 0 : 

2116 
use_restricted
= True 

2118 if 
self
. 
db
. 
	`get
( 'apt-setup/restricted' ) == 'false' : 

2119 
use_restricted
= False 

2120 except 
debconf
. 
DebconfError
: 

2122 if not 
use_restricted
: 

2123 
cache
= 
self
. 
restricted_cache


2124 for 
pkg
in 
cache
. 
	`keys
( ) : 

2125 if ( 
cache
[ 
pkg
] . 
isInstalled
and 

2126 
cache
[ 
pkg
] . 
section
. 
	`startswith
( 'restricted/' ) ) : 

2127 
difference
. 
	`add
( 
pkg
) 

2128 del 
cache


2134 
self
. 
	`do_remove
( 
difference
) 

2136 
	}


2136 def 
	$remove_broken_cdrom
( 
self
) : 

2137 
fstab
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 'etc/fstab' ) 

2138 
ret
= [ ] 

2140 
fp
= 
	`open
( 
fstab
) 

2141 for 
line
in 
fp
: 

2142 
l
= 
line
. 
	`split
( ) 

2143 if 
	`len
( 
l
) > 2 : 

2144 if 
l
[ 1 ] . 
	`startswith
( '/cdrom' ) or 
l
[ 1 ] . 
	`startswith
( '/media/cdrom' ) : 

2146 
fstype
= 
subprocess
. 
	`Popen
( 

2147 [ 'vol_id' , '--type' , 
l
[ 0 ] ] , 

2148 
stdout
= 
subprocess
. 
PIPE
) . 
	`communicate
( ) [ 0 ] . 
	`rstrip
( '\n' ) 

2149 if 
fstype
!= 'iso9660' and 
fstype
!= 'udf' : 

2151 except 
OSError
: 

2153 
ret
. 
	`append
( 
line
) 

2154 
fp
. 
	`close
( ) 

2155 
fp
= 
	`open
( 
fstab
, 'w' ) 

2156 
fp
. 
	`writelines
( 
ret
) 

2157 except 
Exception
, 
e
: 

2158 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 'Exception during installation:' ) 

2159 
syslog
. 
	`syslog
( 
syslog
. 
LOG_ERR
, 

2160 'Unable to process /etc/fstab: ' + 
	`str
( 
e
) ) 

2162 if 
fp
: 

2163 
fp
. 
	`close
( ) 

2165 
	}


2165 def 
	$cleanup
( 
self
) : 

2168 
misc
. 
	`execute
( 'umount' , 
os
. 
path
. 
	`join
( 
self
. 
target
, 'cdrom' ) ) 

2170 
env
= 
	`dict
( 
os
. 
environ
) 

2171 
env
[ 'OVERRIDE_BASE_INSTALLABLE' ] = '1' 

2172 
subprocess
. 
	`call
( [ '/usr/lib/ubiquity/apt-setup/finish-install' ] , 

2173 
env
= 
env
) 

2175 for 
apt_conf
in ( '00NoMountCDROM' , '00IgnoreTimeConflict' , 

2178 
os
. 
	`unlink
( 
os
. 
path
. 
	`join
( 

2179 
self
. 
target
, 'etc/apt/apt.conf.d' , 
apt_conf
) ) 

2183 if 
self
. 
source
== '/var/lib/ubiquity/source' : 

2184 
self
. 
	`umount_source
( ) 

2187 
	}


2187 def 
	$chrex
( 
self
, * 
args
) : 

2189 return 
misc
. 
	`execute
( 'chroot' , 
self
. 
target
, * 
args
) 

2192 
	}


2192 def 
	$copy_debconf
( 
self
, 
package
) : 

2199 
targetdb
= 
os
. 
path
. 
	`join
( 
self
. 
target
, 'var/cache/debconf/config.dat' ) 

2201 
misc
. 
	`execute
( 'debconf-copydb' , 'configdb' , 'targetdb' , '-p' , 

2202 '^%s/' % 
package
, '--config=Name:targetdb' , 

2203 '--config=Driver:File' , '--config=Filename:' + 
targetdb
) 

2206 
	}


2206 def 
	$set_debconf
( 
self
, 
question
, 
value
) : 

2207 
dccomm
= 
subprocess
. 
	`Popen
( [ 'log-output' , '-t' , 'ubiquity' , 

2209 'chroot' , 
self
. 
target
, 

2212 
stdin
= 
subprocess
. 
PIPE
, 

2213 
stdout
= 
subprocess
. 
PIPE
, 
close_fds
= True ) 

2215 
dc
= 
debconf
. 
	`Debconf
( 
read
= 
dccomm
. 
stdout
, 
write
= 
dccomm
. 
stdin
) 

2216 
dc
. 
	`set
( 
question
, 
value
) 

2217 
dc
. 
	`fset
( 
question
, 'seen' , 'true' ) 

2219 
dccomm
. 
stdin
. 
	`close
( ) 

2220 
dccomm
. 
	`wait
( ) 

2223 
	}


2223 def 
	$reconfigure_preexec
( 
self
) : 

2224 
	`debconf_disconnect
( ) 

2225 
os
. 
environ
[ 'XAUTHORITY' ] = '/root/.Xauthority' 

2227 
	}


2227 def 
	$reconfigure
( 
self
, 
package
) : 

2230 
subprocess
. 
	`call
( [ 'log-output' , '-t' , 'ubiquity' , 'chroot' , 
self
. 
target
, 

2231 'dpkg-reconfigure' , '-fnoninteractive' , 
package
] , 

2232 
preexec_fn
= 
self
. 
reconfigure_preexec
, 
close_fds
= True ) 

2235 
	}


2235 if 
__name__
== '__main__' : 

2236 if not 
os
. 
path
. 
	`exists
( '/var/lib/ubiquity' ) : 

2237 
os
. 
	`makedirs
( '/var/lib/ubiquity' ) 

2238 if 
os
. 
path
. 
	`exists
( '/var/lib/ubiquity/install.trace' ) : 

2239 
os
. 
	`unlink
( '/var/lib/ubiquity/install.trace' ) 

2241 
install
= 
	`Install
( ) 

2242 
sys
. 
excepthook
= 
install
. 
excepthook


2243 
install
. 
	`run
( ) 

2244 
sys
. 
	`exit
( 0 ) 

2246 

	@scripts/mythbuntu/mythbuntu_install.py

22 import 
	~<sys


23 import 
	~<os


24 import 
	~<errno


25 import 
	~<re


26 import 
	~<syslog


27 import 
	~<debconf


28 import 
	~<shutil


29 import 
	~<XKit
. 
	~<xutils


31 import 
	~<string


33 
sys
. 
path
. 
	`insert
( 0 , '/usr/lib/ubiquity' ) 

35 from 
install
import 
	~<Install
as 
	~<ParentInstall


36 from 
install
import 
	~<InstallStepError


37 from 
ubiquity
. 
components
import 
	~<mythbuntu_install


39 from 
mythbuntu_common
. 
lirc
import 
	~<LircHandler


40 from 
mythbuntu_common
. 
vnc
import 
	~<VNCHandler


42 class 
	cInstall
( 
ParentInstall
) : 

44 def 
	$__init__
( 
self
) : 

48 
ParentInstall
. 
	`__init__
( 
self
) 

50 
self
. 
lirc
= 
	`LircHandler
( ) 

51 
self
. 
vnc
= 
	`VNCHandler
( ) 

52 
self
. 
type
= 
self
. 
db
. 
	`get
( 'mythbuntu/install_type' ) 

55 
self
. 
langpacks
= { } 

57 
	}


57 def 
	$configure_user
( 
self
) : 

62 
self
. 
passwd
= 
self
. 
db
. 
	`get
( 'passwd/user-password' ) 

63 
self
. 
	`set_debconf
( 'mythtv/mysql_admin_password' , 
self
. 
passwd
) 

64 
self
. 
	`set_debconf
( 'mysql-server/root_password' , 
self
. 
passwd
) 

65 
self
. 
	`set_debconf
( 'mysql-server/root_password_again' , 
self
. 
passwd
) 

68 
ParentInstall
. 
	`configure_user
( 
self
) 

71 
self
. 
user
= 
self
. 
db
. 
	`get
( 'passwd/username' ) 

72 
self
. 
uid
= 
self
. 
gid
= '' 

74 
self
. 
uid
= 
self
. 
db
. 
	`get
( 'passwd/user-uid' ) 

75 except 
debconf
. 
DebconfError
: 

78 
self
. 
gid
= 
self
. 
db
. 
	`get
( 'passwd/user-gid' ) 

79 except 
debconf
. 
DebconfError
: 

81 if 
self
. 
uid
== '' : 

82 
self
. 
uid
= 1000 

84 
self
. 
uid
= 
	`int
( 
self
. 
uid
) 

85 if 
self
. 
gid
== '' : 

86 
self
. 
gid
= 1000 

88 
self
. 
gid
= 
	`int
( 
self
. 
gid
) 

91 
home_mythtv_dir
= 
self
. 
target
+ '/home/' + 
self
. 
user
+ '/.mythtv' 

92 if not 
os
. 
path
. 
	`isdir
( 
home_mythtv_dir
) : 

94 if 
os
. 
path
. 
	`islink
( 
home_mythtv_dir
) or 
os
. 
path
. 
	`exists
( 
home_mythtv_dir
) : 

95 
os
. 
	`remove
( 
home_mythtv_dir
) 

96 
os
. 
	`mkdir
( 
home_mythtv_dir
) 

97 
os
. 
	`chown
( 
home_mythtv_dir
, 
self
. 
uid
, 
self
. 
gid
) 

100 
sql_txt
= 
home_mythtv_dir
+ '/mysql.txt' 

101 if 
os
. 
path
. 
	`islink
( 
sql_txt
) or 
os
. 
path
. 
	`exists
( 
sql_txt
) : 

102 
os
. 
	`remove
( 
sql_txt
) 

104 
os
. 
	`symlink
( '/etc/mythtv/mysql.txt' , 
sql_txt
) 

105 except 
OSError
: 

111 if 'Frontend' in 
self
. 
type
: 

112 
config_dir
= 
self
. 
target
+ '/home/' + 
self
. 
user
+ '/.config' 

113 
autostart_dir
= 
config_dir
+ '/autostart' 

114 
autostart_link
= 
autostart_dir
+ '/mythtv.desktop' 

115 if not 
os
. 
path
. 
	`isdir
( 
config_dir
) : 

116 
os
. 
	`makedirs
( 
config_dir
) 

117 
os
. 
	`chown
( 
config_dir
, 
self
. 
uid
, 
self
. 
gid
) 

118 if not 
os
. 
path
. 
	`isdir
( 
autostart_dir
) : 

119 
os
. 
	`makedirs
( 
autostart_dir
) 

120 
os
. 
	`chown
( 
autostart_dir
, 
self
. 
uid
, 
self
. 
gid
) 

121 elif 
os
. 
path
. 
	`islink
( 
autostart_link
) or 
os
. 
path
. 
	`exists
( 
autostart_link
) : 

122 
os
. 
	`remove
( 
autostart_link
) 

124 
os
. 
	`symlink
( '/usr/share/applications/mythtv.desktop' , 
autostart_link
) 

125 except 
OSError
: 

130 
self
. 
	`chrex
( 'adduser' , 
self
. 
user
, 'mythtv' ) 

131 
self
. 
	`chrex
( 'adduser' , 
self
. 
user
, 'video' ) 

133 
	}


133 def 
	$configure_ma
( 
self
) : 

137 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/mythbuntu' ) 

140 for 
question
in ( 'mythtv/mysql_mythtv_user' , 'mythtv/mysql_mythtv_password' , 

142 
answer
= 
self
. 
db
. 
	`get
( 
question
) 

143 
self
. 
	`set_debconf
( 
question
, 
answer
) 

146 
os
. 
	`remove
( 
self
. 
target
+ '/etc/mythtv/mysql.txt' ) 

147 
self
. 
	`reconfigure
( 'mythtv-common' ) 

150 if 'Master' in 
self
. 
type
: 

152 
self
. 
	`chrex
( 'mount' , '-t' , 'proc' , 'proc' , '/proc' ) 

155 
self
. 
	`reconfigure
( 'mysql-server-5.0' ) 

156 
self
. 
	`reconfigure
( 'mythtv-database' ) 

159 
self
. 
	`chrex
( 'invoke-rc.d' , 'mysql' , 'stop' ) 

160 
self
. 
	`chrex
( 'umount' , '/proc' ) 

163 
self
. 
	`set_debconf
( 'mythweb/enable' , 'true' ) 

164 
self
. 
	`set_debconf
( 'mythweb/username' , 
self
. 
user
) 

165 
self
. 
	`set_debconf
( 'mythweb/password' , 
self
. 
passwd
) 

166 
self
. 
	`reconfigure
( 'mythweb' ) 

168 
	}


168 def 
	$install_extras
( 
self
) : 

171 
video_driver
= 
self
. 
db
. 
	`get
( 'mythbuntu/video_driver' ) 

172 
vnc
= 
self
. 
db
. 
	`get
( 'mythbuntu/x11vnc' ) 

173 
nfs
= 
self
. 
db
. 
	`get
( 'mythbuntu/nfs-kernel-server' ) 

174 
to_install
= [ ] 

175 
to_remove
= 
	`set
( ) 

176 if 
video_driver
!= "Open Source Driver" : 

177 
to_install
. 
	`append
( 
video_driver
) 

178 if 
vnc
== 'true' : 

179 
to_install
. 
	`append
( 'x11vnc' ) 

180 if 
nfs
== 'true' : 

181 
to_install
. 
	`append
( 'nfs-kernel-server' ) 

182 
to_install
. 
	`append
( 'portmap' ) 

185 if 
to_remove
!= [ ] : 

186 
self
. 
	`do_remove
( 
to_remove
) 

188 
self
. 
	`record_installed
( 
to_install
) 

191 
ParentInstall
. 
	`install_extras
( 
self
) 

194 if 
video_driver
!= "Open Source Driver" : 

195 
self
. 
	`chrex
( '/sbin/depmod' , '-a' ) 

197 
	}


197 def 
	$configure_hardware
( 
self
) : 

202 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/drivers' ) 

203 
video_driver
= 
self
. 
db
. 
	`get
( 'mythbuntu/video_driver' ) 

204 
out
= 
self
. 
db
. 
	`get
( 'mythbuntu/tvout' ) 

205 
standard
= 
self
. 
db
. 
	`get
( 'mythbuntu/tvstandard' ) 

206 if 'nvidia' in 
video_driver
: 

207 
self
. 
	`enable_nvidia
( 
out
, 
standard
) 

208 elif 'fglrx' in 
video_driver
: 

209 
self
. 
	`enable_amd
( 
out
, 
standard
) 

212 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/services' ) 

213 if 
self
. 
db
. 
	`get
( 'mythbuntu/samba' ) == 'true' : 

214 
shutil
. 
	`copy
( '/usr/share/mythbuntu-common/examples/smb.conf.dist' , 
self
. 
target
+ '/etc/samba/smb.conf' ) 

215 if 
self
. 
db
. 
	`get
( 'mythbuntu/nfs-kernel-server' ) == 'true' : 

216 
shutil
. 
	`copy
( '/usr/share/mythbuntu-common/examples/exports.dist' , 
self
. 
target
+ '/etc/exports' ) 

217 if 
self
. 
db
. 
	`get
( 'mythbuntu/openssh-server' ) == 'true' : 

218 for 
file
in [ 'ssh_host_dsa_key' , 'ssh_host_dsa_key.pub' , 'ssh_host_rsa_key' , 'ssh_host_rsa_key.pub' ] : 

219 
os
. 
	`remove
( 
self
. 
target
+ '/etc/ssh/' + 
file
) 

220 
self
. 
	`reconfigure
( 'openssh-server' ) 

221 if 
self
. 
db
. 
	`get
( 'mythbuntu/mysql-server' ) == 'true' : 

222 
f
= 
	`open
( 
self
. 
target
+ '/etc/mysql/conf.d/mythtv.cnf' , 'w' ) 

223 print >> 
f
, 

226 
f
. 
	`close
( ) 

227 if 
self
. 
db
. 
	`get
( 'mythbuntu/x11vnc' ) == 'true' : 

228 
self
. 
vnc
. 
	`create_password
( 
self
. 
passwd
) 

229 
directory
= 
self
. 
target
+ '/home/' + 
self
. 
user
+ '/.vnc' 

230 if not 
os
. 
path
. 
	`exists
( 
directory
) : 

231 
os
. 
	`mkdir
( 
directory
) 

232 
shutil
. 
	`move
( '/root/.vnc/passwd' , 
directory
+ '/passwd' ) 

233 
os
. 
	`system
( 'chown ' + 
	`str
( 
self
. 
uid
) + ':' + 
	`str
( 
self
. 
gid
) + ' -R ' + 
directory
) 

236 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/ir' ) 

237 
self
. 
	`configure_ir
( ) 

240 
self
. 
db
. 
	`progress
( 'INFO' , 'ubiquity/install/hardware' ) 

241 
ParentInstall
. 
	`configure_hardware
( 
self
) 

243 
	}


243 def 
	$configure_ir
( 
self
) : 

246 
ir_device
= { "modules" : "" , "driver" : "" , "device" : "" , "lircd_conf" : "" , "remote" : "" , "transmitter" : "" } 

247 
self
. 
	`chroot_setup
( ) 

248 
self
. 
	`chrex
( 'dpkg-divert' , '--package' , 'ubiquity' , '--rename' , 

251 
os
. 
	`symlink
( '/bin/true' , '/target/sbin/udevd' ) 

252 except 
OSError
: 

256 
ir_device
[ "remote" ] = 
self
. 
db
. 
	`get
( 'lirc/remote' ) 

257 
self
. 
	`set_debconf
( 'lirc/remote' , 
ir_device
[ "remote" ] ) 

258 
ir_device
[ "modules" ] = "" 

259 
ir_device
[ "driver" ] = "" 

260 
ir_device
[ "device" ] = "" 

261 
ir_device
[ "lircd_conf" ] = "" 

262 
self
. 
lirc
. 
	`set_device
( 
ir_device
, "remote" ) 

263 except 
debconf
. 
DebconfError
: 

267 
ir_device
[ "transmitter" ] = 
self
. 
db
. 
	`get
( 'lirc/transmitter' ) 

268 
self
. 
	`set_debconf
( 'lirc/transmitter' , 
ir_device
[ "transmitter" ] ) 

269 
ir_device
[ "modules" ] = "" 

270 
ir_device
[ "driver" ] = "" 

271 
ir_device
[ "device" ] = "" 

272 
ir_device
[ "lircd_conf" ] = "" 

273 
self
. 
lirc
. 
	`set_device
( 
ir_device
, "transmitter" ) 

274 except 
debconf
. 
DebconfError
: 

277 
self
. 
lirc
. 
	`write_hardware_conf
( 
self
. 
target
+ '/etc/lirc/hardware.conf' ) 

280 
self
. 
	`reconfigure
( 'lirc' ) 

283 
os
. 
	`unlink
( '/target/sbin/udevd' ) 

284 except 
OSError
: 

286 
self
. 
	`chrex
( 'dpkg-divert' , '--package' , 'ubiquity' , '--rename' , 

288 
self
. 
	`chroot_cleanup
( ) 

291 
home
= '/target/home/' + 
self
. 
db
. 
	`get
( 'passwd/username' ) 

292 
os
. 
	`putenv
( 'HOME' , 
home
) 

293 
self
. 
lirc
. 
	`create_lircrc
( 
self
. 
target
+ "/etc/lirc/lircd.conf" , False ) 

294 
os
. 
	`system
( 'chown ' + 
	`str
( 
self
. 
uid
) + ':' + 
	`str
( 
self
. 
gid
) + ' -R ' + 
home
+ '/.lirc*' ) 

296 
	}


296 def 
	$enable_amd
( 
self
, 
type
, 
format
) : 

297 if 
type
== 'Composite Video Output' : 

298 
self
. 
	`chrex
( '/usr/bin/aticonfig' , '--tvs VIDEO' , '--tvf ' + 
format
) 

299 elif 
type
== 'S-Video Video Output' : 

300 
self
. 
	`chrex
( '/usr/bin/aticonfig' , '--tvs VIDEO' , '--tvf ' + 
format
) 

301 elif 
type
== 'Component Video Output' : 

302 
self
. 
	`chrex
( '/usr/bin/aticonfig' , '--tvs YUV' , '--tvf ' + 
format
) 

304 
self
. 
	`chrex
( '/usr/bin/aticonfig' ) 

306 
	}


306 def 
	$enable_nvidia
( 
self
, 
type
, 
format
) : 

308 
xorg_conf
= 
XKit
. 
xutils
. 
	`XUtils
( "/etc/X11/xorg.conf" ) 

310 
extra_conf_options
= { 'NoLogo' : '1' , 

314 if 
type
== 'Composite Video Output' : 

315 
extra_conf_options
[ "ConnectedMonitor" ] = "TV" 

316 
extra_conf_options
[ "TVOutFormat" ] = "COMPOSITE" 

317 
extra_conf_options
[ "TVStandard" ] = 
format


318 elif 
type
== 'S-Video Video Output' : 

319 
extra_conf_options
[ "ConnectedMonitor" ] = "TV" 

320 
extra_conf_options
[ "TVOutFormat" ] = "SVIDEO" 

321 
extra_conf_options
[ "TVStandard" ] = 
format


322 elif 
type
== 'Component Video Output' : 

323 
extra_conf_options
[ "ConnectedMonitor" ] = "TV" 

324 
extra_conf_options
[ "TVOutFormat" ] = "COMPONENT" 

325 
extra_conf_options
[ "TVStandard" ] = 
format


328 
relevant_devices
= [ ] 

329 if 
	`len
( 
xorg_conf
. 
globaldict
[ 'Device' ] ) == 0 : 

330 
device
= 
xorg_conf
. 
	`makeSection
( 'Device' , 
identifier
= 'Default Device' ) 

331 
relevant_devices
. 
	`append
( 
device
) 

332 
xorg_conf
. 
	`setDriver
( 'Device' , 'nvidia' , 
device
) 

334 
devices
= 
xorg_conf
. 
	`getDevicesInUse
( ) 

335 if 
	`len
( 
devices
) > 0 : 

336 
relevant_devices
= 
devices


338 
relevant_devices
= 
xorg_conf
. 
globaldict
[ 'Device' ] . 
	`keys
( ) 

339 for 
device
in 
relevant_devices
: 

340 
xorg_conf
. 
	`setDriver
( 'Device' , 'nvidia' , 
device
) 

342 for 
device_section
in 
relevant_devices
: 

343 for 
k
, 
v
in 
extra_conf_options
. 
	`iteritems
( ) : 

344 
xorg_conf
. 
	`addOption
( 'Device' , 
k
, 
v
, 
optiontype
= 'Option' , 
position
= 
device_section
) 

347 if 
	`len
( 
xorg_conf
. 
globaldict
[ 'Screen' ] ) == 0 : 

348 
screen
= 
xorg_conf
. 
	`makeSection
( 'Screen' , 
identifier
= 'Default Screen' ) 

350 
xorg_conf
. 
	`addOption
( 'Screen' , 'DefaultDepth' , '24' , 
position
= 0 , 
prefix
= '' ) 

352 
xorg_conf
. 
	`writeFile
( 
self
. 
target
+ "/etc/X11/xorg.conf" ) 

354 
	}


354 def 
	$remove_extras
( 
self
) : 

358 
ParentInstall
. 
	`remove_extras
( 
self
) 

361 
packages
= 
	`set
( ) 

363 if 'Slave' in 
self
. 
type
or 
self
. 
type
== 'Frontend' : 

364 
packages
. 
	`add
( 'mythtv-backend-master' ) 

365 if 'Frontend' not in 
self
. 
type
: 

366 
packages
. 
	`add
( 'mythtv-frontend' ) 

368 for 
service
in [ 'samba' , 'openssh-server' ] : 

369 if 
self
. 
db
. 
	`get
( 'mythbuntu/' + 
service
) == "false" : 

370 
packages
. 
	`add
( 
service
) 

372 if 
	`len
( 
packages
) >= 0 : 

375 
self
. 
	`do_remove
( 
packages
, True ) 

377 
	}


377 if 
__name__
== '__main__' : 

378 if not 
os
. 
path
. 
	`exists
( '/var/lib/ubiquity' ) : 

379 
os
. 
	`makedirs
( '/var/lib/ubiquity' ) 

380 if 
os
. 
path
. 
	`exists
( '/var/lib/ubiquity/install.trace' ) : 

381 
os
. 
	`unlink
( '/var/lib/ubiquity/install.trace' ) 

383 
install
= 
	`Install
( ) 

384 
sys
. 
excepthook
= 
install
. 
excepthook


385 
install
. 
	`run
( ) 

386 
sys
. 
	`exit
( 0 ) 

	@
1
.
0
53
1725
ubiquity/i18n.py
ubiquity/progressposition.py
ubiquity/misc.py
ubiquity/debconfcommunicator.py
ubiquity/components/console_setup_apply.py
ubiquity/components/clock_setup.py
ubiquity/components/partman.py
ubiquity/components/timezone.py
ubiquity/components/mythbuntu.py
ubiquity/components/yabootinstaller.py
ubiquity/components/grubinstaller.py
ubiquity/components/kbootinstaller.py
ubiquity/components/apt_setup.py
ubiquity/components/console_setup.py
ubiquity/components/install.py
ubiquity/components/hw_detect.py
ubiquity/components/check_kernels.py
ubiquity/components/flash_kernel.py
ubiquity/components/usersetup.py
ubiquity/components/__init__.py
ubiquity/components/language.py
ubiquity/components/siloinstaller.py
ubiquity/components/summary.py
ubiquity/components/usersetup_apply.py
ubiquity/components/migrationassistant.py
ubiquity/components/language_apply.py
ubiquity/components/timezone_apply.py
ubiquity/components/mythbuntu_install.py
ubiquity/components/partman_commit.py
ubiquity/components/migrationassistant_apply.py
ubiquity/frontend/base.py
ubiquity/frontend/kde_ui.py
ubiquity/frontend/mythbuntu_ui.py
ubiquity/frontend/gtk_ui.py
ubiquity/frontend/__init__.py
ubiquity/frontend/noninteractive.py
ubiquity/frontend/kde_components/PartitionModel.py
ubiquity/frontend/kde_components/__init__.py
ubiquity/frontend/kde_components/Timezone.py
ubiquity/frontend/kde_components/PartitionBar.py
ubiquity/wrap_label.py
ubiquity/debconffilter.py
ubiquity/__init__.py
ubiquity/validation.py
ubiquity/filteredcommand.py
ubiquity/timezone_map.py
ubiquity/parted_server.py
ubiquity/osextras.py
ubiquity/segmented_bar.py
ubiquity/gconftool.py
ubiquity/tz.py
scripts/install.py
scripts/mythbuntu/mythbuntu_install.py
